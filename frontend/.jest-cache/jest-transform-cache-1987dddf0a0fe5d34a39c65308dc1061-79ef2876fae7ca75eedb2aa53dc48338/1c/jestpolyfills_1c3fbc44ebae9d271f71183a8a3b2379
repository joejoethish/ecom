8dd1ee0d7271ff15190ba2dc51bdb0d6
// Jest polyfills for testing environment
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("whatwg-fetch");
// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
    constructor(){}
    disconnect() {}
    observe() {}
    unobserve() {}
};
// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
    constructor(){}
    disconnect() {}
    observe() {}
    unobserve() {}
};
// Mock matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock scrollTo
Object.defineProperty(window, 'scrollTo', {
    value: jest.fn(),
    writable: true
});
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.localStorage = localStorageMock;
// Mock sessionStorage
const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.sessionStorage = sessionStorageMock;
// Mock URL.createObjectURL
global.URL.createObjectURL = jest.fn(()=>'mocked-url');
global.URL.revokeObjectURL = jest.fn();
// Mock File and FileReader
global.File = class File {
    constructor(chunks, filename, options = {}){
        this.chunks = chunks;
        this.name = filename;
        this.size = chunks.reduce((acc, chunk)=>acc + chunk.length, 0);
        this.type = options.type || '';
        this.lastModified = options.lastModified || Date.now();
    }
};
global.FileReader = class FileReader {
    constructor(){
        this.readyState = 0;
        this.result = null;
        this.error = null;
    }
    readAsDataURL() {
        this.readyState = 2;
        this.result = 'data:text/plain;base64,dGVzdA==';
        if (this.onload) this.onload();
    }
    readAsText() {
        this.readyState = 2;
        this.result = 'test content';
        if (this.onload) this.onload();
    }
};
// Mock Blob
global.Blob = class Blob {
    constructor(chunks = [], options = {}){
        this.size = chunks.reduce((acc, chunk)=>acc + chunk.length, 0);
        this.type = options.type || '';
    }
};
// Mock crypto
Object.defineProperty(global, 'crypto', {
    value: {
        randomUUID: ()=>'12345678-1234-1234-1234-123456789012',
        getRandomValues: (arr)=>{
            for(let i = 0; i < arr.length; i++){
                arr[i] = Math.floor(Math.random() * 256);
            }
            return arr;
        }
    }
});
// Mock performance
global.performance = {
    now: jest.fn(()=>Date.now()),
    mark: jest.fn(),
    measure: jest.fn(),
    getEntriesByName: jest.fn(()=>[]),
    getEntriesByType: jest.fn(()=>[])
};
// Mock requestAnimationFrame
global.requestAnimationFrame = jest.fn((cb)=>setTimeout(cb, 0));
global.cancelAnimationFrame = jest.fn((id)=>clearTimeout(id));
// Mock requestIdleCallback
global.requestIdleCallback = jest.fn((cb)=>setTimeout(cb, 0));
global.cancelIdleCallback = jest.fn((id)=>clearTimeout(id));
// Mock MutationObserver
global.MutationObserver = class MutationObserver {
    constructor(){}
    disconnect() {}
    observe() {}
    unobserve() {}
};
// Mock getComputedStyle
global.getComputedStyle = jest.fn(()=>({
        getPropertyValue: jest.fn(()=>'')
    }));
// Mock HTMLElement methods
HTMLElement.prototype.scrollIntoView = jest.fn();
HTMLElement.prototype.focus = jest.fn();
HTMLElement.prototype.blur = jest.fn();
// Mock canvas context
HTMLCanvasElement.prototype.getContext = jest.fn(()=>({
        fillRect: jest.fn(),
        clearRect: jest.fn(),
        getImageData: jest.fn(()=>({
                data: new Array(4)
            })),
        putImageData: jest.fn(),
        createImageData: jest.fn(()=>({
                data: new Array(4)
            })),
        setTransform: jest.fn(),
        drawImage: jest.fn(),
        save: jest.fn(),
        fillText: jest.fn(),
        restore: jest.fn(),
        beginPath: jest.fn(),
        moveTo: jest.fn(),
        lineTo: jest.fn(),
        closePath: jest.fn(),
        stroke: jest.fn(),
        translate: jest.fn(),
        scale: jest.fn(),
        rotate: jest.fn(),
        arc: jest.fn(),
        fill: jest.fn(),
        measureText: jest.fn(()=>({
                width: 0
            })),
        transform: jest.fn(),
        rect: jest.fn(),
        clip: jest.fn()
    }));
// Mock console methods for cleaner test output
const originalError = console.error;
const originalWarn = console.warn;
beforeAll(()=>{
    console.error = (...args)=>{
        if (typeof args[0] === 'string' && (args[0].includes('Warning: ReactDOM.render is no longer supported') || args[0].includes('Warning: React.createFactory() is deprecated') || args[0].includes('Warning: componentWillReceiveProps has been renamed'))) {
            return;
        }
        originalError.call(console, ...args);
    };
    console.warn = (...args)=>{
        if (typeof args[0] === 'string' && (args[0].includes('componentWillReceiveProps has been renamed') || args[0].includes('componentWillMount has been renamed'))) {
            return;
        }
        originalWarn.call(console, ...args);
    };
});
afterAll(()=>{
    console.error = originalError;
    console.warn = originalWarn;
});

//# sourceMappingURL=data:application/json;base64,