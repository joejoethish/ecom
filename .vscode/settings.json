{
    "typescript.autoClosingTags": false,
    "kiroAgent.trustedCommands": [
        "python *",
        "npm *",
        "next *",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from django.urls import reverse; print('‚úì Testing admin authentication URL routing:'); print('‚úì Admin login URL:', reverse('admin_login')); print('‚úì Admin logout URL:', reverse('admin_logout')); print('‚úì Admin refresh URL:', reverse('admin_refresh')); print('‚úì All admin authentication URLs are properly configured!')\"",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from apps.authentication.views import AdminLoginAPIView, AdminLogoutAPIView, AdminTokenRefreshAPIView; print('‚úì Admin API views imported successfully'); from django.urls import reverse; print('‚úì URL patterns check complete')\"",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from django.urls import reverse; print('‚úì Testing admin auth URLs:'); print('  - admin_login:', reverse('admin_login')); print('  - admin_logout:', reverse('admin_logout')); print('  - admin_refresh:', reverse('admin_refresh'))\"",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from django.urls import reverse; print('‚úì Testing email verification URLs:'); print('  - verify_email_api:', reverse('verify_email_api', kwargs={'token': 'test123'})); print('  - resend_verification_api:', reverse('resend_verification_api'))\"",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); print('üîç Authentication System Status Check'); print('=' * 50); from apps.authentication.services import AuthenticationService, EmailVerificationService; print('‚úì Core Services: OK'); admin_methods = ['authenticate_admin_user', 'logout_admin_user', 'refresh_admin_token']; print('‚úì Admin Methods:'); [print(f'  - {method}: ‚úì') for method in admin_methods if hasattr(AuthenticationService, method)]; from apps.authentication.views import AdminLoginAPIView, EmailVerificationAPIView; print('‚úì API Views: OK'); from django.urls import reverse; print('‚úì URL Routing: OK'); print('üéâ Authentication System: FULLY OPERATIONAL')\"",
        "python -c \"from apps.authentication.views import UserManagementView, UserDetailView, UserSelfManagementView; print('Views imported successfully')\"",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from apps.authentication.views import UserManagementView, UserDetailView, UserSelfManagementView; print('Views imported successfully')\"",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from apps.authentication.serializers import UserListSerializer, AdminUserCreateSerializer, AdminUserUpdateSerializer, UserSelfDeleteSerializer; print('Serializers imported successfully')\"",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from django.urls import reverse; print('user_management:', reverse('user_management')); print('user_detail:', reverse('user_detail', kwargs={'user_id': 1})); print('user_self_management:', reverse('user_self_management')); print('URL patterns working correctly')\"",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from django.urls import reverse; print('user_session_management:', reverse('user_session_management')); print('user_session_detail:', reverse('user_session_detail', kwargs={'session_id': 1})); print('Session URL patterns working correctly')\"",
        "python manage.py shell -c \"from django.contrib.auth import get_user_model; User = get_user_model(); print([f.name for f in User._meta.fields])\"",
        "python manage.py *",
        "python manage.py shell -c \"from django.db import connection; cursor = connection.cursor(); cursor.execute('DESCRIBE auth_user'); print([row for row in cursor.fetchall()])\"",
        "npx jest --clearCache",
        "npx tsc --noEmit --skipLibCheck src/components/auth/EmailVerificationPage.tsx src/components/auth/ResendVerificationForm.tsx src/components/auth/EmailVerificationStatus.tsx",
        "npx tsc --noEmit --skipLibCheck src/components/admin/auth/*.tsx src/contexts/AdminAuthContext.tsx src/services/adminAuthApi.ts",
        "python -c \"import ecommerce_project.settings.development; print('Settings import successful')\"",
        "python -c \"import py_compile; import os; [py_compile.compile(os.path.join(root, file)) for root, dirs, files in os.walk('apps') for file in files if file.endswith('.py')]\"",
        "git checkout HEAD -- apps/customers/tests/test_services.py",
        "git checkout HEAD -- apps/customers/tests/test_models.py",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from apps.authentication.middleware import AuthenticationRateLimitMiddleware; print('Middleware syntax is correct')\"",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from apps.authentication.security_monitor import security_monitor, security_event_logger, security_notification_service; print('Security monitoring system imported successfully')\"",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from apps.authentication.tests.test_security_middleware import *; print('Security middleware tests imported successfully')\"",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from apps.authentication.tests.test_authentication_services import *; from apps.authentication.tests.test_authentication_api import *; print('Authentication tests imported successfully')\"",
        "python manage.py dbshell -c \"DESCRIBE auth_user;\"",
        "move debugging apps/debugging",
        "python manage.py shell -c \"from apps.debugging.models import *; from apps.debugging.utils import *; print('Debugging system models imported successfully'); print('WorkflowSession count:', WorkflowSession.objects.count()); print('DebugConfiguration count:', DebugConfiguration.objects.count()); print('PerformanceThreshold count:', PerformanceThreshold.objects.count())\"",
        "python -c \"\nimport os\nimport sys\nimport django\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development')\ndjango.setup()\n\nfrom apps.debugging.api_validation import APIDiscoveryService, APIValidationService\nprint('‚úì API validation modules imported successfully')\n\n# Test basic functionality\ndiscovery = APIDiscoveryService()\nvalidation = APIValidationService()\nprint('‚úì Services initialized successfully')\n\n# Test URL pattern conversion\ntest_url = validation._prepare_test_url('/api/users/<int:user_id>/')\nprint(f'‚úì URL pattern conversion: {test_url}')\n\n# Test payload generation\nschema = {'name': {'type': 'string', 'required': True}}\npayload = validation._generate_test_payload(schema)\nprint(f'‚úì Payload generation: {payload}')\n\nprint('All basic functionality tests passed!')\n\"",
        "python manage.py shell -c \"from apps.debugging.services import WorkflowTracingEngine; from apps.debugging.database_monitor import DatabaseHealthMonitor; print('All imports successful')\"",
        "npx tsc --noEmit src/lib/workflow-tracing.ts",
        "python -c \"from apps.debugging.performance_demo import PerformanceDemo; print('‚úÖ Performance demo imported successfully')\"",
        "python -c \"import django; django.setup(); from apps.cart.serializers import CartSerializer; print('‚úÖ Cart serializers import successfully')\"",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from apps.cart.serializers import CartSerializer; print('‚úÖ Cart serializers import successfully')\"",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from apps.orders.serializers import OrderSerializer; print('‚úÖ Order serializers import successfully')\"",
        "Get-Content ecommerce_project/settings/base.py | Select-Object -Last 20",
        "Get-Content ecommerce_project/settings/base.py | Select-Object -Last 10",
        "python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_project.settings.development'); import django; django.setup(); from drf_spectacular.generators import SchemaGenerator; generator = SchemaGenerator(); schema = generator.get_schema(request=None, public=True)\"",
        "python manage.py show_urls | findstr debugging",
        "python -c \"from apps.debugging.dashboard_views import DashboardDataViewSet; print('Dashboard views imported successfully')\"",
        "python manage.py shell -c \"from apps.debugging.dashboard_views import DashboardDataViewSet; print('Dashboard views imported successfully')\"",
        "python manage.py shell -c \"from apps.debugging.consumers import DashboardConsumer; print('WebSocket consumers imported successfully')\"",
        "python -c \"from apps.debugging.error_notifications import notification_manager; print('Import successful')\"",
        "python -c \"from apps.debugging.utils import WorkflowTracer; print('WorkflowTracer imported successfully'); import uuid; session = WorkflowTracer.start_workflow('test', str(uuid.uuid4())); print(f'Session created: {session.id}')\"",
        "npx tsc --noEmit --project tsconfig.json",
        "npx tsc --noEmit src/config/debugging.ts"
    ]
}