# Generated by Django 4.2.23 on 2025-08-25 06:05

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tenant",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=100, unique=True)),
                (
                    "domain",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("subdomain", models.CharField(max_length=100, unique=True)),
                (
                    "logo",
                    models.ImageField(blank=True, null=True, upload_to="tenant_logos/"),
                ),
                ("primary_color", models.CharField(default="#007bff", max_length=7)),
                ("secondary_color", models.CharField(default="#6c757d", max_length=7)),
                (
                    "favicon",
                    models.ImageField(
                        blank=True, null=True, upload_to="tenant_favicons/"
                    ),
                ),
                (
                    "plan",
                    models.CharField(
                        choices=[
                            ("starter", "Starter"),
                            ("professional", "Professional"),
                            ("enterprise", "Enterprise"),
                            ("custom", "Custom"),
                        ],
                        default="starter",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("suspended", "Suspended"),
                            ("trial", "Trial"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="trial",
                        max_length=20,
                    ),
                ),
                ("trial_ends_at", models.DateTimeField(blank=True, null=True)),
                ("subscription_starts_at", models.DateTimeField(blank=True, null=True)),
                ("subscription_ends_at", models.DateTimeField(blank=True, null=True)),
                ("max_users", models.IntegerField(default=5)),
                ("max_products", models.IntegerField(default=100)),
                ("max_orders", models.IntegerField(default=1000)),
                ("max_storage_gb", models.IntegerField(default=1)),
                ("contact_name", models.CharField(max_length=200)),
                ("contact_email", models.EmailField(max_length=254)),
                (
                    "contact_phone",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                (
                    "address_line1",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "address_line2",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("city", models.CharField(blank=True, max_length=100, null=True)),
                ("state", models.CharField(blank=True, max_length=100, null=True)),
                ("postal_code", models.CharField(blank=True, max_length=20, null=True)),
                ("country", models.CharField(blank=True, max_length=100, null=True)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("currency", models.CharField(default="USD", max_length=3)),
                ("language", models.CharField(default="en", max_length=10)),
                ("features", models.JSONField(default=dict)),
                ("custom_settings", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "db_table": "tenants",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TenantUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("owner", "Owner"),
                            ("admin", "Administrator"),
                            ("manager", "Manager"),
                            ("staff", "Staff"),
                            ("viewer", "Viewer"),
                        ],
                        default="staff",
                        max_length=20,
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "avatar",
                    models.ImageField(blank=True, null=True, upload_to="user_avatars/"),
                ),
                ("department", models.CharField(blank=True, max_length=100, null=True)),
                ("job_title", models.CharField(blank=True, max_length=100, null=True)),
                ("permissions", models.JSONField(default=list)),
                ("last_login_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("failed_login_attempts", models.IntegerField(default=0)),
                ("account_locked_until", models.DateTimeField(blank=True, null=True)),
                ("preferences", models.JSONField(default=dict)),
                ("invited_at", models.DateTimeField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="tenant_users",
                        related_query_name="tenant_user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "invited_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="tenants.tenantuser",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users",
                        to="tenants.tenant",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="tenant_users",
                        related_query_name="tenant_user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "tenant_users",
                "unique_together": {("tenant", "username")},
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="TenantSubscription",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("plan_name", models.CharField(max_length=100)),
                (
                    "billing_cycle",
                    models.CharField(
                        choices=[
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("yearly", "Yearly"),
                        ],
                        max_length=20,
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="USD", max_length=3)),
                ("next_billing_date", models.DateTimeField()),
                ("last_billing_date", models.DateTimeField(blank=True, null=True)),
                (
                    "payment_method",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("paid", "Paid"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("refunded", "Refunded"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "stripe_subscription_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "stripe_customer_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tenant",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscription",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "tenant_subscriptions",
            },
        ),
        migrations.CreateModel(
            name="TenantBackup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "backup_type",
                    models.CharField(
                        choices=[
                            ("full", "Full Backup"),
                            ("incremental", "Incremental"),
                            ("differential", "Differential"),
                        ],
                        default="full",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("file_path", models.CharField(blank=True, max_length=500, null=True)),
                ("file_size", models.BigIntegerField(blank=True, null=True)),
                ("progress_percentage", models.IntegerField(default=0)),
                ("error_message", models.TextField(blank=True, null=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="backups",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "tenant_backups",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TenantAuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("export", "Export"),
                            ("import", "Import"),
                            ("backup", "Backup"),
                            ("restore", "Restore"),
                        ],
                        max_length=20,
                    ),
                ),
                ("model_name", models.CharField(max_length=100)),
                ("object_id", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "object_repr",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("changes", models.JSONField(default=dict)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_logs",
                        to="tenants.tenant",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="tenants.tenantuser",
                    ),
                ),
            ],
            options={
                "db_table": "tenant_audit_logs",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="TenantUsage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("users_count", models.IntegerField(default=0)),
                ("products_count", models.IntegerField(default=0)),
                ("orders_count", models.IntegerField(default=0)),
                (
                    "storage_used_gb",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("api_calls_count", models.IntegerField(default=0)),
                (
                    "avg_response_time",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "error_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "uptime_percentage",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("period_start", models.DateTimeField()),
                ("period_end", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usage_records",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "tenant_usage",
                "ordering": ["-period_start"],
                "unique_together": {("tenant", "period_start", "period_end")},
            },
        ),
        migrations.CreateModel(
            name="TenantInvitation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("owner", "Owner"),
                            ("admin", "Administrator"),
                            ("manager", "Manager"),
                            ("staff", "Staff"),
                            ("viewer", "Viewer"),
                        ],
                        max_length=20,
                    ),
                ),
                ("token", models.CharField(max_length=255, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("expires_at", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("accepted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "invited_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tenants.tenantuser",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invitations",
                        to="tenants.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "tenant_invitations",
                "unique_together": {("tenant", "email")},
            },
        ),
    ]
