# Generated migration for project management models

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProjectTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(max_length=100)),
                ('template_data', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'project_templates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('active', 'Active'), ('on_hold', 'On Hold'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planning', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('actual_start_date', models.DateField(blank=True, null=True)),
                ('actual_end_date', models.DateField(blank=True, null=True)),
                ('budget', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('actual_cost', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('progress_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('tags', models.JSONField(default=list)),
                ('custom_fields', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_projects', to=settings.AUTH_USER_MODEL)),
                ('project_manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managed_projects', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='project_management.projecttemplate')),
            ],
            options={
                'db_table': 'projects',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('blocked', 'Blocked'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='not_started', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('start_date', models.DateField()),
                ('due_date', models.DateField()),
                ('actual_start_date', models.DateField(blank=True, null=True)),
                ('actual_end_date', models.DateField(blank=True, null=True)),
                ('estimated_hours', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('actual_hours', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('progress_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('tags', models.JSONField(default=list)),
                ('custom_fields', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
                ('parent_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subtasks', to='project_management.task')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='project_management.project')),
                ('reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='review_tasks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tasks',
                'ordering': ['due_date', 'priority'],
            },
        ),
        migrations.CreateModel(
            name='ProjectMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('manager', 'Project Manager'), ('lead', 'Team Lead'), ('developer', 'Developer'), ('designer', 'Designer'), ('tester', 'Tester'), ('analyst', 'Business Analyst'), ('stakeholder', 'Stakeholder')], max_length=20)),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project_management.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'project_memberships',
                'unique_together': {('project', 'user')},
            },
        ),
        migrations.AddField(
            model_name='project',
            name='team_members',
            field=models.ManyToManyField(related_name='projects', through='project_management.ProjectMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='TaskDependency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dependency_type', models.CharField(choices=[('finish_to_start', 'Finish to Start'), ('start_to_start', 'Start to Start'), ('finish_to_finish', 'Finish to Finish'), ('start_to_finish', 'Start to Finish')], default='finish_to_start', max_length=20)),
                ('lag_days', models.IntegerField(default=0)),
                ('predecessor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='successor_dependencies', to='project_management.task')),
                ('successor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predecessor_dependencies', to='project_management.task')),
            ],
            options={
                'db_table': 'task_dependencies',
                'unique_together': {('predecessor', 'successor')},
            },
        ),
        migrations.AddField(
            model_name='task',
            name='dependencies',
            field=models.ManyToManyField(related_name='_project_management_task_dependencies_+', symmetrical=False, through='project_management.TaskDependency', to='project_management.task'),
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('due_date', models.DateField()),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='project_management.project')),
                ('tasks', models.ManyToManyField(blank=True, related_name='milestones', to='project_management.task')),
            ],
            options={
                'db_table': 'milestones',
                'ordering': ['due_date'],
            },
        ),
        migrations.CreateModel(
            name='ProjectRisk',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('risk_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('probability', models.IntegerField(help_text='Probability from 1-10', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('impact', models.IntegerField(help_text='Impact from 1-10', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('mitigation_plan', models.TextField()),
                ('contingency_plan', models.TextField()),
                ('status', models.CharField(choices=[('open', 'Open'), ('monitoring', 'Monitoring'), ('mitigated', 'Mitigated'), ('closed', 'Closed')], default='open', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_risks', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risks', to='project_management.project')),
            ],
            options={
                'db_table': 'project_risks',
                'ordering': ['-probability', '-impact'],
            },
        ),
        migrations.CreateModel(
            name='TimeEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('hours', models.DecimalField(decimal_places=2, max_digits=4)),
                ('description', models.TextField()),
                ('is_billable', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_entries', to='project_management.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'time_entries',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ProjectDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('file', models.FileField(upload_to='project_documents/')),
                ('file_size', models.BigIntegerField()),
                ('file_type', models.CharField(max_length=50)),
                ('version', models.CharField(default='1.0', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='project_management.project')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'project_documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='project_management.projectcomment')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='project_management.project')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='project_management.task')),
            ],
            options={
                'db_table': 'project_comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectNotification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('task_assigned', 'Task Assigned'), ('task_completed', 'Task Completed'), ('milestone_reached', 'Milestone Reached'), ('deadline_approaching', 'Deadline Approaching'), ('project_status_changed', 'Project Status Changed'), ('comment_added', 'Comment Added')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='project_management.project')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_notifications', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='project_management.task')),
            ],
            options={
                'db_table': 'project_notifications',
                'ordering': ['-created_at'],
            },
        ),
        # Additional models for enhanced project management
        migrations.CreateModel(
            name='ProjectStakeholder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254)),
                ('role', models.CharField(max_length=100)),
                ('organization', models.CharField(blank=True, max_length=200)),
                ('communication_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('as_needed', 'As Needed')], default='weekly', max_length=20)),
                ('preferred_method', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone'), ('meeting', 'Meeting'), ('slack', 'Slack'), ('teams', 'Microsoft Teams'), ('dashboard', 'Dashboard')], default='email', max_length=20)),
                ('influence_level', models.IntegerField(help_text='Influence level from 1-5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('interest_level', models.IntegerField(help_text='Interest level from 1-5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('last_communication', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stakeholders', to='project_management.project')),
            ],
            options={
                'db_table': 'project_stakeholders',
                'unique_together': {('project', 'email')},
            },
        ),
        migrations.CreateModel(
            name='ProjectChangeRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('justification', models.TextField()),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('implemented', 'Implemented'), ('cancelled', 'Cancelled')], default='submitted', max_length=20)),
                ('scope_impact', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('timeline_impact_days', models.IntegerField(default=0)),
                ('budget_impact', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('resource_impact', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('risk_impact', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('implementation_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('affected_milestones', models.ManyToManyField(blank=True, related_name='change_requests', to='project_management.milestone')),
                ('affected_tasks', models.ManyToManyField(blank=True, related_name='change_requests', to='project_management.task')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_changes', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='change_requests', to='project_management.project')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_changes', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_changes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'project_change_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectLessonsLearned',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('planning', 'Planning'), ('execution', 'Execution'), ('monitoring', 'Monitoring'), ('communication', 'Communication'), ('risk_management', 'Risk Management'), ('resource_management', 'Resource Management'), ('quality', 'Quality'), ('stakeholder_management', 'Stakeholder Management'), ('technology', 'Technology'), ('process', 'Process')], max_length=30)),
                ('lesson_title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('what_worked_well', models.TextField()),
                ('what_could_improve', models.TextField()),
                ('recommendations', models.TextField()),
                ('impact_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons_learned', to='project_management.project')),
            ],
            options={
                'db_table': 'project_lessons_learned',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectQualityMetrics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('overall_quality_score', models.FloatField(default=0.0)),
                ('on_time_delivery_rate', models.FloatField(default=0.0)),
                ('budget_adherence_rate', models.FloatField(default=0.0)),
                ('scope_change_rate', models.FloatField(default=0.0)),
                ('defect_rate', models.FloatField(default=0.0)),
                ('customer_satisfaction_score', models.FloatField(default=0.0)),
                ('team_satisfaction_score', models.FloatField(default=0.0)),
                ('total_deliverables', models.IntegerField(default=0)),
                ('delivered_on_time', models.IntegerField(default=0)),
                ('total_defects', models.IntegerField(default=0)),
                ('resolved_defects', models.IntegerField(default=0)),
                ('scope_changes', models.IntegerField(default=0)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quality_metrics', to='project_management.project')),
            ],
            options={
                'db_table': 'project_quality_metrics',
            },
        ),
        migrations.CreateModel(
            name='ProjectCapacityPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('period_type', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly')], default='weekly', max_length=20)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('total_capacity_hours', models.FloatField(default=0.0)),
                ('allocated_hours', models.FloatField(default=0.0)),
                ('available_hours', models.FloatField(default=0.0)),
                ('utilization_rate', models.FloatField(default=0.0)),
                ('required_developers', models.IntegerField(default=0)),
                ('required_designers', models.IntegerField(default=0)),
                ('required_testers', models.IntegerField(default=0)),
                ('required_analysts', models.IntegerField(default=0)),
                ('resource_gaps', models.JSONField(default=list)),
                ('recommendations', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='capacity_plans', to='project_management.project')),
            ],
            options={
                'db_table': 'project_capacity_plans',
                'ordering': ['period_start'],
                'unique_together': {('project', 'period_start', 'period_end')},
            },
        ),
        migrations.CreateModel(
            name='ProjectIntegration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('integration_type', models.CharField(choices=[('jira', 'Jira'), ('github', 'GitHub'), ('gitlab', 'GitLab'), ('slack', 'Slack'), ('teams', 'Microsoft Teams'), ('confluence', 'Confluence'), ('trello', 'Trello'), ('asana', 'Asana'), ('monday', 'Monday.com'), ('notion', 'Notion')], max_length=20)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('config_data', models.JSONField(default=dict)),
                ('api_endpoint', models.URLField(blank=True)),
                ('webhook_url', models.URLField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('error', 'Error'), ('pending', 'Pending Setup')], default='pending', max_length=20)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_frequency_minutes', models.IntegerField(default=60)),
                ('error_message', models.TextField(blank=True)),
                ('total_syncs', models.IntegerField(default=0)),
                ('successful_syncs', models.IntegerField(default=0)),
                ('failed_syncs', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='integrations', to='project_management.project')),
            ],
            options={
                'db_table': 'project_integrations',
                'unique_together': {('project', 'integration_type', 'name')},
            },
        ),
    ]