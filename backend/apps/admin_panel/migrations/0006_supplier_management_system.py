# Generated by Django 4.2.23 on 2025-08-06 10:20

import datetime
from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('customers', '0001_initial'),
        ('orders', '__first__'),
        ('products', '0002_productrating'),
        ('admin_panel', '0005_merge_20250806_1431'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerAccountHealthScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('overall_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('health_level', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('critical', 'Critical')], default='fair', max_length=20)),
                ('engagement_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('satisfaction_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('loyalty_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('payment_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('support_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('churn_risk', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('fraud_risk', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('payment_risk', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('score_trend', models.CharField(choices=[('improving', 'Improving'), ('stable', 'Stable'), ('declining', 'Declining')], default='stable', max_length=20)),
                ('recommendations', models.JSONField(blank=True, default=list)),
                ('action_items', models.JSONField(blank=True, default=list)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
                ('calculation_version', models.CharField(default='1.0', max_length=10)),
            ],
            options={
                'verbose_name': 'Customer Account Health Score',
                'verbose_name_plural': 'Customer Account Health Scores',
                'db_table': 'customer_account_health_scores',
            },
        ),
        migrations.CreateModel(
            name='CustomerAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lifetime_value', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('predicted_lifetime_value', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('average_order_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_orders', models.IntegerField(default=0)),
                ('total_items_purchased', models.IntegerField(default=0)),
                ('favorite_category', models.CharField(blank=True, max_length=100)),
                ('favorite_brand', models.CharField(blank=True, max_length=100)),
                ('purchase_frequency', models.FloatField(default=0.0, help_text='Orders per month')),
                ('days_since_last_order', models.IntegerField(default=0)),
                ('average_days_between_orders', models.FloatField(default=0.0)),
                ('website_visits', models.IntegerField(default=0)),
                ('page_views', models.IntegerField(default=0)),
                ('time_on_site', models.IntegerField(default=0, help_text='Total time in minutes')),
                ('email_open_rate', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('email_click_rate', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('engagement_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('loyalty_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('satisfaction_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('churn_risk_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('fraud_risk_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('credit_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(850)])),
                ('preferred_communication_channel', models.CharField(blank=True, max_length=50)),
                ('preferred_shopping_time', models.CharField(blank=True, max_length=50)),
                ('price_sensitivity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Customer Analytics',
                'verbose_name_plural': 'Customer Analytics',
                'db_table': 'customer_analytics',
            },
        ),
        migrations.CreateModel(
            name='CustomerChurnPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('churn_probability', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('churn_risk_level', models.CharField(choices=[('very_low', 'Very Low'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], max_length=20)),
                ('model_used', models.CharField(choices=[('logistic_regression', 'Logistic Regression'), ('random_forest', 'Random Forest'), ('gradient_boosting', 'Gradient Boosting'), ('neural_network', 'Neural Network'), ('ensemble', 'Ensemble Model')], max_length=30)),
                ('model_version', models.CharField(max_length=20)),
                ('prediction_confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('top_churn_factors', models.JSONField(blank=True, default=list)),
                ('feature_scores', models.JSONField(blank=True, default=dict)),
                ('predicted_churn_date', models.DateField(blank=True, null=True)),
                ('days_to_churn', models.IntegerField(blank=True, null=True)),
                ('recommended_actions', models.JSONField(blank=True, default=list)),
                ('intervention_priority', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('prediction_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('actual_churned', models.BooleanField(blank=True, null=True)),
                ('actual_churn_date', models.DateField(blank=True, null=True)),
                ('prediction_accuracy', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Customer Churn Prediction',
                'verbose_name_plural': 'Customer Churn Predictions',
                'db_table': 'customer_churn_predictions',
            },
        ),
        migrations.CreateModel(
            name='CustomerCommunicationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('communication_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('phone_call', 'Phone Call'), ('chat', 'Live Chat'), ('push_notification', 'Push Notification'), ('in_app_message', 'In-App Message'), ('postal_mail', 'Postal Mail'), ('social_media', 'Social Media')], max_length=20)),
                ('direction', models.CharField(choices=[('inbound', 'Inbound'), ('outbound', 'Outbound')], max_length=10)),
                ('subject', models.CharField(blank=True, max_length=500)),
                ('content', models.TextField()),
                ('status', models.CharField(choices=[('sent', 'Sent'), ('delivered', 'Delivered'), ('opened', 'Opened'), ('clicked', 'Clicked'), ('replied', 'Replied'), ('bounced', 'Bounced'), ('failed', 'Failed'), ('unsubscribed', 'Unsubscribed')], default='sent', max_length=20)),
                ('campaign_id', models.CharField(blank=True, max_length=100)),
                ('template_id', models.CharField(blank=True, max_length=100)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('opened_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('replied_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': 'Customer Communication History',
                'verbose_name_plural': 'Customer Communication History',
                'db_table': 'customer_communication_history',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerComplaintManagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('complaint_number', models.CharField(max_length=50, unique=True)),
                ('complaint_type', models.CharField(choices=[('product_quality', 'Product Quality'), ('service_quality', 'Service Quality'), ('delivery_issue', 'Delivery Issue'), ('billing_issue', 'Billing Issue'), ('website_issue', 'Website Issue'), ('staff_behavior', 'Staff Behavior'), ('policy_issue', 'Policy Issue'), ('other', 'Other')], max_length=30)),
                ('subject', models.CharField(max_length=500)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('received', 'Received'), ('investigating', 'Investigating'), ('resolved', 'Resolved'), ('closed', 'Closed'), ('escalated', 'Escalated')], default='received', max_length=20)),
                ('department', models.CharField(blank=True, max_length=50)),
                ('resolution_description', models.TextField(blank=True)),
                ('compensation_offered', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('compensation_type', models.CharField(blank=True, max_length=50)),
                ('received_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('sla_due_date', models.DateTimeField(blank=True, null=True)),
                ('sla_breached', models.BooleanField(default=False)),
                ('resolution_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('resolution_feedback', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Customer Complaint',
                'verbose_name_plural': 'Customer Complaints',
                'db_table': 'customer_complaint_management',
                'ordering': ['-received_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerGDPRCompliance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('marketing_consent', models.BooleanField(default=False)),
                ('marketing_consent_date', models.DateTimeField(blank=True, null=True)),
                ('analytics_consent', models.BooleanField(default=False)),
                ('analytics_consent_date', models.DateTimeField(blank=True, null=True)),
                ('data_processing_consent', models.BooleanField(default=True)),
                ('data_processing_consent_date', models.DateTimeField(auto_now_add=True)),
                ('deletion_requested', models.BooleanField(default=False)),
                ('deletion_request_date', models.DateTimeField(blank=True, null=True)),
                ('deletion_processed', models.BooleanField(default=False)),
                ('deletion_processed_date', models.DateTimeField(blank=True, null=True)),
                ('data_export_requested', models.BooleanField(default=False)),
                ('data_export_request_date', models.DateTimeField(blank=True, null=True)),
                ('data_export_completed', models.BooleanField(default=False)),
                ('data_export_completed_date', models.DateTimeField(blank=True, null=True)),
                ('data_export_file_path', models.CharField(blank=True, max_length=500)),
                ('last_consent_update', models.DateTimeField(auto_now=True)),
                ('consent_version', models.CharField(default='1.0', max_length=20)),
            ],
            options={
                'verbose_name': 'Customer GDPR Compliance',
                'verbose_name_plural': 'Customer GDPR Compliance',
                'db_table': 'customer_gdpr_compliance',
            },
        ),
        migrations.CreateModel(
            name='CustomerJourneyMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('touchpoint', models.CharField(choices=[('website_visit', 'Website Visit'), ('product_view', 'Product View'), ('category_browse', 'Category Browse'), ('search', 'Search'), ('cart_add', 'Add to Cart'), ('cart_abandon', 'Cart Abandonment'), ('checkout_start', 'Checkout Started'), ('order_placed', 'Order Placed'), ('email_open', 'Email Opened'), ('email_click', 'Email Clicked'), ('support_contact', 'Support Contact'), ('review_left', 'Review Left'), ('social_media', 'Social Media Interaction')], max_length=30)),
                ('page_url', models.URLField(blank=True)),
                ('referrer', models.URLField(blank=True)),
                ('campaign_source', models.CharField(blank=True, max_length=100)),
                ('campaign_medium', models.CharField(blank=True, max_length=100)),
                ('campaign_name', models.CharField(blank=True, max_length=100)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('device_type', models.CharField(blank=True, max_length=50)),
                ('browser', models.CharField(blank=True, max_length=100)),
                ('time_spent', models.IntegerField(default=0, help_text='Time spent in seconds')),
                ('interaction_count', models.IntegerField(default=1)),
                ('led_to_conversion', models.BooleanField(default=False)),
                ('conversion_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('metadata', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': 'Customer Journey Touchpoint',
                'verbose_name_plural': 'Customer Journey Touchpoints',
                'db_table': 'customer_journey_mapping',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerLifecycleHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('from_stage', models.CharField(choices=[('prospect', 'Prospect'), ('new_customer', 'New Customer'), ('active', 'Active Customer'), ('at_risk', 'At Risk'), ('inactive', 'Inactive'), ('churned', 'Churned'), ('win_back', 'Win Back'), ('loyal', 'Loyal Customer'), ('champion', 'Champion')], max_length=20)),
                ('to_stage', models.CharField(choices=[('prospect', 'Prospect'), ('new_customer', 'New Customer'), ('active', 'Active Customer'), ('at_risk', 'At Risk'), ('inactive', 'Inactive'), ('churned', 'Churned'), ('win_back', 'Win Back'), ('loyal', 'Loyal Customer'), ('champion', 'Champion')], max_length=20)),
                ('reason', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Customer Lifecycle History',
                'verbose_name_plural': 'Customer Lifecycle History',
                'db_table': 'customer_lifecycle_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerLifecycleStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_stage', models.CharField(choices=[('prospect', 'Prospect'), ('new_customer', 'New Customer'), ('active', 'Active Customer'), ('at_risk', 'At Risk'), ('inactive', 'Inactive'), ('churned', 'Churned'), ('win_back', 'Win Back'), ('loyal', 'Loyal Customer'), ('champion', 'Champion')], default='prospect', max_length=20)),
                ('previous_stage', models.CharField(blank=True, choices=[('prospect', 'Prospect'), ('new_customer', 'New Customer'), ('active', 'Active Customer'), ('at_risk', 'At Risk'), ('inactive', 'Inactive'), ('churned', 'Churned'), ('win_back', 'Win Back'), ('loyal', 'Loyal Customer'), ('champion', 'Champion')], max_length=20)),
                ('stage_entry_date', models.DateTimeField(auto_now_add=True)),
                ('days_in_current_stage', models.IntegerField(default=0)),
                ('total_stage_changes', models.IntegerField(default=0)),
                ('churn_probability', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('engagement_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('loyalty_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('auto_calculated', models.BooleanField(default=True)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Customer Lifecycle Stage',
                'verbose_name_plural': 'Customer Lifecycle Stages',
                'db_table': 'customer_lifecycle_stages',
            },
        ),
        migrations.CreateModel(
            name='CustomerLoyaltyProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_points', models.IntegerField(default=0)),
                ('lifetime_points', models.IntegerField(default=0)),
                ('current_tier', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum'), ('diamond', 'Diamond')], default='bronze', max_length=20)),
                ('points_to_next_tier', models.IntegerField(default=0)),
                ('tier_expiry_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('enrolled_date', models.DateField(auto_now_add=True)),
                ('total_rewards_earned', models.IntegerField(default=0)),
                ('total_rewards_redeemed', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Customer Loyalty Program',
                'verbose_name_plural': 'Customer Loyalty Programs',
                'db_table': 'customer_loyalty_programs',
            },
        ),
        migrations.CreateModel(
            name='CustomerLoyaltyTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transaction_type', models.CharField(choices=[('earned', 'Points Earned'), ('redeemed', 'Points Redeemed'), ('expired', 'Points Expired'), ('adjusted', 'Points Adjusted')], max_length=20)),
                ('points', models.IntegerField()),
                ('reason', models.CharField(blank=True, max_length=500)),
            ],
            options={
                'verbose_name': 'Customer Loyalty Transaction',
                'verbose_name_plural': 'Customer Loyalty Transactions',
                'db_table': 'customer_loyalty_transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerPaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment_type', models.CharField(choices=[('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('bank_account', 'Bank Account'), ('digital_wallet', 'Digital Wallet'), ('upi', 'UPI'), ('net_banking', 'Net Banking')], max_length=20)),
                ('token', models.CharField(help_text='Tokenized payment method identifier', max_length=255)),
                ('last_four_digits', models.CharField(blank=True, max_length=4)),
                ('expiry_month', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('expiry_year', models.IntegerField(blank=True, null=True)),
                ('brand', models.CharField(blank=True, help_text='Visa, MasterCard, etc.', max_length=50)),
                ('bank_name', models.CharField(blank=True, max_length=100)),
                ('account_holder_name', models.CharField(blank=True, max_length=200)),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('usage_count', models.IntegerField(default=0)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('added_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('verification_attempts', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Customer Payment Method',
                'verbose_name_plural': 'Customer Payment Methods',
                'db_table': 'customer_payment_methods',
            },
        ),
        migrations.CreateModel(
            name='CustomerPreferenceCenter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email_marketing', models.BooleanField(default=True)),
                ('email_transactional', models.BooleanField(default=True)),
                ('email_newsletters', models.BooleanField(default=True)),
                ('email_promotions', models.BooleanField(default=True)),
                ('email_product_updates', models.BooleanField(default=True)),
                ('sms_marketing', models.BooleanField(default=False)),
                ('sms_transactional', models.BooleanField(default=True)),
                ('sms_promotions', models.BooleanField(default=False)),
                ('sms_order_updates', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('push_promotions', models.BooleanField(default=True)),
                ('push_order_updates', models.BooleanField(default=True)),
                ('push_abandoned_cart', models.BooleanField(default=True)),
                ('email_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('never', 'Never')], default='weekly', max_length=20)),
                ('preferred_categories', models.JSONField(blank=True, default=list)),
                ('preferred_brands', models.JSONField(blank=True, default=list)),
                ('price_range_min', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('price_range_max', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('data_sharing_analytics', models.BooleanField(default=True)),
                ('data_sharing_marketing', models.BooleanField(default=True)),
                ('data_sharing_third_party', models.BooleanField(default=False)),
                ('personalized_recommendations', models.BooleanField(default=True)),
                ('personalized_pricing', models.BooleanField(default=True)),
                ('personalized_content', models.BooleanField(default=True)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('preferred_currency', models.CharField(default='USD', max_length=3)),
                ('preferred_timezone', models.CharField(default='UTC', max_length=50)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('updated_by_customer', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Customer Preference Center',
                'verbose_name_plural': 'Customer Preference Centers',
                'db_table': 'customer_preference_centers',
            },
        ),
        migrations.CreateModel(
            name='CustomerReferralProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('referral_code', models.CharField(max_length=50, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('rewarded', 'Rewarded'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('referrer_reward', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('referred_reward', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('referred_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('rewarded_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Customer Referral',
                'verbose_name_plural': 'Customer Referrals',
                'db_table': 'customer_referral_programs',
                'ordering': ['-referred_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerRiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('overall_risk_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('fraud_risk_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('credit_risk_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('overall_risk_level', models.CharField(choices=[('very_low', 'Very Low'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], default='low', max_length=20)),
                ('fraud_risk_level', models.CharField(choices=[('very_low', 'Very Low'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], default='low', max_length=20)),
                ('credit_risk_level', models.CharField(choices=[('very_low', 'Very Low'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], default='low', max_length=20)),
                ('risk_factors', models.JSONField(blank=True, default=list)),
                ('suspicious_activities', models.JSONField(blank=True, default=list)),
                ('failed_payment_attempts', models.IntegerField(default=0)),
                ('chargebacks', models.IntegerField(default=0)),
                ('account_takeover_risk', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('identity_verification_status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('failed', 'Failed'), ('manual_review', 'Manual Review Required')], default='pending', max_length=20)),
                ('last_assessed', models.DateTimeField(auto_now=True)),
                ('assessed_by', models.CharField(default='system', max_length=50)),
                ('restrictions_applied', models.JSONField(blank=True, default=list)),
                ('manual_review_required', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Customer Risk Assessment',
                'verbose_name_plural': 'Customer Risk Assessments',
                'db_table': 'customer_risk_assessments',
            },
        ),
        migrations.CreateModel(
            name='CustomerSatisfactionSurvey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('survey_type', models.CharField(choices=[('nps', 'Net Promoter Score'), ('csat', 'Customer Satisfaction'), ('ces', 'Customer Effort Score'), ('custom', 'Custom Survey')], max_length=20)),
                ('survey_name', models.CharField(max_length=200)),
                ('questions', models.JSONField(default=list)),
                ('responses', models.JSONField(default=dict)),
                ('nps_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('csat_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('ces_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Customer Satisfaction Survey',
                'verbose_name_plural': 'Customer Satisfaction Surveys',
                'db_table': 'customer_satisfaction_surveys',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerSegment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('segment_type', models.CharField(choices=[('demographic', 'Demographic'), ('behavioral', 'Behavioral'), ('geographic', 'Geographic'), ('psychographic', 'Psychographic'), ('transactional', 'Transactional'), ('lifecycle', 'Lifecycle'), ('value_based', 'Value Based'), ('custom', 'Custom')], max_length=20)),
                ('criteria', models.JSONField(default=dict, help_text='Segmentation rules and conditions')),
                ('is_active', models.BooleanField(default=True)),
                ('is_dynamic', models.BooleanField(default=True, help_text='Auto-update membership based on criteria')),
                ('priority', models.IntegerField(default=0, help_text='Higher priority segments take precedence')),
                ('customer_count', models.IntegerField(default=0)),
                ('last_calculated', models.DateTimeField(blank=True, null=True)),
                ('tags', models.JSONField(blank=True, default=list)),
            ],
            options={
                'verbose_name': 'Customer Segment',
                'verbose_name_plural': 'Customer Segments',
                'db_table': 'customer_segments',
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CustomerSegmentMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('confidence_score', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('auto_assigned', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Customer Segment Membership',
                'verbose_name_plural': 'Customer Segment Memberships',
                'db_table': 'customer_segment_memberships',
            },
        ),
        migrations.CreateModel(
            name='CustomerServiceLevelAgreement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sla_type', models.CharField(choices=[('support_response', 'Support Response Time'), ('issue_resolution', 'Issue Resolution Time'), ('order_processing', 'Order Processing Time'), ('delivery_time', 'Delivery Time'), ('refund_processing', 'Refund Processing Time')], max_length=30)),
                ('target_time_hours', models.IntegerField(help_text='Target time in hours')),
                ('warning_threshold_hours', models.IntegerField(help_text='Warning threshold in hours')),
                ('start_time', models.DateTimeField()),
                ('target_time', models.DateTimeField()),
                ('warning_time', models.DateTimeField()),
                ('completion_time', models.DateTimeField(blank=True, null=True)),
                ('is_met', models.BooleanField(blank=True, null=True)),
                ('is_breached', models.BooleanField(default=False)),
                ('breach_reason', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Customer SLA Tracking',
                'verbose_name_plural': 'Customer SLA Tracking',
                'db_table': 'customer_service_level_agreements',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='CustomerSocialMediaIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('platform', models.CharField(choices=[('facebook', 'Facebook'), ('twitter', 'Twitter'), ('instagram', 'Instagram'), ('linkedin', 'LinkedIn'), ('youtube', 'YouTube'), ('tiktok', 'TikTok'), ('pinterest', 'Pinterest')], max_length=20)),
                ('username', models.CharField(max_length=100)),
                ('profile_url', models.URLField()),
                ('profile_id', models.CharField(blank=True, max_length=100)),
                ('followers_count', models.IntegerField(default=0)),
                ('following_count', models.IntegerField(default=0)),
                ('posts_count', models.IntegerField(default=0)),
                ('engagement_rate', models.FloatField(default=0.0)),
                ('sentiment_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(-1.0), django.core.validators.MaxValueValidator(1.0)])),
                ('brand_mentions', models.IntegerField(default=0)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Customer Social Media Account',
                'verbose_name_plural': 'Customer Social Media Accounts',
                'db_table': 'customer_social_media_integrations',
            },
        ),
        migrations.CreateModel(
            name='CustomerSupportTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ticket_number', models.CharField(max_length=50, unique=True)),
                ('subject', models.CharField(max_length=500)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('general_inquiry', 'General Inquiry'), ('order_issue', 'Order Issue'), ('product_issue', 'Product Issue'), ('payment_issue', 'Payment Issue'), ('shipping_issue', 'Shipping Issue'), ('return_refund', 'Return/Refund'), ('account_issue', 'Account Issue'), ('technical_issue', 'Technical Issue'), ('complaint', 'Complaint'), ('suggestion', 'Suggestion')], max_length=30)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent'), ('critical', 'Critical')], default='normal', max_length=10)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('pending_customer', 'Pending Customer Response'), ('pending_internal', 'Pending Internal Review'), ('resolved', 'Resolved'), ('closed', 'Closed'), ('reopened', 'Reopened')], default='open', max_length=20)),
                ('department', models.CharField(blank=True, max_length=50)),
                ('first_response_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('sla_due_date', models.DateTimeField(blank=True, null=True)),
                ('sla_breached', models.BooleanField(default=False)),
                ('satisfaction_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('satisfaction_feedback', models.TextField(blank=True)),
                ('source', models.CharField(default='web', help_text='Source of the ticket (web, email, phone, etc.)', max_length=50)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('metadata', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': 'Customer Support Ticket',
                'verbose_name_plural': 'Customer Support Tickets',
                'db_table': 'customer_support_tickets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerSupportTicketResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('message', models.TextField()),
                ('is_internal', models.BooleanField(default=False, help_text='Internal note not visible to customer')),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('is_read_by_customer', models.BooleanField(default=False)),
                ('read_by_customer_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Support Ticket Response',
                'verbose_name_plural': 'Support Ticket Responses',
                'db_table': 'customer_support_ticket_responses',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerWinBackCampaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('trigger_type', models.CharField(choices=[('churn_risk', 'Churn Risk'), ('inactive_period', 'Inactive Period'), ('abandoned_cart', 'Abandoned Cart'), ('low_engagement', 'Low Engagement'), ('manual', 'Manual')], max_length=20)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('scheduled_date', models.DateTimeField()),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('discount_percentage', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('free_shipping', models.BooleanField(default=False)),
                ('emails_sent', models.IntegerField(default=0)),
                ('emails_opened', models.IntegerField(default=0)),
                ('emails_clicked', models.IntegerField(default=0)),
                ('orders_generated', models.IntegerField(default=0)),
                ('revenue_generated', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('is_successful', models.BooleanField(default=False)),
                ('success_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Customer Win-Back Campaign',
                'verbose_name_plural': 'Customer Win-Back Campaigns',
                'db_table': 'customer_winback_campaigns',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('total_sales', models.IntegerField(default=0)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('total_profit', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('view_count', models.IntegerField(default=0)),
                ('conversion_rate', models.DecimalField(decimal_places=4, default=0, max_digits=5)),
                ('bounce_rate', models.DecimalField(decimal_places=4, default=0, max_digits=5)),
                ('sales_last_30_days', models.IntegerField(default=0)),
                ('revenue_last_30_days', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('views_last_30_days', models.IntegerField(default=0)),
                ('popularity_score', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('category_rank', models.IntegerField(blank=True, null=True)),
                ('overall_rank', models.IntegerField(blank=True, null=True)),
                ('demand_forecast', models.JSONField(default=dict)),
                ('seasonal_trends', models.JSONField(default=dict)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'product_analytics',
            },
        ),
        migrations.CreateModel(
            name='ProductAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('attribute_type', models.CharField(choices=[('text', 'Text'), ('number', 'Number'), ('color', 'Color'), ('size', 'Size'), ('boolean', 'Boolean'), ('select', 'Select')], default='text', max_length=20)),
                ('is_required', models.BooleanField(default=False)),
                ('is_variant_attribute', models.BooleanField(default=True)),
                ('sort_order', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'product_attributes',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProductAttributeValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('value', models.CharField(max_length=200)),
                ('display_value', models.CharField(max_length=200)),
                ('color_code', models.CharField(blank=True, help_text='Hex color code for color attributes', max_length=7)),
                ('sort_order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'product_attribute_values',
                'ordering': ['sort_order', 'value'],
            },
        ),
        migrations.CreateModel(
            name='ProductBundle',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('bundle_type', models.CharField(choices=[('fixed', 'Fixed Bundle'), ('dynamic', 'Dynamic Bundle'), ('kit', 'Product Kit')], default='fixed', max_length=20)),
                ('pricing_type', models.CharField(choices=[('fixed', 'Fixed Price'), ('sum', 'Sum of Products'), ('discount', 'Discount from Sum')], default='sum', max_length=20)),
                ('fixed_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'product_bundles',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductBundleItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('is_optional', models.BooleanField(default=False)),
                ('sort_order', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'product_bundle_items',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ProductDigitalAsset',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('asset_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('document', 'Document'), ('3d_model', '3D Model'), ('audio', 'Audio'), ('manual', 'Manual'), ('specification', 'Specification'), ('certificate', 'Certificate')], max_length=20)),
                ('file', models.FileField(upload_to='product_assets/')),
                ('file_size', models.BigIntegerField(blank=True, null=True)),
                ('mime_type', models.CharField(blank=True, max_length=100)),
                ('metadata', models.JSONField(default=dict)),
                ('tags', models.JSONField(default=list)),
                ('is_public', models.BooleanField(default=True)),
                ('requires_authentication', models.BooleanField(default=False)),
                ('sort_order', models.IntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'product_digital_assets',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProductLifecycle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_stage', models.CharField(choices=[('concept', 'Concept'), ('development', 'Development'), ('draft', 'Draft'), ('review', 'Under Review'), ('active', 'Active'), ('featured', 'Featured'), ('sale', 'On Sale'), ('discontinued', 'Discontinued'), ('archived', 'Archived'), ('recalled', 'Recalled')], default='draft', max_length=20)),
                ('previous_stage', models.CharField(blank=True, choices=[('concept', 'Concept'), ('development', 'Development'), ('draft', 'Draft'), ('review', 'Under Review'), ('active', 'Active'), ('featured', 'Featured'), ('sale', 'On Sale'), ('discontinued', 'Discontinued'), ('archived', 'Archived'), ('recalled', 'Recalled')], max_length=20)),
                ('concept_date', models.DateTimeField(blank=True, null=True)),
                ('development_date', models.DateTimeField(blank=True, null=True)),
                ('draft_date', models.DateTimeField(blank=True, null=True)),
                ('review_date', models.DateTimeField(blank=True, null=True)),
                ('active_date', models.DateTimeField(blank=True, null=True)),
                ('discontinued_date', models.DateTimeField(blank=True, null=True)),
                ('archived_date', models.DateTimeField(blank=True, null=True)),
                ('stage_notes', models.JSONField(blank=True, default=dict)),
                ('automated_transitions', models.BooleanField(default=False)),
                ('requires_approval', models.BooleanField(default=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('approval_notes', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'product_lifecycles',
            },
        ),
        migrations.CreateModel(
            name='ProductQuality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quality_status', models.CharField(choices=[('passed', 'Quality Passed'), ('failed', 'Quality Failed'), ('pending', 'Quality Pending'), ('recalled', 'Recalled'), ('quarantined', 'Quarantined')], default='pending', max_length=20)),
                ('quality_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('defect_rate', models.DecimalField(decimal_places=4, default=0, max_digits=5)),
                ('return_rate', models.DecimalField(decimal_places=4, default=0, max_digits=5)),
                ('last_quality_check', models.DateTimeField(blank=True, null=True)),
                ('next_quality_check', models.DateTimeField(blank=True, null=True)),
                ('quality_check_frequency', models.IntegerField(default=30, help_text='Days between quality checks')),
                ('certifications', models.JSONField(default=list)),
                ('compliance_status', models.JSONField(default=dict)),
                ('is_recalled', models.BooleanField(default=False)),
                ('recall_date', models.DateTimeField(blank=True, null=True)),
                ('recall_reason', models.TextField(blank=True)),
                ('recall_severity', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
            ],
            options={
                'db_table': 'product_quality',
            },
        ),
        migrations.CreateModel(
            name='ProductRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('relationship_type', models.CharField(choices=[('related', 'Related Products'), ('cross_sell', 'Cross-sell'), ('up_sell', 'Up-sell'), ('alternative', 'Alternative'), ('accessory', 'Accessory'), ('replacement', 'Replacement')], max_length=20)),
                ('priority', models.IntegerField(default=0, help_text='Higher priority items appear first')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'product_relationships',
                'ordering': ['-priority', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductSyndication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel_name', models.CharField(max_length=100)),
                ('channel_type', models.CharField(choices=[('marketplace', 'Marketplace'), ('social', 'Social Media'), ('affiliate', 'Affiliate Network'), ('comparison', 'Price Comparison'), ('feed', 'Product Feed'), ('api', 'API Integration')], max_length=20)),
                ('channel_url', models.URLField(blank=True)),
                ('sync_enabled', models.BooleanField(default=True)),
                ('sync_frequency', models.CharField(choices=[('realtime', 'Real-time'), ('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('manual', 'Manual')], default='daily', max_length=20)),
                ('field_mapping', models.JSONField(default=dict)),
                ('transformation_rules', models.JSONField(default=dict)),
                ('sync_status', models.CharField(choices=[('pending', 'Pending'), ('syncing', 'Syncing'), ('synced', 'Synced'), ('error', 'Error'), ('disabled', 'Disabled')], default='pending', max_length=20)),
                ('last_sync_date', models.DateTimeField(blank=True, null=True)),
                ('next_sync_date', models.DateTimeField(blank=True, null=True)),
                ('sync_error_message', models.TextField(blank=True)),
                ('external_id', models.CharField(blank=True, max_length=200)),
                ('external_url', models.URLField(blank=True)),
            ],
            options={
                'db_table': 'product_syndications',
            },
        ),
        migrations.CreateModel(
            name='ProductTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('template_data', models.JSONField(help_text='Default product data structure')),
                ('required_attributes', models.JSONField(default=list)),
                ('optional_attributes', models.JSONField(default=list)),
                ('auto_generate_sku', models.BooleanField(default=True)),
                ('sku_pattern', models.CharField(blank=True, max_length=100)),
                ('default_pricing_rules', models.JSONField(default=dict)),
                ('usage_count', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'product_templates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('sku', models.CharField(max_length=100, unique=True)),
                ('barcode', models.CharField(blank=True, max_length=100)),
                ('attributes', models.JSONField(default=dict, help_text='Variant attributes like size, color, etc.')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('cost_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('dimensions', models.JSONField(blank=True, default=dict)),
                ('stock_quantity', models.IntegerField(default=0)),
                ('reserved_quantity', models.IntegerField(default=0)),
                ('reorder_level', models.IntegerField(default=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('sort_order', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'product_variants',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProductVersion',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('version_number', models.CharField(max_length=20)),
                ('product_data', models.JSONField()),
                ('variant_data', models.JSONField(default=list)),
                ('image_data', models.JSONField(default=list)),
                ('change_summary', models.TextField()),
                ('change_details', models.JSONField(default=dict)),
                ('is_current', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'product_versions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductWarranty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('warranty_period_months', models.IntegerField(default=12)),
                ('warranty_type', models.CharField(choices=[('manufacturer', 'Manufacturer Warranty'), ('extended', 'Extended Warranty'), ('service', 'Service Warranty'), ('replacement', 'Replacement Warranty')], default='manufacturer', max_length=20)),
                ('coverage_details', models.JSONField(default=dict)),
                ('exclusions', models.JSONField(default=list)),
                ('service_provider', models.CharField(blank=True, max_length=200)),
                ('service_contact', models.JSONField(default=dict)),
                ('terms_and_conditions', models.TextField(blank=True)),
                ('warranty_document', models.FileField(blank=True, upload_to='warranties/')),
            ],
            options={
                'db_table': 'product_warranties',
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('po_number', models.CharField(max_length=50, unique=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending_approval', 'Pending Approval'), ('approved', 'Approved'), ('sent', 'Sent to Supplier'), ('acknowledged', 'Acknowledged by Supplier'), ('in_progress', 'In Progress'), ('partially_received', 'Partially Received'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('disputed', 'Disputed')], default='draft', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('order_date', models.DateField(default=django.utils.timezone.now)),
                ('required_date', models.DateField()),
                ('expected_delivery_date', models.DateField(blank=True, null=True)),
                ('delivered_date', models.DateField(blank=True, null=True)),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('shipping_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('delivery_address', models.JSONField(default=dict)),
                ('shipping_method', models.CharField(blank=True, max_length=100)),
                ('tracking_number', models.CharField(blank=True, max_length=100)),
                ('payment_terms', models.CharField(default='Net 30', max_length=100)),
                ('delivery_terms', models.CharField(blank=True, max_length=100)),
                ('warranty_terms', models.TextField(blank=True)),
                ('special_instructions', models.TextField(blank=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('last_communication_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('attachments', models.JSONField(blank=True, default=list)),
            ],
            options={
                'verbose_name': 'Purchase Order',
                'verbose_name_plural': 'Purchase Orders',
                'db_table': 'purchase_orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('line_number', models.IntegerField()),
                ('product_code', models.CharField(max_length=100)),
                ('product_name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('specifications', models.JSONField(blank=True, default=dict)),
                ('quantity_ordered', models.DecimalField(decimal_places=3, max_digits=10)),
                ('quantity_received', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=10)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('expected_date', models.DateField(blank=True, null=True)),
                ('received_date', models.DateField(blank=True, null=True)),
                ('quality_approved', models.BooleanField(default=False)),
                ('inspection_notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Purchase Order Item',
                'verbose_name_plural': 'Purchase Order Items',
                'db_table': 'purchase_order_items',
                'ordering': ['line_number'],
            },
        ),
        migrations.CreateModel(
            name='SupplierAudit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('audit_type', models.CharField(choices=[('quality', 'Quality Audit'), ('compliance', 'Compliance Audit'), ('financial', 'Financial Audit'), ('security', 'Security Audit'), ('operational', 'Operational Audit'), ('sustainability', 'Sustainability Audit'), ('performance', 'Performance Review')], max_length=20)),
                ('audit_number', models.CharField(max_length=50, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('planned_date', models.DateField()),
                ('actual_date', models.DateField(blank=True, null=True)),
                ('duration_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('follow_up_required', 'Follow-up Required')], default='planned', max_length=20)),
                ('overall_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pass_fail_result', models.CharField(blank=True, max_length=10)),
                ('supplier_participants', models.JSONField(blank=True, default=list)),
                ('audit_checklist', models.JSONField(blank=True, default=dict)),
                ('findings', models.TextField(blank=True)),
                ('recommendations', models.TextField(blank=True)),
                ('corrective_actions', models.TextField(blank=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('next_audit_date', models.DateField(blank=True, null=True)),
                ('audit_report', models.FileField(blank=True, null=True, upload_to='supplier_audits/')),
                ('attachments', models.JSONField(blank=True, default=list)),
            ],
            options={
                'verbose_name': 'Supplier Audit',
                'verbose_name_plural': 'Supplier Audits',
                'db_table': 'supplier_audits',
                'ordering': ['-planned_date'],
            },
        ),
        migrations.CreateModel(
            name='SupplierCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Supplier Category',
                'verbose_name_plural': 'Supplier Categories',
                'db_table': 'supplier_categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SupplierCommunication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('communication_type', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone Call'), ('meeting', 'Meeting'), ('video_call', 'Video Call'), ('message', 'Instant Message'), ('letter', 'Letter'), ('fax', 'Fax'), ('portal', 'Supplier Portal')], max_length=20)),
                ('direction', models.CharField(choices=[('inbound', 'Inbound'), ('outbound', 'Outbound')], max_length=10)),
                ('subject', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('object_id', models.CharField(blank=True, max_length=100)),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('is_important', models.BooleanField(default=False)),
                ('requires_follow_up', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Supplier Communication',
                'verbose_name_plural': 'Supplier Communications',
                'db_table': 'supplier_communications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupplierContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contact_type', models.CharField(choices=[('primary', 'Primary Contact'), ('sales', 'Sales Representative'), ('technical', 'Technical Support'), ('billing', 'Billing Contact'), ('shipping', 'Shipping Contact'), ('quality', 'Quality Assurance'), ('management', 'Management'), ('emergency', 'Emergency Contact')], max_length=20)),
                ('name', models.CharField(max_length=100)),
                ('title', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('mobile', models.CharField(blank=True, max_length=20)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Supplier Contact',
                'verbose_name_plural': 'Supplier Contacts',
                'db_table': 'supplier_contacts',
            },
        ),
        migrations.CreateModel(
            name='SupplierContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contract_type', models.CharField(choices=[('master_agreement', 'Master Service Agreement'), ('purchase_agreement', 'Purchase Agreement'), ('supply_agreement', 'Supply Agreement'), ('nda', 'Non-Disclosure Agreement'), ('quality_agreement', 'Quality Agreement'), ('service_agreement', 'Service Agreement'), ('consulting_agreement', 'Consulting Agreement')], max_length=30)),
                ('contract_number', models.CharField(max_length=50, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('auto_renewal', models.BooleanField(default=False)),
                ('renewal_period_months', models.IntegerField(blank=True, null=True)),
                ('notice_period_days', models.IntegerField(default=30)),
                ('contract_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('payment_terms', models.CharField(max_length=100)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('active', 'Active'), ('expired', 'Expired'), ('terminated', 'Terminated'), ('renewed', 'Renewed')], default='draft', max_length=20)),
                ('compliance_status', models.CharField(default='compliant', max_length=20)),
                ('last_review_date', models.DateField(blank=True, null=True)),
                ('next_review_date', models.DateField(blank=True, null=True)),
                ('contract_file', models.FileField(blank=True, null=True, upload_to='supplier_contracts/')),
                ('signed_file', models.FileField(blank=True, null=True, upload_to='supplier_contracts/signed/')),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('terms_and_conditions', models.TextField(blank=True)),
                ('special_clauses', models.JSONField(blank=True, default=list)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Supplier Contract',
                'verbose_name_plural': 'Supplier Contracts',
                'db_table': 'supplier_contracts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupplierDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document_type', models.CharField(choices=[('business_license', 'Business License'), ('tax_certificate', 'Tax Certificate'), ('insurance_certificate', 'Insurance Certificate'), ('quality_certificate', 'Quality Certificate'), ('iso_certificate', 'ISO Certificate'), ('contract', 'Contract'), ('nda', 'Non-Disclosure Agreement'), ('w9_form', 'W-9 Form'), ('bank_details', 'Bank Details'), ('product_catalog', 'Product Catalog'), ('price_list', 'Price List'), ('capability_statement', 'Capability Statement'), ('reference_letter', 'Reference Letter'), ('audit_report', 'Audit Report'), ('other', 'Other')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('file', models.FileField(upload_to='supplier_documents/')),
                ('file_size', models.IntegerField(blank=True, null=True)),
                ('mime_type', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired'), ('requires_update', 'Requires Update')], default='pending', max_length=20)),
                ('is_required', models.BooleanField(default=False)),
                ('is_confidential', models.BooleanField(default=False)),
                ('issue_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('version', models.IntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Supplier Document',
                'verbose_name_plural': 'Supplier Documents',
                'db_table': 'supplier_documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupplierPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment_number', models.CharField(max_length=50, unique=True)),
                ('invoice_number', models.CharField(blank=True, max_length=100)),
                ('invoice_date', models.DateField(blank=True, null=True)),
                ('invoice_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('net_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('paid_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('payment_terms', models.CharField(max_length=100)),
                ('due_date', models.DateField()),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('payment_method', models.CharField(blank=True, choices=[('bank_transfer', 'Bank Transfer'), ('check', 'Check'), ('credit_card', 'Credit Card'), ('ach', 'ACH Transfer'), ('wire_transfer', 'Wire Transfer'), ('paypal', 'PayPal'), ('other', 'Other')], max_length=20)),
                ('payment_reference', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('paid', 'Paid'), ('partially_paid', 'Partially Paid'), ('overdue', 'Overdue'), ('disputed', 'Disputed'), ('cancelled', 'Cancelled')], default='pending', max_length=15)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('invoice_file', models.FileField(blank=True, null=True, upload_to='supplier_invoices/')),
                ('payment_receipt', models.FileField(blank=True, null=True, upload_to='payment_receipts/')),
                ('notes', models.TextField(blank=True)),
                ('currency', models.CharField(default='USD', max_length=3)),
            ],
            options={
                'verbose_name': 'Supplier Payment',
                'verbose_name_plural': 'Supplier Payments',
                'db_table': 'supplier_payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupplierPerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metric_type', models.CharField(choices=[('delivery_time', 'Delivery Time'), ('quality_score', 'Quality Score'), ('service_rating', 'Service Rating'), ('cost_competitiveness', 'Cost Competitiveness'), ('communication', 'Communication'), ('flexibility', 'Flexibility'), ('innovation', 'Innovation'), ('sustainability', 'Sustainability')], max_length=30)),
                ('value', models.DecimalField(decimal_places=3, max_digits=10)),
                ('target_value', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('measurement_date', models.DateField(default=django.utils.timezone.now)),
                ('measurement_period', models.CharField(default='monthly', max_length=20)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Supplier Performance Metric',
                'verbose_name_plural': 'Supplier Performance Metrics',
                'db_table': 'supplier_performance_metrics',
                'ordering': ['-measurement_date'],
            },
        ),
        migrations.CreateModel(
            name='SupplierProfile',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('supplier_code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('legal_name', models.CharField(blank=True, max_length=200)),
                ('supplier_type', models.CharField(choices=[('manufacturer', 'Manufacturer'), ('distributor', 'Distributor'), ('wholesaler', 'Wholesaler'), ('dropshipper', 'Dropshipper'), ('service_provider', 'Service Provider'), ('consultant', 'Consultant'), ('contractor', 'Contractor')], max_length=20)),
                ('primary_contact_name', models.CharField(max_length=100)),
                ('primary_contact_email', models.EmailField(max_length=254)),
                ('primary_contact_phone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('address_line1', models.CharField(max_length=200)),
                ('address_line2', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('state_province', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('tax_id', models.CharField(blank=True, max_length=50)),
                ('business_license', models.CharField(blank=True, max_length=100)),
                ('website', models.URLField(blank=True)),
                ('established_date', models.DateField(blank=True, null=True)),
                ('employee_count', models.IntegerField(blank=True, null=True)),
                ('annual_revenue', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending Approval'), ('suspended', 'Suspended'), ('blacklisted', 'Blacklisted'), ('under_review', 'Under Review')], default='pending', max_length=20)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], default='medium', max_length=10)),
                ('is_preferred', models.BooleanField(default=False)),
                ('is_certified', models.BooleanField(default=False)),
                ('is_minority_owned', models.BooleanField(default=False)),
                ('is_woman_owned', models.BooleanField(default=False)),
                ('is_veteran_owned', models.BooleanField(default=False)),
                ('overall_rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('quality_rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('delivery_rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('service_rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('credit_limit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('current_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('payment_terms_days', models.IntegerField(default=30)),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('lead_time_days', models.IntegerField(default=7)),
                ('minimum_order_value', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('capacity_rating', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('iso_certified', models.BooleanField(default=False)),
                ('iso_certifications', models.JSONField(blank=True, default=list)),
                ('compliance_status', models.CharField(default='compliant', max_length=20)),
                ('last_audit_date', models.DateField(blank=True, null=True)),
                ('next_audit_date', models.DateField(blank=True, null=True)),
                ('sustainability_rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('carbon_footprint_score', models.IntegerField(blank=True, null=True)),
                ('social_responsibility_score', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('tags', models.JSONField(blank=True, default=list)),
            ],
            options={
                'verbose_name': 'Supplier Profile',
                'verbose_name_plural': 'Supplier Profiles',
                'db_table': 'supplier_profiles',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SupplierQualification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('qualification_type', models.CharField(choices=[('initial', 'Initial Qualification'), ('requalification', 'Re-qualification'), ('certification', 'Certification'), ('pre_qualification', 'Pre-qualification'), ('vendor_assessment', 'Vendor Assessment')], max_length=20)),
                ('qualification_number', models.CharField(max_length=50, unique=True)),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('qualified', 'Qualified'), ('not_qualified', 'Not Qualified'), ('conditionally_qualified', 'Conditionally Qualified'), ('expired', 'Expired'), ('suspended', 'Suspended')], default='in_progress', max_length=25)),
                ('technical_capability_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('quality_system_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('financial_stability_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('delivery_performance_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('overall_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('requirements_checklist', models.JSONField(blank=True, default=dict)),
                ('required_documents', models.JSONField(blank=True, default=list)),
                ('submitted_documents', models.JSONField(blank=True, default=list)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('assessment_notes', models.TextField(blank=True)),
                ('conditions', models.TextField(blank=True)),
                ('recommendations', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Supplier Qualification',
                'verbose_name_plural': 'Supplier Qualifications',
                'db_table': 'supplier_qualifications',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='SupplierRiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessment_date', models.DateField(default=django.utils.timezone.now)),
                ('assessment_period', models.CharField(default='annual', max_length=20)),
                ('overall_risk_level', models.CharField(choices=[('very_low', 'Very Low'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High'), ('critical', 'Critical')], max_length=15)),
                ('overall_risk_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('financial_risk_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('operational_risk_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('compliance_risk_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('quality_risk_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('delivery_risk_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('risk_factors', models.JSONField(blank=True, default=list)),
                ('mitigation_strategies', models.TextField(blank=True)),
                ('monitoring_requirements', models.TextField(blank=True)),
                ('credit_rating', models.CharField(blank=True, max_length=10)),
                ('financial_stability_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('debt_to_equity_ratio', models.DecimalField(blank=True, decimal_places=4, max_digits=8, null=True)),
                ('regulatory_compliance_status', models.CharField(default='compliant', max_length=20)),
                ('certification_status', models.CharField(default='current', max_length=20)),
                ('next_assessment_date', models.DateField(blank=True, null=True)),
                ('action_items', models.JSONField(blank=True, default=list)),
            ],
            options={
                'verbose_name': 'Supplier Risk Assessment',
                'verbose_name_plural': 'Supplier Risk Assessments',
                'db_table': 'supplier_risk_assessments',
                'ordering': ['-assessment_date'],
            },
        ),
        migrations.RemoveConstraint(
            model_name='inventoryaudititem',
            name='unique_audit_item_per_product_location',
        ),
        migrations.RemoveConstraint(
            model_name='inventoryforecast',
            name='unique_forecast_per_product_date_type',
        ),
        migrations.RemoveConstraint(
            model_name='inventorylocation',
            name='unique_location_per_warehouse',
        ),
        migrations.RemoveConstraint(
            model_name='inventoryoptimizationitem',
            name='unique_optimization_item_per_product',
        ),
        migrations.RemoveConstraint(
            model_name='inventoryvaluation',
            name='unique_valuation_per_product_date_method',
        ),
        migrations.RenameIndex(
            model_name='inventoryadjustment',
            new_name='inventory_a_adjustm_d0c48a_idx',
            old_name='inventory_adjustments_number_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryadjustment',
            new_name='inventory_a_product_b4e855_idx',
            old_name='inventory_adjustments_product_location_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryadjustment',
            new_name='inventory_a_status_cf87c1_idx',
            old_name='inventory_adjustments_status_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryadjustment',
            new_name='inventory_a_request_ef4cff_idx',
            old_name='inventory_adjustments_date_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryadjustment',
            new_name='inventory_a_adjustm_b52179_idx',
            old_name='inventory_adjustments_type_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryalert',
            new_name='inventory_a_alert_n_5e11e4_idx',
            old_name='inventory_alerts_number_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryalert',
            new_name='inventory_a_product_36790b_idx',
            old_name='inventory_alerts_product_location_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryalert',
            new_name='inventory_a_alert_t_dc5c59_idx',
            old_name='inventory_alerts_type_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryalert',
            new_name='inventory_a_severit_e89abe_idx',
            old_name='inventory_alerts_severity_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryalert',
            new_name='inventory_a_status_d3a557_idx',
            old_name='inventory_alerts_status_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryalert',
            new_name='inventory_a_trigger_31207b_idx',
            old_name='inventory_alerts_date_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryitem',
            new_name='inventory_i_product_213a86_idx',
            old_name='inventory_items_product_location_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryitem',
            new_name='inventory_i_serial__4ce2b9_idx',
            old_name='inventory_items_serial_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryitem',
            new_name='inventory_i_lot_num_afe93f_idx',
            old_name='inventory_items_lot_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryitem',
            new_name='inventory_i_batch_n_2431d0_idx',
            old_name='inventory_items_batch_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryitem',
            new_name='inventory_i_conditi_7fc3a0_idx',
            old_name='inventory_items_condition_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryitem',
            new_name='inventory_i_expiry__6f5da2_idx',
            old_name='inventory_items_expiry_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryitem',
            new_name='inventory_i_is_avai_d08213_idx',
            old_name='inventory_items_available_idx',
        ),
        migrations.RenameIndex(
            model_name='inventorylocation',
            new_name='inventory_l_warehou_c86cba_idx',
            old_name='inventory_locations_warehouse_location_idx',
        ),
        migrations.RenameIndex(
            model_name='inventorylocation',
            new_name='inventory_l_locatio_5fbc5e_idx',
            old_name='inventory_locations_type_idx',
        ),
        migrations.RenameIndex(
            model_name='inventorylocation',
            new_name='inventory_l_is_acti_039a47_idx',
            old_name='inventory_locations_status_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryreservation',
            new_name='inventory_r_reserva_1de694_idx',
            old_name='inventory_reservations_number_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryreservation',
            new_name='inventory_r_product_407a96_idx',
            old_name='inventory_reservations_product_location_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryreservation',
            new_name='inventory_r_status_c8c2fd_idx',
            old_name='inventory_reservations_status_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryreservation',
            new_name='inventory_r_expiry__e4b265_idx',
            old_name='inventory_reservations_expiry_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryreservation',
            new_name='inventory_r_priorit_360eba_idx',
            old_name='inventory_reservations_priority_idx',
        ),
        migrations.RenameIndex(
            model_name='inventorytransfer',
            new_name='inventory_t_transfe_1f34ca_idx',
            old_name='inventory_transfers_number_idx',
        ),
        migrations.RenameIndex(
            model_name='inventorytransfer',
            new_name='inventory_t_source__8fa263_idx',
            old_name='inventory_transfers_locations_idx',
        ),
        migrations.RenameIndex(
            model_name='inventorytransfer',
            new_name='inventory_t_status_a9411f_idx',
            old_name='inventory_transfers_status_idx',
        ),
        migrations.RenameIndex(
            model_name='inventorytransfer',
            new_name='inventory_t_request_6cef97_idx',
            old_name='inventory_transfers_date_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryvaluation',
            new_name='inventory_v_product_17d3ba_idx',
            old_name='inventory_valuations_product_warehouse_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryvaluation',
            new_name='inventory_v_valuati_acbb96_idx',
            old_name='inventory_valuations_date_idx',
        ),
        migrations.RenameIndex(
            model_name='inventoryvaluation',
            new_name='inventory_v_costing_ee646b_idx',
            old_name='inventory_valuations_method_idx',
        ),
        migrations.AlterField(
            model_name='inventoryvaluation',
            name='valuation_date',
            field=models.DateField(default=datetime.date.today),
        ),
        migrations.AlterUniqueTogether(
            name='inventoryaudititem',
            unique_together={('audit', 'product', 'location')},
        ),
        migrations.AlterUniqueTogether(
            name='inventoryforecast',
            unique_together={('product', 'warehouse', 'forecast_date', 'forecast_type')},
        ),
        migrations.AlterUniqueTogether(
            name='inventorylocation',
            unique_together={('warehouse', 'zone', 'aisle', 'shelf', 'bin')},
        ),
        migrations.AlterUniqueTogether(
            name='inventoryoptimizationitem',
            unique_together={('optimization', 'product')},
        ),
        migrations.AlterUniqueTogether(
            name='inventoryvaluation',
            unique_together={('product', 'warehouse', 'valuation_date', 'costing_method')},
        ),
        migrations.AddIndex(
            model_name='inventoryaudit',
            index=models.Index(fields=['audit_number'], name='inventory_a_audit_n_48ddd4_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryaudit',
            index=models.Index(fields=['audit_type'], name='inventory_a_audit_t_6b1342_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryaudit',
            index=models.Index(fields=['status'], name='inventory_a_status_8ec8a9_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryaudit',
            index=models.Index(fields=['planned_date'], name='inventory_a_planned_de93fa_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryaudit',
            index=models.Index(fields=['warehouse'], name='inventory_a_warehou_5ffbbc_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryaudititem',
            index=models.Index(fields=['audit', 'product'], name='inventory_a_audit_i_963588_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryaudititem',
            index=models.Index(fields=['variance_quantity'], name='inventory_a_varianc_143822_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryaudititem',
            index=models.Index(fields=['count_date'], name='inventory_a_count_d_0d2438_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryforecast',
            index=models.Index(fields=['forecast_number'], name='inventory_f_forecas_7ac9b4_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryforecast',
            index=models.Index(fields=['product', 'warehouse'], name='inventory_f_product_281754_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryforecast',
            index=models.Index(fields=['forecast_date'], name='inventory_f_forecas_ba1313_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryforecast',
            index=models.Index(fields=['forecast_type'], name='inventory_f_forecas_82d107_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryoptimization',
            index=models.Index(fields=['analysis_number'], name='inventory_o_analysi_5196be_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryoptimization',
            index=models.Index(fields=['analysis_type'], name='inventory_o_analysi_e9d659_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryoptimization',
            index=models.Index(fields=['analysis_date'], name='inventory_o_analysi_b2cb1f_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryoptimization',
            index=models.Index(fields=['warehouse'], name='inventory_o_warehou_a63583_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryoptimizationitem',
            index=models.Index(fields=['optimization', 'abc_category'], name='inventory_o_optimiz_0c8946_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryoptimizationitem',
            index=models.Index(fields=['turnover_rate'], name='inventory_o_turnove_86732e_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryoptimizationitem',
            index=models.Index(fields=['is_slow_moving'], name='inventory_o_is_slow_942d27_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryoptimizationitem',
            index=models.Index(fields=['is_dead_stock'], name='inventory_o_is_dead_732cbd_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryreport',
            index=models.Index(fields=['report_number'], name='inventory_r_report__a8483a_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryreport',
            index=models.Index(fields=['report_type'], name='inventory_r_report__c34fc4_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryreport',
            index=models.Index(fields=['schedule_type'], name='inventory_r_schedul_e82dde_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryreport',
            index=models.Index(fields=['next_run'], name='inventory_r_next_ru_f896ec_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryreport',
            index=models.Index(fields=['is_active'], name='inventory_r_is_acti_f90ead_idx'),
        ),
        migrations.AddField(
            model_name='supplierriskassessment',
            name='assessed_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='supplierriskassessment',
            name='reviewed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_risk_assessments', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='supplierriskassessment',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risk_assessments', to='admin_panel.supplierprofile'),
        ),
        migrations.AddField(
            model_name='supplierqualification',
            name='approver',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_qualifications', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='supplierqualification',
            name='assessor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessed_qualifications', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='supplierqualification',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qualifications', to='admin_panel.supplierprofile'),
        ),
        migrations.AddField(
            model_name='supplierprofile',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.suppliercategory'),
        ),
        migrations.AddField(
            model_name='supplierprofile',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_suppliers', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='supplierprofile',
            name='last_modified_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_suppliers', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='supplierperformancemetric',
            name='measured_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='supplierperformancemetric',
            name='purchase_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.purchaseorder'),
        ),
        migrations.AddField(
            model_name='supplierperformancemetric',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='admin_panel.supplierprofile'),
        ),
        migrations.AddField(
            model_name='supplierpayment',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_payments', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='supplierpayment',
            name='processed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_payments', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='supplierpayment',
            name='purchase_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.purchaseorder'),
        ),
        migrations.AddField(
            model_name='supplierpayment',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='admin_panel.supplierprofile'),
        ),
        migrations.AddField(
            model_name='supplierdocument',
            name='reviewed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='supplierdocument',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='admin_panel.supplierprofile'),
        ),
        migrations.AddField(
            model_name='supplierdocument',
            name='uploaded_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_supplier_docs', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='suppliercontract',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_contracts', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='suppliercontract',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_contracts', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='suppliercontract',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contracts', to='admin_panel.supplierprofile'),
        ),
        migrations.AddField(
            model_name='suppliercontact',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='admin_panel.supplierprofile'),
        ),
        migrations.AddField(
            model_name='suppliercommunication',
            name='admin_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='suppliercommunication',
            name='content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='suppliercommunication',
            name='purchase_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.purchaseorder'),
        ),
        migrations.AddField(
            model_name='suppliercommunication',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communications', to='admin_panel.supplierprofile'),
        ),
        migrations.AddField(
            model_name='suppliercommunication',
            name='supplier_contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.suppliercontact'),
        ),
        migrations.AddField(
            model_name='suppliercategory',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='admin_panel.suppliercategory'),
        ),
        migrations.AddField(
            model_name='supplieraudit',
            name='audit_team',
            field=models.ManyToManyField(blank=True, related_name='participated_audits', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='supplieraudit',
            name='lead_auditor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='led_audits', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='supplieraudit',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audits', to='admin_panel.supplierprofile'),
        ),
        migrations.AddField(
            model_name='purchaseorderitem',
            name='purchase_order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='admin_panel.purchaseorder'),
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_pos', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_pos', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purchase_orders', to='admin_panel.supplierprofile'),
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='supplier_contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.suppliercontact'),
        ),
        migrations.AddField(
            model_name='productwarranty',
            name='product',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='warranty', to='products.product'),
        ),
        migrations.AddField(
            model_name='productversion',
            name='changed_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='productversion',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='products.product'),
        ),
        migrations.AddField(
            model_name='productvariant',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='products.product'),
        ),
        migrations.AddField(
            model_name='producttemplate',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='products.category'),
        ),
        migrations.AddField(
            model_name='producttemplate',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='productsyndication',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='syndications', to='products.product'),
        ),
        migrations.AddField(
            model_name='productrelationship',
            name='source_product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships_from', to='products.product'),
        ),
        migrations.AddField(
            model_name='productrelationship',
            name='target_product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships_to', to='products.product'),
        ),
        migrations.AddField(
            model_name='productquality',
            name='product',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quality', to='products.product'),
        ),
        migrations.AddField(
            model_name='productlifecycle',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='productlifecycle',
            name='product',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lifecycle', to='products.product'),
        ),
        migrations.AddField(
            model_name='productdigitalasset',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='digital_assets', to='products.product'),
        ),
        migrations.AddField(
            model_name='productbundleitem',
            name='bundle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='admin_panel.productbundle'),
        ),
        migrations.AddField(
            model_name='productbundleitem',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product'),
        ),
        migrations.AddField(
            model_name='productbundleitem',
            name='variant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.productvariant'),
        ),
        migrations.AddField(
            model_name='productattributevalue',
            name='attribute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='admin_panel.productattribute'),
        ),
        migrations.AddField(
            model_name='productanalytics',
            name='product',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='products.product'),
        ),
        migrations.AddField(
            model_name='customerwinbackcampaign',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='winback_campaigns', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customersupportticketresponse',
            name='admin_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='customersupportticketresponse',
            name='customer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customersupportticketresponse',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='admin_panel.customersupportticket'),
        ),
        migrations.AddField(
            model_name='customersupportticket',
            name='assigned_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='customersupportticket',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_tickets', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customersupportticket',
            name='related_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='support_tickets', to='orders.order'),
        ),
        migrations.AddField(
            model_name='customersupportticket',
            name='related_product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.product'),
        ),
        migrations.AddField(
            model_name='customersocialmediaintegration',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_media_accounts', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customerservicelevelagreement',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sla_tracking', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customerservicelevelagreement',
            name='related_complaint',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.customercomplaintmanagement'),
        ),
        migrations.AddField(
            model_name='customerservicelevelagreement',
            name='related_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='orders.order'),
        ),
        migrations.AddField(
            model_name='customerservicelevelagreement',
            name='related_ticket',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.customersupportticket'),
        ),
        migrations.AddField(
            model_name='customersegmentmembership',
            name='assigned_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='customersegmentmembership',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='segment_memberships', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customersegmentmembership',
            name='segment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='admin_panel.customersegment'),
        ),
        migrations.AddField(
            model_name='customersegment',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='customersatisfactionsurvey',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='satisfaction_surveys', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customersatisfactionsurvey',
            name='related_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orders.order'),
        ),
        migrations.AddField(
            model_name='customersatisfactionsurvey',
            name='related_ticket',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.customersupportticket'),
        ),
        migrations.AddField(
            model_name='customerriskassessment',
            name='customer',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='risk_assessment', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customerreferralprogram',
            name='completing_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orders.order'),
        ),
        migrations.AddField(
            model_name='customerreferralprogram',
            name='referred_customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals_received', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customerreferralprogram',
            name='referrer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals_made', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customerpreferencecenter',
            name='customer',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preference_center', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customerpaymentmethod',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customerloyaltytransaction',
            name='loyalty_program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='admin_panel.customerloyaltyprogram'),
        ),
        migrations.AddField(
            model_name='customerloyaltytransaction',
            name='processed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='customerloyaltytransaction',
            name='related_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orders.order'),
        ),
        migrations.AddField(
            model_name='customerloyaltyprogram',
            name='customer',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_program', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customerlifecyclestage',
            name='customer',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lifecycle_stage', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customerlifecyclehistory',
            name='changed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='customerlifecyclehistory',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lifecycle_history', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customerjourneymapping',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='journey_touchpoints', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customergdprcompliance',
            name='customer',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='gdpr_compliance', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customercomplaintmanagement',
            name='assigned_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='customercomplaintmanagement',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complaints', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customercomplaintmanagement',
            name='related_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orders.order'),
        ),
        migrations.AddField(
            model_name='customercomplaintmanagement',
            name='related_product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.product'),
        ),
        migrations.AddField(
            model_name='customercommunicationhistory',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communication_history', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customercommunicationhistory',
            name='sender',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='admin_panel.adminuser'),
        ),
        migrations.AddField(
            model_name='customerchurnprediction',
            name='customer',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='churn_prediction', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customeranalytics',
            name='customer',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admin_analytics', to='customers.customerprofile'),
        ),
        migrations.AddField(
            model_name='customeraccounthealthscore',
            name='customer',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='health_score', to='customers.customerprofile'),
        ),
        migrations.AddIndex(
            model_name='supplierprofile',
            index=models.Index(fields=['supplier_code'], name='supplier_pr_supplie_36602b_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierprofile',
            index=models.Index(fields=['name'], name='supplier_pr_name_bb72d4_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierprofile',
            index=models.Index(fields=['status'], name='supplier_pr_status_5aed97_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierprofile',
            index=models.Index(fields=['supplier_type'], name='supplier_pr_supplie_8d6551_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierprofile',
            index=models.Index(fields=['risk_level'], name='supplier_pr_risk_le_17fda4_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierprofile',
            index=models.Index(fields=['is_preferred'], name='supplier_pr_is_pref_e4169f_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierprofile',
            index=models.Index(fields=['overall_rating'], name='supplier_pr_overall_1ebf9f_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierprofile',
            index=models.Index(fields=['created_at'], name='supplier_pr_created_62b230_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierperformancemetric',
            index=models.Index(fields=['supplier', 'metric_type', 'measurement_date'], name='supplier_pe_supplie_e00e58_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierperformancemetric',
            index=models.Index(fields=['measurement_date'], name='supplier_pe_measure_255336_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierpayment',
            index=models.Index(fields=['payment_number'], name='supplier_pa_payment_f2aa4e_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierpayment',
            index=models.Index(fields=['supplier', 'status'], name='supplier_pa_supplie_7b3476_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierpayment',
            index=models.Index(fields=['due_date'], name='supplier_pa_due_dat_64873a_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierpayment',
            index=models.Index(fields=['status'], name='supplier_pa_status_7c3326_idx'),
        ),
        migrations.AddIndex(
            model_name='suppliercontract',
            index=models.Index(fields=['contract_number'], name='supplier_co_contrac_dcbdae_idx'),
        ),
        migrations.AddIndex(
            model_name='suppliercontract',
            index=models.Index(fields=['supplier', 'status'], name='supplier_co_supplie_2acb44_idx'),
        ),
        migrations.AddIndex(
            model_name='suppliercontract',
            index=models.Index(fields=['end_date'], name='supplier_co_end_dat_fe65a4_idx'),
        ),
        migrations.AddIndex(
            model_name='suppliercontract',
            index=models.Index(fields=['next_review_date'], name='supplier_co_next_re_a79b33_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='suppliercontact',
            unique_together={('supplier', 'contact_type', 'email')},
        ),
        migrations.AlterUniqueTogether(
            name='purchaseorderitem',
            unique_together={('purchase_order', 'line_number')},
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['po_number'], name='purchase_or_po_numb_656941_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['supplier', 'status'], name='purchase_or_supplie_8a71bd_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['status', 'created_at'], name='purchase_or_status_c9fac8_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['required_date'], name='purchase_or_require_27c517_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['created_by'], name='purchase_or_created_0d8709_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productversion',
            unique_together={('product', 'version_number')},
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['product', 'is_active'], name='product_var_product_b96575_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['sku'], name='product_var_sku_3a95f0_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['is_default'], name='product_var_is_defa_3d8bd4_idx'),
        ),
        migrations.AddConstraint(
            model_name='productvariant',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('product',), name='unique_default_variant_per_product'),
        ),
        migrations.AlterUniqueTogether(
            name='productsyndication',
            unique_together={('product', 'channel_name')},
        ),
        migrations.AlterUniqueTogether(
            name='productrelationship',
            unique_together={('source_product', 'target_product', 'relationship_type')},
        ),
        migrations.AlterUniqueTogether(
            name='productbundleitem',
            unique_together={('bundle', 'product', 'variant')},
        ),
        migrations.AlterUniqueTogether(
            name='productattributevalue',
            unique_together={('attribute', 'value')},
        ),
        migrations.AddIndex(
            model_name='customerwinbackcampaign',
            index=models.Index(fields=['customer', 'status'], name='customer_wi_custome_b5cada_idx'),
        ),
        migrations.AddIndex(
            model_name='customerwinbackcampaign',
            index=models.Index(fields=['trigger_type'], name='customer_wi_trigger_1859e1_idx'),
        ),
        migrations.AddIndex(
            model_name='customerwinbackcampaign',
            index=models.Index(fields=['scheduled_date'], name='customer_wi_schedul_ba45f8_idx'),
        ),
        migrations.AddIndex(
            model_name='customersupportticketresponse',
            index=models.Index(fields=['ticket', 'created_at'], name='customer_su_ticket__bb1427_idx'),
        ),
        migrations.AddIndex(
            model_name='customersupportticketresponse',
            index=models.Index(fields=['is_internal'], name='customer_su_is_inte_9af404_idx'),
        ),
        migrations.AddIndex(
            model_name='customersupportticket',
            index=models.Index(fields=['ticket_number'], name='customer_su_ticket__4bb5ea_idx'),
        ),
        migrations.AddIndex(
            model_name='customersupportticket',
            index=models.Index(fields=['customer', 'status'], name='customer_su_custome_966399_idx'),
        ),
        migrations.AddIndex(
            model_name='customersupportticket',
            index=models.Index(fields=['status', 'priority'], name='customer_su_status_4b050e_idx'),
        ),
        migrations.AddIndex(
            model_name='customersupportticket',
            index=models.Index(fields=['assigned_to', 'status'], name='customer_su_assigne_fea288_idx'),
        ),
        migrations.AddIndex(
            model_name='customersupportticket',
            index=models.Index(fields=['sla_due_date'], name='customer_su_sla_due_f2c04a_idx'),
        ),
        migrations.AddIndex(
            model_name='customersupportticket',
            index=models.Index(fields=['created_at'], name='customer_su_created_53b6ba_idx'),
        ),
        migrations.AddIndex(
            model_name='customersocialmediaintegration',
            index=models.Index(fields=['platform'], name='customer_so_platfor_a1d30e_idx'),
        ),
        migrations.AddIndex(
            model_name='customersocialmediaintegration',
            index=models.Index(fields=['customer', 'platform'], name='customer_so_custome_303a38_idx'),
        ),
        migrations.AddIndex(
            model_name='customersocialmediaintegration',
            index=models.Index(fields=['sentiment_score'], name='customer_so_sentime_6e0b5d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='customersocialmediaintegration',
            unique_together={('customer', 'platform', 'username')},
        ),
        migrations.AddIndex(
            model_name='customerservicelevelagreement',
            index=models.Index(fields=['customer', 'sla_type'], name='customer_se_custome_888ae6_idx'),
        ),
        migrations.AddIndex(
            model_name='customerservicelevelagreement',
            index=models.Index(fields=['is_breached'], name='customer_se_is_brea_1ff6f2_idx'),
        ),
        migrations.AddIndex(
            model_name='customerservicelevelagreement',
            index=models.Index(fields=['target_time'], name='customer_se_target__4304b6_idx'),
        ),
        migrations.AddIndex(
            model_name='customerservicelevelagreement',
            index=models.Index(fields=['completion_time'], name='customer_se_complet_9a83f0_idx'),
        ),
        migrations.AddIndex(
            model_name='customersegmentmembership',
            index=models.Index(fields=['customer', 'is_active'], name='customer_se_custome_71ac7f_idx'),
        ),
        migrations.AddIndex(
            model_name='customersegmentmembership',
            index=models.Index(fields=['segment', 'is_active'], name='customer_se_segment_b25533_idx'),
        ),
        migrations.AddIndex(
            model_name='customersegmentmembership',
            index=models.Index(fields=['joined_at'], name='customer_se_joined__7bc5e5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='customersegmentmembership',
            unique_together={('customer', 'segment')},
        ),
        migrations.AddIndex(
            model_name='customersegment',
            index=models.Index(fields=['segment_type'], name='customer_se_segment_018755_idx'),
        ),
        migrations.AddIndex(
            model_name='customersegment',
            index=models.Index(fields=['is_active'], name='customer_se_is_acti_6c5705_idx'),
        ),
        migrations.AddIndex(
            model_name='customersegment',
            index=models.Index(fields=['priority'], name='customer_se_priorit_59a79c_idx'),
        ),
        migrations.AddIndex(
            model_name='customersegment',
            index=models.Index(fields=['last_calculated'], name='customer_se_last_ca_e24301_idx'),
        ),
        migrations.AddIndex(
            model_name='customersatisfactionsurvey',
            index=models.Index(fields=['customer', 'survey_type'], name='customer_sa_custome_d54450_idx'),
        ),
        migrations.AddIndex(
            model_name='customersatisfactionsurvey',
            index=models.Index(fields=['is_completed'], name='customer_sa_is_comp_632614_idx'),
        ),
        migrations.AddIndex(
            model_name='customersatisfactionsurvey',
            index=models.Index(fields=['nps_score'], name='customer_sa_nps_sco_1b0a85_idx'),
        ),
        migrations.AddIndex(
            model_name='customersatisfactionsurvey',
            index=models.Index(fields=['sent_at'], name='customer_sa_sent_at_ba3839_idx'),
        ),
        migrations.AddIndex(
            model_name='customerriskassessment',
            index=models.Index(fields=['overall_risk_level'], name='customer_ri_overall_c01856_idx'),
        ),
        migrations.AddIndex(
            model_name='customerriskassessment',
            index=models.Index(fields=['fraud_risk_score'], name='customer_ri_fraud_r_48ccf1_idx'),
        ),
        migrations.AddIndex(
            model_name='customerriskassessment',
            index=models.Index(fields=['manual_review_required'], name='customer_ri_manual__fd11d6_idx'),
        ),
        migrations.AddIndex(
            model_name='customerriskassessment',
            index=models.Index(fields=['last_assessed'], name='customer_ri_last_as_a3ff6c_idx'),
        ),
        migrations.AddIndex(
            model_name='customerreferralprogram',
            index=models.Index(fields=['referral_code'], name='customer_re_referra_655c38_idx'),
        ),
        migrations.AddIndex(
            model_name='customerreferralprogram',
            index=models.Index(fields=['referrer', 'status'], name='customer_re_referre_e802ad_idx'),
        ),
        migrations.AddIndex(
            model_name='customerreferralprogram',
            index=models.Index(fields=['status'], name='customer_re_status_5dc147_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpreferencecenter',
            index=models.Index(fields=['email_marketing'], name='customer_pr_email_m_4db92d_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpreferencecenter',
            index=models.Index(fields=['sms_marketing'], name='customer_pr_sms_mar_00921e_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpreferencecenter',
            index=models.Index(fields=['last_updated'], name='customer_pr_last_up_3f5cba_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpaymentmethod',
            index=models.Index(fields=['customer', 'is_active'], name='customer_pa_custome_a7f946_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpaymentmethod',
            index=models.Index(fields=['token'], name='customer_pa_token_f4b07f_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpaymentmethod',
            index=models.Index(fields=['is_default'], name='customer_pa_is_defa_a214d0_idx'),
        ),
        migrations.AddIndex(
            model_name='customerloyaltytransaction',
            index=models.Index(fields=['loyalty_program', 'created_at'], name='customer_lo_loyalty_464199_idx'),
        ),
        migrations.AddIndex(
            model_name='customerloyaltytransaction',
            index=models.Index(fields=['transaction_type'], name='customer_lo_transac_64d945_idx'),
        ),
        migrations.AddIndex(
            model_name='customerloyaltyprogram',
            index=models.Index(fields=['current_tier'], name='customer_lo_current_28651c_idx'),
        ),
        migrations.AddIndex(
            model_name='customerloyaltyprogram',
            index=models.Index(fields=['current_points'], name='customer_lo_current_5f42a5_idx'),
        ),
        migrations.AddIndex(
            model_name='customerloyaltyprogram',
            index=models.Index(fields=['is_active'], name='customer_lo_is_acti_f103d1_idx'),
        ),
        migrations.AddIndex(
            model_name='customerlifecyclestage',
            index=models.Index(fields=['current_stage'], name='customer_li_current_a12c59_idx'),
        ),
        migrations.AddIndex(
            model_name='customerlifecyclestage',
            index=models.Index(fields=['churn_probability'], name='customer_li_churn_p_4647d4_idx'),
        ),
        migrations.AddIndex(
            model_name='customerlifecyclestage',
            index=models.Index(fields=['engagement_score'], name='customer_li_engagem_2f66e8_idx'),
        ),
        migrations.AddIndex(
            model_name='customerlifecyclestage',
            index=models.Index(fields=['stage_entry_date'], name='customer_li_stage_e_324870_idx'),
        ),
        migrations.AddIndex(
            model_name='customerlifecyclehistory',
            index=models.Index(fields=['customer', 'created_at'], name='customer_li_custome_1a1eea_idx'),
        ),
        migrations.AddIndex(
            model_name='customerlifecyclehistory',
            index=models.Index(fields=['to_stage', 'created_at'], name='customer_li_to_stag_3b1ad7_idx'),
        ),
        migrations.AddIndex(
            model_name='customerjourneymapping',
            index=models.Index(fields=['customer', 'created_at'], name='customer_jo_custome_d05547_idx'),
        ),
        migrations.AddIndex(
            model_name='customerjourneymapping',
            index=models.Index(fields=['touchpoint', 'created_at'], name='customer_jo_touchpo_3d2f1e_idx'),
        ),
        migrations.AddIndex(
            model_name='customerjourneymapping',
            index=models.Index(fields=['session_id'], name='customer_jo_session_6da72a_idx'),
        ),
        migrations.AddIndex(
            model_name='customerjourneymapping',
            index=models.Index(fields=['led_to_conversion'], name='customer_jo_led_to__fea362_idx'),
        ),
        migrations.AddIndex(
            model_name='customergdprcompliance',
            index=models.Index(fields=['deletion_requested'], name='customer_gd_deletio_e30258_idx'),
        ),
        migrations.AddIndex(
            model_name='customergdprcompliance',
            index=models.Index(fields=['data_export_requested'], name='customer_gd_data_ex_1a57f5_idx'),
        ),
        migrations.AddIndex(
            model_name='customergdprcompliance',
            index=models.Index(fields=['marketing_consent'], name='customer_gd_marketi_fec586_idx'),
        ),
        migrations.AddIndex(
            model_name='customercomplaintmanagement',
            index=models.Index(fields=['complaint_number'], name='customer_co_complai_7a08ad_idx'),
        ),
        migrations.AddIndex(
            model_name='customercomplaintmanagement',
            index=models.Index(fields=['customer', 'status'], name='customer_co_custome_be00e2_idx'),
        ),
        migrations.AddIndex(
            model_name='customercomplaintmanagement',
            index=models.Index(fields=['status', 'severity'], name='customer_co_status_5c3497_idx'),
        ),
        migrations.AddIndex(
            model_name='customercomplaintmanagement',
            index=models.Index(fields=['assigned_to'], name='customer_co_assigne_279dd8_idx'),
        ),
        migrations.AddIndex(
            model_name='customercomplaintmanagement',
            index=models.Index(fields=['sla_due_date'], name='customer_co_sla_due_6ad3ba_idx'),
        ),
        migrations.AddIndex(
            model_name='customercommunicationhistory',
            index=models.Index(fields=['customer', 'sent_at'], name='customer_co_custome_3cacf1_idx'),
        ),
        migrations.AddIndex(
            model_name='customercommunicationhistory',
            index=models.Index(fields=['communication_type', 'sent_at'], name='customer_co_communi_e54c41_idx'),
        ),
        migrations.AddIndex(
            model_name='customercommunicationhistory',
            index=models.Index(fields=['status'], name='customer_co_status_34d461_idx'),
        ),
        migrations.AddIndex(
            model_name='customercommunicationhistory',
            index=models.Index(fields=['campaign_id'], name='customer_co_campaig_bc9a49_idx'),
        ),
        migrations.AddIndex(
            model_name='customerchurnprediction',
            index=models.Index(fields=['churn_probability'], name='customer_ch_churn_p_3bfdbf_idx'),
        ),
        migrations.AddIndex(
            model_name='customerchurnprediction',
            index=models.Index(fields=['churn_risk_level'], name='customer_ch_churn_r_61a935_idx'),
        ),
        migrations.AddIndex(
            model_name='customerchurnprediction',
            index=models.Index(fields=['predicted_churn_date'], name='customer_ch_predict_f5f799_idx'),
        ),
        migrations.AddIndex(
            model_name='customerchurnprediction',
            index=models.Index(fields=['intervention_priority'], name='customer_ch_interve_a448f1_idx'),
        ),
        migrations.AddIndex(
            model_name='customerchurnprediction',
            index=models.Index(fields=['last_updated'], name='customer_ch_last_up_17ac07_idx'),
        ),
        migrations.AddIndex(
            model_name='customeranalytics',
            index=models.Index(fields=['lifetime_value'], name='customer_an_lifetim_301d77_idx'),
        ),
        migrations.AddIndex(
            model_name='customeranalytics',
            index=models.Index(fields=['churn_risk_score'], name='customer_an_churn_r_00e00d_idx'),
        ),
        migrations.AddIndex(
            model_name='customeranalytics',
            index=models.Index(fields=['engagement_score'], name='customer_an_engagem_adafbe_idx'),
        ),
        migrations.AddIndex(
            model_name='customeranalytics',
            index=models.Index(fields=['loyalty_score'], name='customer_an_loyalty_60c117_idx'),
        ),
        migrations.AddIndex(
            model_name='customeranalytics',
            index=models.Index(fields=['last_calculated'], name='customer_an_last_ca_92fe7d_idx'),
        ),
        migrations.AddIndex(
            model_name='customeraccounthealthscore',
            index=models.Index(fields=['overall_score'], name='customer_ac_overall_cc63eb_idx'),
        ),
        migrations.AddIndex(
            model_name='customeraccounthealthscore',
            index=models.Index(fields=['health_level'], name='customer_ac_health__d34cf0_idx'),
        ),
        migrations.AddIndex(
            model_name='customeraccounthealthscore',
            index=models.Index(fields=['churn_risk'], name='customer_ac_churn_r_3f7129_idx'),
        ),
        migrations.AddIndex(
            model_name='customeraccounthealthscore',
            index=models.Index(fields=['last_calculated'], name='customer_ac_last_ca_29a5d5_idx'),
        ),
    ]
