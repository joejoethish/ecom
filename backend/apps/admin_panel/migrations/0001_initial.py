# Generated by Django 4.2.23 on 2025-08-25 06:05

import datetime
from decimal import Decimal
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("products", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ActivityLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("session_key", models.CharField(blank=True, max_length=40)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("view", "View"),
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("export", "Export"),
                            ("import", "Import"),
                            ("approve", "Approve"),
                            ("reject", "Reject"),
                            ("publish", "Publish"),
                            ("unpublish", "Unpublish"),
                            ("error", "Error"),
                            ("security", "Security Event"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("object_id", models.CharField(blank=True, max_length=100)),
                ("changes", models.JSONField(blank=True, default=dict)),
                ("additional_data", models.JSONField(blank=True, default=dict)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
                ("request_method", models.CharField(blank=True, max_length=10)),
                ("request_path", models.CharField(blank=True, max_length=500)),
                ("module", models.CharField(blank=True, max_length=50)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="low",
                        max_length=10,
                    ),
                ),
                ("is_successful", models.BooleanField(default=True)),
                ("error_message", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Activity Log",
                "verbose_name_plural": "Activity Logs",
                "db_table": "activity_logs",
                "db_table_comment": "PARTITION BY RANGE (YEAR(created_at)*100 + MONTH(created_at))",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AdminLoginAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("username", models.CharField(max_length=150)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("is_successful", models.BooleanField(default=False)),
                ("failure_reason", models.CharField(blank=True, max_length=100)),
                ("is_suspicious", models.BooleanField(default=False)),
                ("risk_score", models.IntegerField(default=0)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "verbose_name": "Admin Login Attempt",
                "verbose_name_plural": "Admin Login Attempts",
                "db_table": "admin_login_attempts",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AdminNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("success", "Success"),
                            ("security", "Security Alert"),
                            ("system", "System Notification"),
                            ("task", "Task Notification"),
                            ("reminder", "Reminder"),
                        ],
                        default="info",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=10,
                    ),
                ),
                ("object_id", models.CharField(blank=True, max_length=100)),
                ("action_url", models.CharField(blank=True, max_length=500)),
                ("action_label", models.CharField(blank=True, max_length=100)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("is_dismissed", models.BooleanField(default=False)),
                ("dismissed_at", models.DateTimeField(blank=True, null=True)),
                ("scheduled_for", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Admin Notification",
                "verbose_name_plural": "Admin Notifications",
                "db_table": "admin_notifications",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AdminPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("codename", models.CharField(max_length=100, unique=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "module",
                    models.CharField(
                        choices=[
                            ("dashboard", "Dashboard"),
                            ("products", "Products"),
                            ("orders", "Orders"),
                            ("customers", "Customers"),
                            ("inventory", "Inventory"),
                            ("analytics", "Analytics"),
                            ("reports", "Reports"),
                            ("settings", "Settings"),
                            ("users", "User Management"),
                            ("content", "Content Management"),
                            ("promotions", "Promotions"),
                            ("shipping", "Shipping"),
                            ("payments", "Payments"),
                            ("notifications", "Notifications"),
                            ("system", "System Administration"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("view", "View"),
                            ("create", "Create"),
                            ("edit", "Edit"),
                            ("delete", "Delete"),
                            ("export", "Export"),
                            ("import", "Import"),
                            ("approve", "Approve"),
                            ("publish", "Publish"),
                            ("manage", "Manage"),
                            ("configure", "Configure"),
                        ],
                        max_length=20,
                    ),
                ),
                ("resource", models.CharField(blank=True, max_length=100)),
                ("is_sensitive", models.BooleanField(default=False)),
                ("requires_mfa", models.BooleanField(default=False)),
                ("ip_restricted", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("is_system_permission", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Admin Permission",
                "verbose_name_plural": "Admin Permissions",
                "db_table": "admin_permissions",
                "ordering": ["module", "action", "resource"],
            },
        ),
        migrations.CreateModel(
            name="AdminReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("sales", "Sales Report"),
                            ("inventory", "Inventory Report"),
                            ("customer", "Customer Report"),
                            ("financial", "Financial Report"),
                            ("activity", "Activity Report"),
                            ("security", "Security Report"),
                            ("performance", "Performance Report"),
                            ("custom", "Custom Report"),
                        ],
                        max_length=20,
                    ),
                ),
                ("query_config", models.JSONField(default=dict)),
                (
                    "format",
                    models.CharField(
                        choices=[
                            ("pdf", "PDF"),
                            ("excel", "Excel"),
                            ("csv", "CSV"),
                            ("json", "JSON"),
                        ],
                        default="pdf",
                        max_length=10,
                    ),
                ),
                (
                    "schedule_type",
                    models.CharField(
                        choices=[
                            ("once", "One Time"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("yearly", "Yearly"),
                        ],
                        default="once",
                        max_length=20,
                    ),
                ),
                ("schedule_config", models.JSONField(default=dict)),
                ("next_run", models.DateTimeField(blank=True, null=True)),
                ("last_run", models.DateTimeField(blank=True, null=True)),
                ("email_recipients", models.JSONField(blank=True, default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("total_runs", models.IntegerField(default=0)),
                ("successful_runs", models.IntegerField(default=0)),
                ("last_error", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Admin Report",
                "verbose_name_plural": "Admin Reports",
                "db_table": "admin_reports",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="AdminRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("display_name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("level", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("is_system_role", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Admin Role",
                "verbose_name_plural": "Admin Roles",
                "db_table": "admin_roles",
                "ordering": ["level", "name"],
            },
        ),
        migrations.CreateModel(
            name="AdminSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("session_key", models.CharField(max_length=40, unique=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("device_type", models.CharField(blank=True, max_length=50)),
                ("browser", models.CharField(blank=True, max_length=100)),
                ("os", models.CharField(blank=True, max_length=100)),
                ("location", models.CharField(blank=True, max_length=200)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("is_trusted_device", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("expires_at", models.DateTimeField()),
                ("is_suspicious", models.BooleanField(default=False)),
                ("security_score", models.IntegerField(default=100)),
            ],
            options={
                "verbose_name": "Admin Session",
                "verbose_name_plural": "Admin Sessions",
                "db_table": "admin_sessions",
                "ordering": ["-last_activity"],
            },
        ),
        migrations.CreateModel(
            name="AdminUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("super_admin", "Super Admin"),
                            ("admin", "Admin"),
                            ("manager", "Manager"),
                            ("analyst", "Analyst"),
                            ("support", "Support"),
                            ("viewer", "Viewer"),
                        ],
                        default="viewer",
                        max_length=20,
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("it", "IT Department"),
                            ("sales", "Sales Department"),
                            ("marketing", "Marketing Department"),
                            ("customer_service", "Customer Service"),
                            ("finance", "Finance Department"),
                            ("operations", "Operations"),
                            ("hr", "Human Resources"),
                            ("management", "Management"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True, null=True, upload_to="admin_avatars/"
                    ),
                ),
                ("last_login_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("failed_login_attempts", models.IntegerField(default=0)),
                ("account_locked_until", models.DateTimeField(blank=True, null=True)),
                ("password_changed_at", models.DateTimeField(auto_now_add=True)),
                ("must_change_password", models.BooleanField(default=False)),
                ("two_factor_enabled", models.BooleanField(default=False)),
                ("two_factor_secret", models.CharField(blank=True, max_length=32)),
                ("backup_codes", models.JSONField(blank=True, default=list)),
                ("max_concurrent_sessions", models.IntegerField(default=3)),
                ("session_timeout_minutes", models.IntegerField(default=60)),
                ("is_admin_active", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Admin User",
                "verbose_name_plural": "Admin Users",
                "db_table": "admin_users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Chart",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "chart_type",
                    models.CharField(
                        choices=[
                            ("line", "Line Chart"),
                            ("bar", "Bar Chart"),
                            ("pie", "Pie Chart"),
                            ("area", "Area Chart"),
                            ("scatter", "Scatter Plot"),
                            ("heatmap", "Heatmap"),
                            ("gauge", "Gauge Chart"),
                            ("funnel", "Funnel Chart"),
                            ("treemap", "Treemap"),
                            ("radar", "Radar Chart"),
                        ],
                        max_length=50,
                    ),
                ),
                ("config", models.JSONField(default=dict)),
                ("data_source", models.CharField(max_length=200)),
                ("refresh_interval", models.IntegerField(default=300)),
                ("theme", models.CharField(default="default", max_length=50)),
                ("colors", models.JSONField(default=list)),
                ("custom_css", models.TextField(blank=True)),
                ("is_public", models.BooleanField(default=False)),
                ("allowed_roles", models.JSONField(default=list)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("draft", "Draft"),
                            ("archived", "Archived"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("is_real_time", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_accessed", models.DateTimeField(blank=True, null=True)),
                ("access_count", models.IntegerField(default=0)),
            ],
            options={
                "db_table": "admin_charts",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChartAnnotation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "annotation_type",
                    models.CharField(
                        choices=[
                            ("note", "Note"),
                            ("highlight", "Highlight"),
                            ("trend_line", "Trend Line"),
                            ("threshold", "Threshold"),
                            ("event", "Event Marker"),
                        ],
                        max_length=50,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                ("position", models.JSONField()),
                ("style", models.JSONField(default=dict)),
                ("is_visible", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "admin_chart_annotations",
            },
        ),
        migrations.CreateModel(
            name="ChartComment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("content", models.TextField()),
                ("position", models.JSONField(blank=True, null=True)),
                ("is_resolved", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "admin_chart_comments",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChartDataCache",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("cache_key", models.CharField(max_length=200, unique=True)),
                ("data", models.JSONField()),
                ("expires_at", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "admin_chart_data_cache",
            },
        ),
        migrations.CreateModel(
            name="ChartExport",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "export_format",
                    models.CharField(
                        choices=[
                            ("png", "PNG Image"),
                            ("pdf", "PDF Document"),
                            ("svg", "SVG Vector"),
                            ("excel", "Excel Spreadsheet"),
                            ("csv", "CSV Data"),
                            ("json", "JSON Data"),
                        ],
                        max_length=20,
                    ),
                ),
                ("file_path", models.CharField(max_length=500)),
                ("file_size", models.IntegerField()),
                ("export_settings", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "admin_chart_exports",
            },
        ),
        migrations.CreateModel(
            name="ChartPerformanceMetric",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("load_time", models.FloatField()),
                ("data_size", models.IntegerField()),
                ("render_time", models.FloatField()),
                ("user_agent", models.TextField()),
                ("ip_address", models.GenericIPAddressField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "admin_chart_performance",
            },
        ),
        migrations.CreateModel(
            name="ChartShare",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "share_type",
                    models.CharField(
                        choices=[
                            ("public_link", "Public Link"),
                            ("embed_code", "Embed Code"),
                            ("api_access", "API Access"),
                            ("email", "Email Share"),
                        ],
                        max_length=50,
                    ),
                ),
                ("share_token", models.CharField(max_length=100, unique=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("access_count", models.IntegerField(default=0)),
                ("settings", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "admin_chart_shares",
            },
        ),
        migrations.CreateModel(
            name="ChartTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "chart_type",
                    models.CharField(
                        choices=[
                            ("line", "Line Chart"),
                            ("bar", "Bar Chart"),
                            ("pie", "Pie Chart"),
                            ("area", "Area Chart"),
                            ("scatter", "Scatter Plot"),
                            ("heatmap", "Heatmap"),
                            ("gauge", "Gauge Chart"),
                            ("funnel", "Funnel Chart"),
                            ("treemap", "Treemap"),
                            ("radar", "Radar Chart"),
                        ],
                        max_length=50,
                    ),
                ),
                ("category", models.CharField(max_length=100)),
                ("config", models.JSONField(default=dict)),
                ("data_source", models.CharField(max_length=200)),
                ("is_public", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "admin_chart_templates",
                "ordering": ["category", "name"],
            },
        ),
        migrations.CreateModel(
            name="ChartVersion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("version_number", models.IntegerField()),
                ("title", models.CharField(max_length=200)),
                ("config", models.JSONField()),
                ("changes_summary", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "admin_chart_versions",
                "ordering": ["-version_number"],
            },
        ),
        migrations.CreateModel(
            name="CustomerAccountHealthScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "overall_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "health_level",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("poor", "Poor"),
                            ("critical", "Critical"),
                        ],
                        default="fair",
                        max_length=20,
                    ),
                ),
                (
                    "engagement_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "satisfaction_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "loyalty_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "payment_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "support_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "churn_risk",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "fraud_risk",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "payment_risk",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "score_trend",
                    models.CharField(
                        choices=[
                            ("improving", "Improving"),
                            ("stable", "Stable"),
                            ("declining", "Declining"),
                        ],
                        default="stable",
                        max_length=20,
                    ),
                ),
                ("recommendations", models.JSONField(blank=True, default=list)),
                ("action_items", models.JSONField(blank=True, default=list)),
                ("last_calculated", models.DateTimeField(auto_now=True)),
                ("calculation_version", models.CharField(default="1.0", max_length=10)),
            ],
            options={
                "verbose_name": "Customer Account Health Score",
                "verbose_name_plural": "Customer Account Health Scores",
                "db_table": "customer_account_health_scores",
            },
        ),
        migrations.CreateModel(
            name="CustomerAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lifetime_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "predicted_lifetime_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "average_order_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("total_orders", models.IntegerField(default=0)),
                ("total_items_purchased", models.IntegerField(default=0)),
                ("favorite_category", models.CharField(blank=True, max_length=100)),
                ("favorite_brand", models.CharField(blank=True, max_length=100)),
                (
                    "purchase_frequency",
                    models.FloatField(default=0.0, help_text="Orders per month"),
                ),
                ("days_since_last_order", models.IntegerField(default=0)),
                ("average_days_between_orders", models.FloatField(default=0.0)),
                ("website_visits", models.IntegerField(default=0)),
                ("page_views", models.IntegerField(default=0)),
                (
                    "time_on_site",
                    models.IntegerField(default=0, help_text="Total time in minutes"),
                ),
                (
                    "email_open_rate",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "email_click_rate",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "engagement_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "loyalty_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "satisfaction_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "churn_risk_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "fraud_risk_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "credit_score",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(300),
                            django.core.validators.MaxValueValidator(850),
                        ],
                    ),
                ),
                (
                    "preferred_communication_channel",
                    models.CharField(blank=True, max_length=50),
                ),
                (
                    "preferred_shopping_time",
                    models.CharField(blank=True, max_length=50),
                ),
                (
                    "price_sensitivity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("last_calculated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Customer Analytics",
                "verbose_name_plural": "Customer Analytics",
                "db_table": "customer_analytics",
            },
        ),
        migrations.CreateModel(
            name="CustomerChurnPrediction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "churn_probability",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                (
                    "churn_risk_level",
                    models.CharField(
                        choices=[
                            ("very_low", "Very Low"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("very_high", "Very High"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "model_used",
                    models.CharField(
                        choices=[
                            ("logistic_regression", "Logistic Regression"),
                            ("random_forest", "Random Forest"),
                            ("gradient_boosting", "Gradient Boosting"),
                            ("neural_network", "Neural Network"),
                            ("ensemble", "Ensemble Model"),
                        ],
                        max_length=30,
                    ),
                ),
                ("model_version", models.CharField(max_length=20)),
                (
                    "prediction_confidence",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                ("top_churn_factors", models.JSONField(blank=True, default=list)),
                ("feature_scores", models.JSONField(blank=True, default=dict)),
                ("predicted_churn_date", models.DateField(blank=True, null=True)),
                ("days_to_churn", models.IntegerField(blank=True, null=True)),
                ("recommended_actions", models.JSONField(blank=True, default=list)),
                (
                    "intervention_priority",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("prediction_date", models.DateTimeField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("actual_churned", models.BooleanField(blank=True, null=True)),
                ("actual_churn_date", models.DateField(blank=True, null=True)),
                ("prediction_accuracy", models.FloatField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Customer Churn Prediction",
                "verbose_name_plural": "Customer Churn Predictions",
                "db_table": "customer_churn_predictions",
            },
        ),
        migrations.CreateModel(
            name="CustomerCommunicationHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "communication_type",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("phone_call", "Phone Call"),
                            ("chat", "Live Chat"),
                            ("push_notification", "Push Notification"),
                            ("in_app_message", "In-App Message"),
                            ("postal_mail", "Postal Mail"),
                            ("social_media", "Social Media"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "direction",
                    models.CharField(
                        choices=[("inbound", "Inbound"), ("outbound", "Outbound")],
                        max_length=10,
                    ),
                ),
                ("subject", models.CharField(blank=True, max_length=500)),
                ("content", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("sent", "Sent"),
                            ("delivered", "Delivered"),
                            ("opened", "Opened"),
                            ("clicked", "Clicked"),
                            ("replied", "Replied"),
                            ("bounced", "Bounced"),
                            ("failed", "Failed"),
                            ("unsubscribed", "Unsubscribed"),
                        ],
                        default="sent",
                        max_length=20,
                    ),
                ),
                ("campaign_id", models.CharField(blank=True, max_length=100)),
                ("template_id", models.CharField(blank=True, max_length=100)),
                ("sent_at", models.DateTimeField(auto_now_add=True)),
                ("delivered_at", models.DateTimeField(blank=True, null=True)),
                ("opened_at", models.DateTimeField(blank=True, null=True)),
                ("clicked_at", models.DateTimeField(blank=True, null=True)),
                ("replied_at", models.DateTimeField(blank=True, null=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "verbose_name": "Customer Communication History",
                "verbose_name_plural": "Customer Communication History",
                "db_table": "customer_communication_history",
                "ordering": ["-sent_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomerComplaintManagement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("complaint_number", models.CharField(max_length=50, unique=True)),
                (
                    "complaint_type",
                    models.CharField(
                        choices=[
                            ("product_quality", "Product Quality"),
                            ("service_quality", "Service Quality"),
                            ("delivery_issue", "Delivery Issue"),
                            ("billing_issue", "Billing Issue"),
                            ("website_issue", "Website Issue"),
                            ("staff_behavior", "Staff Behavior"),
                            ("policy_issue", "Policy Issue"),
                            ("other", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                ("subject", models.CharField(max_length=500)),
                ("description", models.TextField()),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("received", "Received"),
                            ("investigating", "Investigating"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                            ("escalated", "Escalated"),
                        ],
                        default="received",
                        max_length=20,
                    ),
                ),
                ("department", models.CharField(blank=True, max_length=50)),
                ("resolution_description", models.TextField(blank=True)),
                (
                    "compensation_offered",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("compensation_type", models.CharField(blank=True, max_length=50)),
                ("received_at", models.DateTimeField(auto_now_add=True)),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("closed_at", models.DateTimeField(blank=True, null=True)),
                ("sla_due_date", models.DateTimeField(blank=True, null=True)),
                ("sla_breached", models.BooleanField(default=False)),
                (
                    "resolution_rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("resolution_feedback", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Customer Complaint",
                "verbose_name_plural": "Customer Complaints",
                "db_table": "customer_complaint_management",
                "ordering": ["-received_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomerGDPRCompliance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("marketing_consent", models.BooleanField(default=False)),
                ("marketing_consent_date", models.DateTimeField(blank=True, null=True)),
                ("analytics_consent", models.BooleanField(default=False)),
                ("analytics_consent_date", models.DateTimeField(blank=True, null=True)),
                ("data_processing_consent", models.BooleanField(default=True)),
                (
                    "data_processing_consent_date",
                    models.DateTimeField(auto_now_add=True),
                ),
                ("deletion_requested", models.BooleanField(default=False)),
                ("deletion_request_date", models.DateTimeField(blank=True, null=True)),
                ("deletion_processed", models.BooleanField(default=False)),
                (
                    "deletion_processed_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("data_export_requested", models.BooleanField(default=False)),
                (
                    "data_export_request_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("data_export_completed", models.BooleanField(default=False)),
                (
                    "data_export_completed_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("data_export_file_path", models.CharField(blank=True, max_length=500)),
                ("last_consent_update", models.DateTimeField(auto_now=True)),
                ("consent_version", models.CharField(default="1.0", max_length=20)),
            ],
            options={
                "verbose_name": "Customer GDPR Compliance",
                "verbose_name_plural": "Customer GDPR Compliance",
                "db_table": "customer_gdpr_compliance",
            },
        ),
        migrations.CreateModel(
            name="CustomerJourneyMapping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "touchpoint",
                    models.CharField(
                        choices=[
                            ("website_visit", "Website Visit"),
                            ("product_view", "Product View"),
                            ("category_browse", "Category Browse"),
                            ("search", "Search"),
                            ("cart_add", "Add to Cart"),
                            ("cart_abandon", "Cart Abandonment"),
                            ("checkout_start", "Checkout Started"),
                            ("order_placed", "Order Placed"),
                            ("email_open", "Email Opened"),
                            ("email_click", "Email Clicked"),
                            ("support_contact", "Support Contact"),
                            ("review_left", "Review Left"),
                            ("social_media", "Social Media Interaction"),
                        ],
                        max_length=30,
                    ),
                ),
                ("page_url", models.URLField(blank=True)),
                ("referrer", models.URLField(blank=True)),
                ("campaign_source", models.CharField(blank=True, max_length=100)),
                ("campaign_medium", models.CharField(blank=True, max_length=100)),
                ("campaign_name", models.CharField(blank=True, max_length=100)),
                ("session_id", models.CharField(blank=True, max_length=100)),
                ("device_type", models.CharField(blank=True, max_length=50)),
                ("browser", models.CharField(blank=True, max_length=100)),
                (
                    "time_spent",
                    models.IntegerField(default=0, help_text="Time spent in seconds"),
                ),
                ("interaction_count", models.IntegerField(default=1)),
                ("led_to_conversion", models.BooleanField(default=False)),
                (
                    "conversion_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "verbose_name": "Customer Journey Touchpoint",
                "verbose_name_plural": "Customer Journey Touchpoints",
                "db_table": "customer_journey_mapping",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomerLifecycleHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "from_stage",
                    models.CharField(
                        choices=[
                            ("prospect", "Prospect"),
                            ("new_customer", "New Customer"),
                            ("active", "Active Customer"),
                            ("at_risk", "At Risk"),
                            ("inactive", "Inactive"),
                            ("churned", "Churned"),
                            ("win_back", "Win Back"),
                            ("loyal", "Loyal Customer"),
                            ("champion", "Champion"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "to_stage",
                    models.CharField(
                        choices=[
                            ("prospect", "Prospect"),
                            ("new_customer", "New Customer"),
                            ("active", "Active Customer"),
                            ("at_risk", "At Risk"),
                            ("inactive", "Inactive"),
                            ("churned", "Churned"),
                            ("win_back", "Win Back"),
                            ("loyal", "Loyal Customer"),
                            ("champion", "Champion"),
                        ],
                        max_length=20,
                    ),
                ),
                ("reason", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Customer Lifecycle History",
                "verbose_name_plural": "Customer Lifecycle History",
                "db_table": "customer_lifecycle_history",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomerLifecycleStage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "current_stage",
                    models.CharField(
                        choices=[
                            ("prospect", "Prospect"),
                            ("new_customer", "New Customer"),
                            ("active", "Active Customer"),
                            ("at_risk", "At Risk"),
                            ("inactive", "Inactive"),
                            ("churned", "Churned"),
                            ("win_back", "Win Back"),
                            ("loyal", "Loyal Customer"),
                            ("champion", "Champion"),
                        ],
                        default="prospect",
                        max_length=20,
                    ),
                ),
                (
                    "previous_stage",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("prospect", "Prospect"),
                            ("new_customer", "New Customer"),
                            ("active", "Active Customer"),
                            ("at_risk", "At Risk"),
                            ("inactive", "Inactive"),
                            ("churned", "Churned"),
                            ("win_back", "Win Back"),
                            ("loyal", "Loyal Customer"),
                            ("champion", "Champion"),
                        ],
                        max_length=20,
                    ),
                ),
                ("stage_entry_date", models.DateTimeField(auto_now_add=True)),
                ("days_in_current_stage", models.IntegerField(default=0)),
                ("total_stage_changes", models.IntegerField(default=0)),
                (
                    "churn_probability",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "engagement_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "loyalty_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                ("auto_calculated", models.BooleanField(default=True)),
                ("last_calculated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Customer Lifecycle Stage",
                "verbose_name_plural": "Customer Lifecycle Stages",
                "db_table": "customer_lifecycle_stages",
            },
        ),
        migrations.CreateModel(
            name="CustomerLoyaltyProgram",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("current_points", models.IntegerField(default=0)),
                ("lifetime_points", models.IntegerField(default=0)),
                (
                    "current_tier",
                    models.CharField(
                        choices=[
                            ("bronze", "Bronze"),
                            ("silver", "Silver"),
                            ("gold", "Gold"),
                            ("platinum", "Platinum"),
                            ("diamond", "Diamond"),
                        ],
                        default="bronze",
                        max_length=20,
                    ),
                ),
                ("points_to_next_tier", models.IntegerField(default=0)),
                ("tier_expiry_date", models.DateField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("enrolled_date", models.DateField(auto_now_add=True)),
                ("total_rewards_earned", models.IntegerField(default=0)),
                ("total_rewards_redeemed", models.IntegerField(default=0)),
            ],
            options={
                "verbose_name": "Customer Loyalty Program",
                "verbose_name_plural": "Customer Loyalty Programs",
                "db_table": "customer_loyalty_programs",
            },
        ),
        migrations.CreateModel(
            name="CustomerLoyaltyTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("earned", "Points Earned"),
                            ("redeemed", "Points Redeemed"),
                            ("expired", "Points Expired"),
                            ("adjusted", "Points Adjusted"),
                        ],
                        max_length=20,
                    ),
                ),
                ("points", models.IntegerField()),
                ("reason", models.CharField(blank=True, max_length=500)),
            ],
            options={
                "verbose_name": "Customer Loyalty Transaction",
                "verbose_name_plural": "Customer Loyalty Transactions",
                "db_table": "customer_loyalty_transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomerPaymentMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "payment_type",
                    models.CharField(
                        choices=[
                            ("credit_card", "Credit Card"),
                            ("debit_card", "Debit Card"),
                            ("bank_account", "Bank Account"),
                            ("digital_wallet", "Digital Wallet"),
                            ("upi", "UPI"),
                            ("net_banking", "Net Banking"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        help_text="Tokenized payment method identifier", max_length=255
                    ),
                ),
                ("last_four_digits", models.CharField(blank=True, max_length=4)),
                (
                    "expiry_month",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                ("expiry_year", models.IntegerField(blank=True, null=True)),
                (
                    "brand",
                    models.CharField(
                        blank=True, help_text="Visa, MasterCard, etc.", max_length=50
                    ),
                ),
                ("bank_name", models.CharField(blank=True, max_length=100)),
                ("account_holder_name", models.CharField(blank=True, max_length=200)),
                ("is_default", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("usage_count", models.IntegerField(default=0)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("added_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("verification_attempts", models.IntegerField(default=0)),
            ],
            options={
                "verbose_name": "Customer Payment Method",
                "verbose_name_plural": "Customer Payment Methods",
                "db_table": "customer_payment_methods",
            },
        ),
        migrations.CreateModel(
            name="CustomerPreferenceCenter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("email_marketing", models.BooleanField(default=True)),
                ("email_transactional", models.BooleanField(default=True)),
                ("email_newsletters", models.BooleanField(default=True)),
                ("email_promotions", models.BooleanField(default=True)),
                ("email_product_updates", models.BooleanField(default=True)),
                ("sms_marketing", models.BooleanField(default=False)),
                ("sms_transactional", models.BooleanField(default=True)),
                ("sms_promotions", models.BooleanField(default=False)),
                ("sms_order_updates", models.BooleanField(default=True)),
                ("push_notifications", models.BooleanField(default=True)),
                ("push_promotions", models.BooleanField(default=True)),
                ("push_order_updates", models.BooleanField(default=True)),
                ("push_abandoned_cart", models.BooleanField(default=True)),
                (
                    "email_frequency",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("never", "Never"),
                        ],
                        default="weekly",
                        max_length=20,
                    ),
                ),
                ("preferred_categories", models.JSONField(blank=True, default=list)),
                ("preferred_brands", models.JSONField(blank=True, default=list)),
                (
                    "price_range_min",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "price_range_max",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("data_sharing_analytics", models.BooleanField(default=True)),
                ("data_sharing_marketing", models.BooleanField(default=True)),
                ("data_sharing_third_party", models.BooleanField(default=False)),
                ("personalized_recommendations", models.BooleanField(default=True)),
                ("personalized_pricing", models.BooleanField(default=True)),
                ("personalized_content", models.BooleanField(default=True)),
                ("preferred_language", models.CharField(default="en", max_length=10)),
                ("preferred_currency", models.CharField(default="USD", max_length=3)),
                ("preferred_timezone", models.CharField(default="UTC", max_length=50)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("updated_by_customer", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Customer Preference Center",
                "verbose_name_plural": "Customer Preference Centers",
                "db_table": "customer_preference_centers",
            },
        ),
        migrations.CreateModel(
            name="CustomerReferralProgram",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("referral_code", models.CharField(max_length=50, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("completed", "Completed"),
                            ("rewarded", "Rewarded"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "referrer_reward",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "referred_reward",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("referred_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("rewarded_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Customer Referral",
                "verbose_name_plural": "Customer Referrals",
                "db_table": "customer_referral_programs",
                "ordering": ["-referred_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomerRiskAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "overall_risk_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "fraud_risk_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "credit_risk_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "overall_risk_level",
                    models.CharField(
                        choices=[
                            ("very_low", "Very Low"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("very_high", "Very High"),
                        ],
                        default="low",
                        max_length=20,
                    ),
                ),
                (
                    "fraud_risk_level",
                    models.CharField(
                        choices=[
                            ("very_low", "Very Low"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("very_high", "Very High"),
                        ],
                        default="low",
                        max_length=20,
                    ),
                ),
                (
                    "credit_risk_level",
                    models.CharField(
                        choices=[
                            ("very_low", "Very Low"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("very_high", "Very High"),
                        ],
                        default="low",
                        max_length=20,
                    ),
                ),
                ("risk_factors", models.JSONField(blank=True, default=list)),
                ("suspicious_activities", models.JSONField(blank=True, default=list)),
                ("failed_payment_attempts", models.IntegerField(default=0)),
                ("chargebacks", models.IntegerField(default=0)),
                (
                    "account_takeover_risk",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "identity_verification_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("verified", "Verified"),
                            ("failed", "Failed"),
                            ("manual_review", "Manual Review Required"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("last_assessed", models.DateTimeField(auto_now=True)),
                ("assessed_by", models.CharField(default="system", max_length=50)),
                ("restrictions_applied", models.JSONField(blank=True, default=list)),
                ("manual_review_required", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Customer Risk Assessment",
                "verbose_name_plural": "Customer Risk Assessments",
                "db_table": "customer_risk_assessments",
            },
        ),
        migrations.CreateModel(
            name="CustomerSatisfactionSurvey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "survey_type",
                    models.CharField(
                        choices=[
                            ("nps", "Net Promoter Score"),
                            ("csat", "Customer Satisfaction"),
                            ("ces", "Customer Effort Score"),
                            ("custom", "Custom Survey"),
                        ],
                        max_length=20,
                    ),
                ),
                ("survey_name", models.CharField(max_length=200)),
                ("questions", models.JSONField(default=list)),
                ("responses", models.JSONField(default=dict)),
                (
                    "nps_score",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "csat_score",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "ces_score",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(7),
                        ],
                    ),
                ),
                ("sent_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("is_completed", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Customer Satisfaction Survey",
                "verbose_name_plural": "Customer Satisfaction Surveys",
                "db_table": "customer_satisfaction_surveys",
                "ordering": ["-sent_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomerSegment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "segment_type",
                    models.CharField(
                        choices=[
                            ("demographic", "Demographic"),
                            ("behavioral", "Behavioral"),
                            ("geographic", "Geographic"),
                            ("psychographic", "Psychographic"),
                            ("transactional", "Transactional"),
                            ("lifecycle", "Lifecycle"),
                            ("value_based", "Value Based"),
                            ("custom", "Custom"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "criteria",
                    models.JSONField(
                        default=dict, help_text="Segmentation rules and conditions"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_dynamic",
                    models.BooleanField(
                        default=True,
                        help_text="Auto-update membership based on criteria",
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=0, help_text="Higher priority segments take precedence"
                    ),
                ),
                ("customer_count", models.IntegerField(default=0)),
                ("last_calculated", models.DateTimeField(blank=True, null=True)),
                ("tags", models.JSONField(blank=True, default=list)),
            ],
            options={
                "verbose_name": "Customer Segment",
                "verbose_name_plural": "Customer Segments",
                "db_table": "customer_segments",
                "ordering": ["-priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="CustomerSegmentMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "confidence_score",
                    models.FloatField(
                        default=1.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("auto_assigned", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Customer Segment Membership",
                "verbose_name_plural": "Customer Segment Memberships",
                "db_table": "customer_segment_memberships",
            },
        ),
        migrations.CreateModel(
            name="CustomerServiceLevelAgreement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "sla_type",
                    models.CharField(
                        choices=[
                            ("support_response", "Support Response Time"),
                            ("issue_resolution", "Issue Resolution Time"),
                            ("order_processing", "Order Processing Time"),
                            ("delivery_time", "Delivery Time"),
                            ("refund_processing", "Refund Processing Time"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "target_time_hours",
                    models.IntegerField(help_text="Target time in hours"),
                ),
                (
                    "warning_threshold_hours",
                    models.IntegerField(help_text="Warning threshold in hours"),
                ),
                ("start_time", models.DateTimeField()),
                ("target_time", models.DateTimeField()),
                ("warning_time", models.DateTimeField()),
                ("completion_time", models.DateTimeField(blank=True, null=True)),
                ("is_met", models.BooleanField(blank=True, null=True)),
                ("is_breached", models.BooleanField(default=False)),
                ("breach_reason", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Customer SLA Tracking",
                "verbose_name_plural": "Customer SLA Tracking",
                "db_table": "customer_service_level_agreements",
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="CustomerSocialMediaIntegration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "platform",
                    models.CharField(
                        choices=[
                            ("facebook", "Facebook"),
                            ("twitter", "Twitter"),
                            ("instagram", "Instagram"),
                            ("linkedin", "LinkedIn"),
                            ("youtube", "YouTube"),
                            ("tiktok", "TikTok"),
                            ("pinterest", "Pinterest"),
                        ],
                        max_length=20,
                    ),
                ),
                ("username", models.CharField(max_length=100)),
                ("profile_url", models.URLField()),
                ("profile_id", models.CharField(blank=True, max_length=100)),
                ("followers_count", models.IntegerField(default=0)),
                ("following_count", models.IntegerField(default=0)),
                ("posts_count", models.IntegerField(default=0)),
                ("engagement_rate", models.FloatField(default=0.0)),
                (
                    "sentiment_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(-1.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("brand_mentions", models.IntegerField(default=0)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Customer Social Media Account",
                "verbose_name_plural": "Customer Social Media Accounts",
                "db_table": "customer_social_media_integrations",
            },
        ),
        migrations.CreateModel(
            name="CustomerSupportTicket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("ticket_number", models.CharField(max_length=50, unique=True)),
                ("subject", models.CharField(max_length=500)),
                ("description", models.TextField()),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("general_inquiry", "General Inquiry"),
                            ("order_issue", "Order Issue"),
                            ("product_issue", "Product Issue"),
                            ("payment_issue", "Payment Issue"),
                            ("shipping_issue", "Shipping Issue"),
                            ("return_refund", "Return/Refund"),
                            ("account_issue", "Account Issue"),
                            ("technical_issue", "Technical Issue"),
                            ("complaint", "Complaint"),
                            ("suggestion", "Suggestion"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                            ("critical", "Critical"),
                        ],
                        default="normal",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("in_progress", "In Progress"),
                            ("pending_customer", "Pending Customer Response"),
                            ("pending_internal", "Pending Internal Review"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                            ("reopened", "Reopened"),
                        ],
                        default="open",
                        max_length=20,
                    ),
                ),
                ("department", models.CharField(blank=True, max_length=50)),
                ("first_response_at", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("closed_at", models.DateTimeField(blank=True, null=True)),
                ("sla_due_date", models.DateTimeField(blank=True, null=True)),
                ("sla_breached", models.BooleanField(default=False)),
                (
                    "satisfaction_rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("satisfaction_feedback", models.TextField(blank=True)),
                (
                    "source",
                    models.CharField(
                        default="web",
                        help_text="Source of the ticket (web, email, phone, etc.)",
                        max_length=50,
                    ),
                ),
                ("tags", models.JSONField(blank=True, default=list)),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "verbose_name": "Customer Support Ticket",
                "verbose_name_plural": "Customer Support Tickets",
                "db_table": "customer_support_tickets",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomerSupportTicketResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("message", models.TextField()),
                (
                    "is_internal",
                    models.BooleanField(
                        default=False, help_text="Internal note not visible to customer"
                    ),
                ),
                ("attachments", models.JSONField(blank=True, default=list)),
                ("is_read_by_customer", models.BooleanField(default=False)),
                ("read_by_customer_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Support Ticket Response",
                "verbose_name_plural": "Support Ticket Responses",
                "db_table": "customer_support_ticket_responses",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomerWinBackCampaign",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "trigger_type",
                    models.CharField(
                        choices=[
                            ("churn_risk", "Churn Risk"),
                            ("inactive_period", "Inactive Period"),
                            ("abandoned_cart", "Abandoned Cart"),
                            ("low_engagement", "Low Engagement"),
                            ("manual", "Manual"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                ("scheduled_date", models.DateTimeField()),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "discount_percentage",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "discount_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("free_shipping", models.BooleanField(default=False)),
                ("emails_sent", models.IntegerField(default=0)),
                ("emails_opened", models.IntegerField(default=0)),
                ("emails_clicked", models.IntegerField(default=0)),
                ("orders_generated", models.IntegerField(default=0)),
                (
                    "revenue_generated",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                ("is_successful", models.BooleanField(default=False)),
                ("success_date", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Customer Win-Back Campaign",
                "verbose_name_plural": "Customer Win-Back Campaigns",
                "db_table": "customer_winback_campaigns",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DashboardAlert",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("threshold", "Threshold Alert"),
                            ("anomaly", "Anomaly Detection"),
                            ("system", "System Alert"),
                            ("business", "Business Alert"),
                            ("security", "Security Alert"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("critical", "Critical"),
                        ],
                        max_length=10,
                    ),
                ),
                ("data_source", models.CharField(max_length=100)),
                ("condition_config", models.JSONField(default=dict)),
                ("threshold_config", models.JSONField(default=dict)),
                ("recipient_roles", models.JSONField(default=list)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("acknowledged", "Acknowledged"),
                            ("resolved", "Resolved"),
                            ("dismissed", "Dismissed"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("last_triggered", models.DateTimeField(blank=True, null=True)),
                ("trigger_count", models.IntegerField(default=0)),
                ("is_enabled", models.BooleanField(default=True)),
                ("cooldown_minutes", models.IntegerField(default=60)),
            ],
            options={
                "verbose_name": "Dashboard Alert",
                "verbose_name_plural": "Dashboard Alerts",
                "db_table": "dashboard_alerts",
                "ordering": ["-last_triggered"],
            },
        ),
        migrations.CreateModel(
            name="DashboardDataSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("api", "REST API"),
                            ("database", "Database Query"),
                            ("file", "File Upload"),
                            ("webhook", "Webhook"),
                            ("realtime", "Real-time Stream"),
                        ],
                        max_length=20,
                    ),
                ),
                ("endpoint_url", models.URLField(blank=True)),
                (
                    "auth_type",
                    models.CharField(
                        choices=[
                            ("none", "No Authentication"),
                            ("basic", "Basic Auth"),
                            ("bearer", "Bearer Token"),
                            ("oauth2", "OAuth 2.0"),
                            ("api_key", "API Key"),
                        ],
                        default="none",
                        max_length=20,
                    ),
                ),
                ("auth_config", models.JSONField(default=dict)),
                ("data_mapping", models.JSONField(default=dict)),
                ("refresh_interval", models.IntegerField(default=300)),
                ("cache_duration", models.IntegerField(default=300)),
                ("is_active", models.BooleanField(default=True)),
                ("last_sync", models.DateTimeField(blank=True, null=True)),
                ("sync_status", models.CharField(default="pending", max_length=20)),
                ("error_count", models.IntegerField(default=0)),
                ("last_error", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Dashboard Data Source",
                "verbose_name_plural": "Dashboard Data Sources",
                "db_table": "dashboard_data_sources",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DashboardExport",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "export_type",
                    models.CharField(
                        choices=[
                            ("pdf", "PDF Report"),
                            ("image", "Image Export"),
                            ("data", "Data Export"),
                            ("link", "Shareable Link"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        choices=[
                            ("pdf", "PDF"),
                            ("png", "PNG Image"),
                            ("jpg", "JPEG Image"),
                            ("csv", "CSV Data"),
                            ("excel", "Excel File"),
                            ("json", "JSON Data"),
                        ],
                        max_length=20,
                    ),
                ),
                ("include_data", models.BooleanField(default=True)),
                ("include_charts", models.BooleanField(default=True)),
                ("date_range", models.JSONField(default=dict)),
                ("file_path", models.CharField(blank=True, max_length=500)),
                ("file_size", models.BigIntegerField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("progress_percentage", models.IntegerField(default=0)),
                ("error_message", models.TextField(blank=True)),
                ("is_public", models.BooleanField(default=False)),
                ("access_token", models.CharField(blank=True, max_length=64)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("download_count", models.IntegerField(default=0)),
            ],
            options={
                "verbose_name": "Dashboard Export",
                "verbose_name_plural": "Dashboard Exports",
                "db_table": "dashboard_exports",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DashboardLayout",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("is_shared", models.BooleanField(default=False)),
                ("shared_with_roles", models.JSONField(default=list)),
                ("layout_config", models.JSONField(default=dict)),
                ("is_template", models.BooleanField(default=False)),
                ("is_default_for_role", models.CharField(blank=True, max_length=50)),
                ("is_active", models.BooleanField(default=True)),
                ("version", models.IntegerField(default=1)),
            ],
            options={
                "verbose_name": "Dashboard Layout",
                "verbose_name_plural": "Dashboard Layouts",
                "db_table": "dashboard_layouts",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DashboardTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("executive", "Executive Dashboard"),
                            ("sales", "Sales Dashboard"),
                            ("inventory", "Inventory Dashboard"),
                            ("customer", "Customer Dashboard"),
                            ("financial", "Financial Dashboard"),
                            ("operational", "Operational Dashboard"),
                            ("marketing", "Marketing Dashboard"),
                            ("support", "Support Dashboard"),
                        ],
                        max_length=20,
                    ),
                ),
                ("layout_config", models.JSONField(default=dict)),
                ("widgets_config", models.JSONField(default=list)),
                ("target_roles", models.JSONField(default=list)),
                (
                    "preview_image",
                    models.ImageField(blank=True, upload_to="dashboard_templates/"),
                ),
                ("tags", models.JSONField(default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("usage_count", models.IntegerField(default=0)),
            ],
            options={
                "verbose_name": "Dashboard Template",
                "verbose_name_plural": "Dashboard Templates",
                "db_table": "dashboard_templates",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DashboardUsageAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("session_id", models.CharField(max_length=40)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("view", "Dashboard View"),
                            ("widget_interact", "Widget Interaction"),
                            ("layout_change", "Layout Change"),
                            ("export", "Data Export"),
                            ("filter", "Filter Applied"),
                            ("refresh", "Data Refresh"),
                        ],
                        max_length=20,
                    ),
                ),
                ("metadata", models.JSONField(default=dict)),
                ("duration_seconds", models.IntegerField(blank=True, null=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Dashboard Usage Analytics",
                "verbose_name_plural": "Dashboard Usage Analytics",
                "db_table": "dashboard_usage_analytics",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DashboardUserPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("grid_size", models.IntegerField(default=12)),
                ("compact_mode", models.BooleanField(default=False)),
                (
                    "theme",
                    models.CharField(
                        choices=[
                            ("light", "Light Theme"),
                            ("dark", "Dark Theme"),
                            ("auto", "Auto (System)"),
                        ],
                        default="light",
                        max_length=10,
                    ),
                ),
                ("show_animations", models.BooleanField(default=True)),
                ("auto_refresh", models.BooleanField(default=True)),
                ("refresh_interval", models.IntegerField(default=300)),
                ("show_notifications", models.BooleanField(default=True)),
                (
                    "notification_position",
                    models.CharField(default="top-right", max_length=20),
                ),
                ("date_format", models.CharField(default="YYYY-MM-DD", max_length=20)),
                ("time_format", models.CharField(default="HH:mm:ss", max_length=20)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("currency", models.CharField(default="USD", max_length=10)),
                ("preferences", models.JSONField(default=dict)),
            ],
            options={
                "verbose_name": "Dashboard User Preference",
                "verbose_name_plural": "Dashboard User Preferences",
                "db_table": "dashboard_user_preferences",
            },
        ),
        migrations.CreateModel(
            name="DashboardWidget",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "widget_type",
                    models.CharField(
                        choices=[
                            ("metric", "Metric Card"),
                            ("chart", "Chart Widget"),
                            ("table", "Data Table"),
                            ("list", "List Widget"),
                            ("calendar", "Calendar Widget"),
                            ("map", "Map Widget"),
                            ("iframe", "External Content"),
                            ("custom", "Custom Widget"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "chart_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("line", "Line Chart"),
                            ("bar", "Bar Chart"),
                            ("pie", "Pie Chart"),
                            ("doughnut", "Doughnut Chart"),
                            ("area", "Area Chart"),
                            ("scatter", "Scatter Plot"),
                            ("radar", "Radar Chart"),
                            ("gauge", "Gauge Chart"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "size",
                    models.CharField(
                        choices=[
                            ("small", "Small (1x1)"),
                            ("medium", "Medium (2x1)"),
                            ("large", "Large (2x2)"),
                            ("wide", "Wide (3x1)"),
                            ("tall", "Tall (1x3)"),
                            ("extra_large", "Extra Large (3x2)"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("data_source", models.CharField(max_length=100)),
                ("data_config", models.JSONField(default=dict)),
                ("refresh_interval", models.IntegerField(default=300)),
                ("display_config", models.JSONField(default=dict)),
                ("chart_config", models.JSONField(default=dict)),
                ("is_public", models.BooleanField(default=False)),
                ("allowed_roles", models.JSONField(default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("is_system_widget", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Dashboard Widget",
                "verbose_name_plural": "Dashboard Widgets",
                "db_table": "dashboard_widgets",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DashboardWidgetPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("x", models.IntegerField(default=0)),
                ("y", models.IntegerField(default=0)),
                ("width", models.IntegerField(default=2)),
                ("height", models.IntegerField(default=2)),
                ("widget_config", models.JSONField(default=dict)),
                ("is_visible", models.BooleanField(default=True)),
                ("order", models.IntegerField(default=0)),
            ],
            options={
                "verbose_name": "Dashboard Widget Position",
                "verbose_name_plural": "Dashboard Widget Positions",
                "db_table": "dashboard_widget_positions",
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="InventoryAdjustment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("adjustment_number", models.CharField(max_length=50, unique=True)),
                (
                    "adjustment_type",
                    models.CharField(
                        choices=[
                            ("increase", "Increase"),
                            ("decrease", "Decrease"),
                            ("correction", "Correction"),
                            ("write_off", "Write Off"),
                            ("found", "Found Stock"),
                            ("damaged", "Damaged"),
                            ("expired", "Expired"),
                            ("stolen", "Stolen/Lost"),
                            ("cycle_count", "Cycle Count"),
                            ("physical_count", "Physical Count"),
                        ],
                        max_length=50,
                    ),
                ),
                ("quantity_before", models.IntegerField()),
                ("quantity_after", models.IntegerField()),
                ("adjustment_quantity", models.IntegerField()),
                ("reason_code", models.CharField(max_length=50)),
                ("reason_description", models.TextField()),
                ("supporting_documents", models.JSONField(blank=True, default=list)),
                ("unit_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "total_cost_impact",
                    models.DecimalField(decimal_places=2, max_digits=15),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Approval"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("applied", "Applied"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("requested_date", models.DateTimeField(auto_now_add=True)),
                ("approved_date", models.DateTimeField(blank=True, null=True)),
                ("applied_date", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("reference_number", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "verbose_name": "Inventory Adjustment",
                "verbose_name_plural": "Inventory Adjustments",
                "db_table": "inventory_adjustments",
            },
        ),
        migrations.CreateModel(
            name="InventoryAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("alert_number", models.CharField(max_length=50, unique=True)),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("low_stock", "Low Stock"),
                            ("out_of_stock", "Out of Stock"),
                            ("overstock", "Overstock"),
                            ("expiring_soon", "Expiring Soon"),
                            ("expired", "Expired"),
                            ("damaged", "Damaged Items"),
                            ("slow_moving", "Slow Moving"),
                            ("fast_moving", "Fast Moving"),
                            ("reorder_point", "Reorder Point Reached"),
                            ("quality_issue", "Quality Issue"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("current_value", models.DecimalField(decimal_places=2, max_digits=15)),
                (
                    "threshold_value",
                    models.DecimalField(decimal_places=2, max_digits=15),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("acknowledged", "Acknowledged"),
                            ("resolved", "Resolved"),
                            ("dismissed", "Dismissed"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("triggered_date", models.DateTimeField(auto_now_add=True)),
                ("acknowledged_date", models.DateTimeField(blank=True, null=True)),
                ("resolved_date", models.DateTimeField(blank=True, null=True)),
                ("auto_actions_taken", models.JSONField(blank=True, default=list)),
                ("notifications_sent", models.JSONField(blank=True, default=list)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("notes", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Inventory Alert",
                "verbose_name_plural": "Inventory Alerts",
                "db_table": "inventory_alerts",
            },
        ),
        migrations.CreateModel(
            name="InventoryAudit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("audit_number", models.CharField(max_length=50, unique=True)),
                (
                    "audit_type",
                    models.CharField(
                        choices=[
                            ("cycle_count", "Cycle Count"),
                            ("physical_count", "Physical Count"),
                            ("spot_check", "Spot Check"),
                            ("annual_audit", "Annual Audit"),
                            ("quality_audit", "Quality Audit"),
                            ("compliance_audit", "Compliance Audit"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Planned"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("on_hold", "On Hold"),
                        ],
                        default="planned",
                        max_length=20,
                    ),
                ),
                ("planned_date", models.DateField()),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("total_items_counted", models.PositiveIntegerField(default=0)),
                ("items_with_variances", models.PositiveIntegerField(default=0)),
                (
                    "total_variance_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "accuracy_percentage",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("notes", models.TextField(blank=True)),
                ("findings", models.TextField(blank=True)),
                ("recommendations", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Inventory Audit",
                "verbose_name_plural": "Inventory Audits",
                "db_table": "inventory_audits",
            },
        ),
        migrations.CreateModel(
            name="InventoryAuditItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("system_quantity", models.IntegerField()),
                ("counted_quantity", models.IntegerField()),
                ("variance_quantity", models.IntegerField()),
                (
                    "variance_percentage",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                ("unit_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "variance_value",
                    models.DecimalField(decimal_places=2, max_digits=15),
                ),
                ("count_date", models.DateTimeField()),
                ("recount_required", models.BooleanField(default=False)),
                ("recount_completed", models.BooleanField(default=False)),
                ("condition_notes", models.TextField(blank=True)),
                ("discrepancy_reason", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Inventory Audit Item",
                "verbose_name_plural": "Inventory Audit Items",
                "db_table": "inventory_audit_items",
            },
        ),
        migrations.CreateModel(
            name="InventoryForecast",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("forecast_number", models.CharField(max_length=50, unique=True)),
                (
                    "forecast_type",
                    models.CharField(
                        choices=[
                            ("demand", "Demand Forecast"),
                            ("supply", "Supply Forecast"),
                            ("reorder", "Reorder Forecast"),
                            ("seasonal", "Seasonal Forecast"),
                            ("promotional", "Promotional Forecast"),
                        ],
                        max_length=20,
                    ),
                ),
                ("forecast_date", models.DateField()),
                ("period_start", models.DateField()),
                ("period_end", models.DateField()),
                ("predicted_demand", models.PositiveIntegerField()),
                (
                    "confidence_level",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                ("recommended_order_quantity", models.PositiveIntegerField()),
                ("recommended_reorder_point", models.PositiveIntegerField()),
                ("recommended_safety_stock", models.PositiveIntegerField()),
                ("forecasting_model", models.CharField(max_length=100)),
                ("model_parameters", models.JSONField(blank=True, default=dict)),
                ("historical_data_points", models.PositiveIntegerField()),
                ("actual_demand", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "forecast_accuracy",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("external_factors", models.JSONField(blank=True, default=list)),
            ],
            options={
                "verbose_name": "Inventory Forecast",
                "verbose_name_plural": "Inventory Forecasts",
                "db_table": "inventory_forecasts",
            },
        ),
        migrations.CreateModel(
            name="InventoryItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "serial_number",
                    models.CharField(blank=True, max_length=100, unique=True),
                ),
                ("lot_number", models.CharField(blank=True, max_length=100)),
                ("batch_number", models.CharField(blank=True, max_length=100)),
                ("quantity", models.PositiveIntegerField(default=1)),
                ("reserved_quantity", models.PositiveIntegerField(default=0)),
                (
                    "condition",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("damaged", "Damaged"),
                            ("defective", "Defective"),
                            ("expired", "Expired"),
                            ("quarantined", "Quarantined"),
                        ],
                        default="new",
                        max_length=50,
                    ),
                ),
                (
                    "quality_grade",
                    models.CharField(
                        choices=[
                            ("A", "Grade A"),
                            ("B", "Grade B"),
                            ("C", "Grade C"),
                            ("D", "Grade D"),
                        ],
                        default="A",
                        max_length=10,
                    ),
                ),
                ("manufactured_date", models.DateField(blank=True, null=True)),
                ("expiry_date", models.DateField(blank=True, null=True)),
                ("received_date", models.DateField(auto_now_add=True)),
                ("unit_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "landed_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "purchase_order_reference",
                    models.CharField(blank=True, max_length=100),
                ),
                ("is_available", models.BooleanField(default=True)),
                ("is_quarantined", models.BooleanField(default=False)),
                ("quarantine_reason", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Inventory Item",
                "verbose_name_plural": "Inventory Items",
                "db_table": "inventory_items",
            },
        ),
        migrations.CreateModel(
            name="InventoryLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("zone", models.CharField(max_length=50)),
                ("aisle", models.CharField(max_length=50)),
                ("shelf", models.CharField(max_length=50)),
                ("bin", models.CharField(blank=True, max_length=50)),
                ("location_code", models.CharField(max_length=100, unique=True)),
                ("capacity", models.PositiveIntegerField(default=100)),
                ("current_utilization", models.PositiveIntegerField(default=0)),
                (
                    "location_type",
                    models.CharField(
                        choices=[
                            ("standard", "Standard"),
                            ("cold_storage", "Cold Storage"),
                            ("hazardous", "Hazardous Materials"),
                            ("high_value", "High Value Items"),
                            ("bulk", "Bulk Storage"),
                            ("picking", "Picking Location"),
                            ("receiving", "Receiving Area"),
                            ("shipping", "Shipping Area"),
                            ("quarantine", "Quarantine"),
                        ],
                        default="standard",
                        max_length=50,
                    ),
                ),
                ("temperature_range", models.JSONField(blank=True, default=dict)),
                ("humidity_range", models.JSONField(blank=True, default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("is_blocked", models.BooleanField(default=False)),
                ("blocked_reason", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Inventory Location",
                "verbose_name_plural": "Inventory Locations",
                "db_table": "inventory_locations",
            },
        ),
        migrations.CreateModel(
            name="InventoryOptimization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("analysis_number", models.CharField(max_length=50, unique=True)),
                (
                    "analysis_type",
                    models.CharField(
                        choices=[
                            ("abc", "ABC Analysis"),
                            ("xyz", "XYZ Analysis"),
                            ("slow_moving", "Slow Moving Analysis"),
                            ("fast_moving", "Fast Moving Analysis"),
                            ("dead_stock", "Dead Stock Analysis"),
                            ("turnover", "Turnover Analysis"),
                        ],
                        max_length=20,
                    ),
                ),
                ("analysis_date", models.DateField()),
                ("period_start", models.DateField()),
                ("period_end", models.DateField()),
                ("total_products_analyzed", models.PositiveIntegerField()),
                (
                    "total_value_analyzed",
                    models.DecimalField(decimal_places=2, max_digits=15),
                ),
                ("category_a_count", models.PositiveIntegerField(default=0)),
                ("category_b_count", models.PositiveIntegerField(default=0)),
                ("category_c_count", models.PositiveIntegerField(default=0)),
                (
                    "category_a_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "category_b_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "category_c_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("recommendations", models.TextField(blank=True)),
                ("action_items", models.JSONField(blank=True, default=list)),
                ("methodology", models.TextField(blank=True)),
                ("parameters", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "verbose_name": "Inventory Optimization",
                "verbose_name_plural": "Inventory Optimizations",
                "db_table": "inventory_optimizations",
            },
        ),
        migrations.CreateModel(
            name="InventoryOptimizationItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "abc_category",
                    models.CharField(
                        blank=True,
                        choices=[("A", "A"), ("B", "B"), ("C", "C")],
                        max_length=1,
                    ),
                ),
                (
                    "xyz_category",
                    models.CharField(
                        blank=True,
                        choices=[("X", "X"), ("Y", "Y"), ("Z", "Z")],
                        max_length=1,
                    ),
                ),
                (
                    "annual_usage_value",
                    models.DecimalField(decimal_places=2, max_digits=15),
                ),
                ("annual_usage_quantity", models.PositiveIntegerField()),
                ("turnover_rate", models.DecimalField(decimal_places=2, max_digits=8)),
                ("days_of_supply", models.DecimalField(decimal_places=2, max_digits=8)),
                (
                    "current_stock_value",
                    models.DecimalField(decimal_places=2, max_digits=15),
                ),
                ("current_stock_quantity", models.PositiveIntegerField()),
                ("last_movement_date", models.DateField(blank=True, null=True)),
                (
                    "days_since_last_movement",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("recommended_action", models.CharField(blank=True, max_length=100)),
                (
                    "recommended_stock_level",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "potential_savings",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("is_slow_moving", models.BooleanField(default=False)),
                ("is_dead_stock", models.BooleanField(default=False)),
                ("is_overstocked", models.BooleanField(default=False)),
                ("is_understocked", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Inventory Optimization Item",
                "verbose_name_plural": "Inventory Optimization Items",
                "db_table": "inventory_optimization_items",
            },
        ),
        migrations.CreateModel(
            name="InventoryReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("report_number", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("stock_levels", "Stock Levels Report"),
                            ("valuation", "Inventory Valuation Report"),
                            ("movement", "Inventory Movement Report"),
                            ("aging", "Inventory Aging Report"),
                            ("turnover", "Inventory Turnover Report"),
                            ("variance", "Inventory Variance Report"),
                            ("forecast", "Inventory Forecast Report"),
                            ("optimization", "Inventory Optimization Report"),
                            ("alerts", "Inventory Alerts Report"),
                            ("audit", "Inventory Audit Report"),
                        ],
                        max_length=20,
                    ),
                ),
                ("parameters", models.JSONField(blank=True, default=dict)),
                ("filters", models.JSONField(blank=True, default=dict)),
                (
                    "format",
                    models.CharField(
                        choices=[
                            ("pdf", "PDF"),
                            ("excel", "Excel"),
                            ("csv", "CSV"),
                            ("json", "JSON"),
                        ],
                        default="pdf",
                        max_length=10,
                    ),
                ),
                (
                    "schedule_type",
                    models.CharField(
                        choices=[
                            ("once", "One Time"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                        ],
                        default="once",
                        max_length=20,
                    ),
                ),
                ("schedule_config", models.JSONField(blank=True, default=dict)),
                ("next_run", models.DateTimeField(blank=True, null=True)),
                ("last_run", models.DateTimeField(blank=True, null=True)),
                ("email_recipients", models.JSONField(blank=True, default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("total_runs", models.PositiveIntegerField(default=0)),
                ("successful_runs", models.PositiveIntegerField(default=0)),
                ("last_error", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Inventory Report",
                "verbose_name_plural": "Inventory Reports",
                "db_table": "inventory_reports",
            },
        ),
        migrations.CreateModel(
            name="InventoryReservation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("reservation_number", models.CharField(max_length=50, unique=True)),
                (
                    "reservation_type",
                    models.CharField(
                        choices=[
                            ("order", "Order Reservation"),
                            ("quote", "Quote Reservation"),
                            ("promotion", "Promotion Reservation"),
                            ("manual", "Manual Reservation"),
                            ("system", "System Reservation"),
                        ],
                        max_length=20,
                    ),
                ),
                ("quantity_reserved", models.PositiveIntegerField()),
                ("quantity_fulfilled", models.PositiveIntegerField(default=0)),
                ("object_id", models.CharField(blank=True, max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("fulfilled", "Fulfilled"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                            ("partial", "Partially Fulfilled"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("reserved_date", models.DateTimeField(auto_now_add=True)),
                ("expiry_date", models.DateTimeField()),
                ("fulfilled_date", models.DateTimeField(blank=True, null=True)),
                (
                    "priority",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("notes", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Inventory Reservation",
                "verbose_name_plural": "Inventory Reservations",
                "db_table": "inventory_reservations",
            },
        ),
        migrations.CreateModel(
            name="InventoryTransfer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("transfer_number", models.CharField(max_length=50, unique=True)),
                ("quantity_requested", models.PositiveIntegerField()),
                ("quantity_shipped", models.PositiveIntegerField(default=0)),
                ("quantity_received", models.PositiveIntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_transit", "In Transit"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("partial", "Partially Completed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("tracking_number", models.CharField(blank=True, max_length=100)),
                ("requested_date", models.DateTimeField(auto_now_add=True)),
                ("shipped_date", models.DateTimeField(blank=True, null=True)),
                ("expected_arrival_date", models.DateTimeField(blank=True, null=True)),
                ("received_date", models.DateTimeField(blank=True, null=True)),
                ("reason", models.TextField()),
                ("notes", models.TextField(blank=True)),
                (
                    "cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
            ],
            options={
                "verbose_name": "Inventory Transfer",
                "verbose_name_plural": "Inventory Transfers",
                "db_table": "inventory_transfers",
            },
        ),
        migrations.CreateModel(
            name="InventoryValuation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "costing_method",
                    models.CharField(
                        choices=[
                            ("fifo", "First In, First Out"),
                            ("lifo", "Last In, First Out"),
                            ("weighted_average", "Weighted Average"),
                            ("standard_cost", "Standard Cost"),
                            ("specific_identification", "Specific Identification"),
                        ],
                        max_length=50,
                    ),
                ),
                ("valuation_date", models.DateField(default=datetime.date.today)),
                ("total_quantity", models.PositiveIntegerField()),
                ("available_quantity", models.PositiveIntegerField()),
                ("reserved_quantity", models.PositiveIntegerField()),
                ("unit_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                ("total_value", models.DecimalField(decimal_places=2, max_digits=15)),
                ("average_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "material_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "labor_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "overhead_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "landed_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("calculation_method", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Inventory Valuation",
                "verbose_name_plural": "Inventory Valuations",
                "db_table": "inventory_valuations",
            },
        ),
        migrations.CreateModel(
            name="OrderAllocation",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("order_id", models.UUIDField(help_text="Reference to order ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("allocated", "Allocated"),
                            ("partially_allocated", "Partially Allocated"),
                            ("failed", "Failed"),
                            ("released", "Released"),
                        ],
                        default="pending",
                        max_length=30,
                    ),
                ),
                ("allocated_at", models.DateTimeField(blank=True, null=True)),
                (
                    "allocation_details",
                    models.JSONField(
                        default=dict,
                        help_text="Details of inventory allocation per item",
                    ),
                ),
                ("reservation_expires_at", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OrderDocument",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("order_id", models.UUIDField(help_text="Reference to order ID")),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("invoice", "Invoice"),
                            ("receipt", "Receipt"),
                            ("shipping_label", "Shipping Label"),
                            ("packing_slip", "Packing Slip"),
                            ("return_label", "Return Label"),
                            ("customs_declaration", "Customs Declaration"),
                            ("delivery_confirmation", "Delivery Confirmation"),
                            ("other", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("file_path", models.CharField(max_length=500)),
                (
                    "file_size",
                    models.PositiveIntegerField(help_text="File size in bytes"),
                ),
                ("mime_type", models.CharField(max_length=100)),
                ("is_customer_accessible", models.BooleanField(default=False)),
                ("download_count", models.PositiveIntegerField(default=0)),
                ("last_downloaded_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OrderEscalation",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("order_id", models.UUIDField(help_text="Reference to order ID")),
                (
                    "escalation_type",
                    models.CharField(
                        choices=[
                            ("payment_issue", "Payment Issue"),
                            ("inventory_shortage", "Inventory Shortage"),
                            ("shipping_delay", "Shipping Delay"),
                            ("customer_complaint", "Customer Complaint"),
                            ("fraud_alert", "Fraud Alert"),
                            ("system_error", "System Error"),
                            ("manual_review", "Manual Review Required"),
                            ("other", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("in_progress", "In Progress"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                        ],
                        default="open",
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("resolution_notes", models.TextField(blank=True)),
                ("sla_deadline", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-priority", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OrderFraudScore",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("order_id", models.UUIDField(help_text="Reference to order ID")),
                (
                    "score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low Risk"),
                            ("medium", "Medium Risk"),
                            ("high", "High Risk"),
                            ("critical", "Critical Risk"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "risk_factors",
                    models.JSONField(help_text="List of identified risk factors"),
                ),
                ("is_flagged", models.BooleanField(default=False)),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("review_notes", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["-score", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OrderNote",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("order_id", models.UUIDField(help_text="Reference to order ID")),
                (
                    "note_type",
                    models.CharField(
                        choices=[
                            ("internal", "Internal Note"),
                            ("customer", "Customer Communication"),
                            ("system", "System Generated"),
                            ("escalation", "Escalation Note"),
                        ],
                        default="internal",
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                ("is_important", models.BooleanField(default=False)),
                ("is_customer_visible", models.BooleanField(default=False)),
                (
                    "attachments",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of attachment file paths",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OrderProfitability",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("order_id", models.UUIDField(help_text="Reference to order ID")),
                ("gross_revenue", models.DecimalField(decimal_places=2, max_digits=12)),
                ("net_revenue", models.DecimalField(decimal_places=2, max_digits=12)),
                (
                    "product_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "shipping_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "payment_processing_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "packaging_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "handling_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "marketing_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "other_costs",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "total_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "gross_profit",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "net_profit",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "profit_margin_percentage",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "cost_breakdown",
                    models.JSONField(default=dict, help_text="Detailed cost breakdown"),
                ),
                ("calculated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Order Profitabilities",
            },
        ),
        migrations.CreateModel(
            name="OrderQualityControl",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("order_id", models.UUIDField(help_text="Reference to order ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Inspection"),
                            ("in_progress", "In Progress"),
                            ("passed", "Passed"),
                            ("failed", "Failed"),
                            ("conditional_pass", "Conditional Pass"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("inspection_date", models.DateTimeField(blank=True, null=True)),
                (
                    "checklist",
                    models.JSONField(
                        default=dict, help_text="Quality control checklist items"
                    ),
                ),
                (
                    "issues_found",
                    models.JSONField(
                        default=list, help_text="List of issues found during inspection"
                    ),
                ),
                (
                    "corrective_actions",
                    models.JSONField(
                        default=list, help_text="Corrective actions taken"
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("requires_reinspection", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Order Quality Control",
                "verbose_name_plural": "Order Quality Controls",
            },
        ),
        migrations.CreateModel(
            name="OrderSearchFilter",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("filters", models.JSONField(help_text="Saved filter criteria")),
                (
                    "is_public",
                    models.BooleanField(
                        default=False, help_text="Available to all admin users"
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="OrderSLA",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("order_id", models.UUIDField(help_text="Reference to order ID")),
                ("processing_deadline", models.DateTimeField(blank=True, null=True)),
                ("shipping_deadline", models.DateTimeField(blank=True, null=True)),
                ("delivery_deadline", models.DateTimeField(blank=True, null=True)),
                (
                    "processing_completed_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("shipping_completed_at", models.DateTimeField(blank=True, null=True)),
                ("delivery_completed_at", models.DateTimeField(blank=True, null=True)),
                ("processing_sla_met", models.BooleanField(blank=True, null=True)),
                ("shipping_sla_met", models.BooleanField(blank=True, null=True)),
                ("delivery_sla_met", models.BooleanField(blank=True, null=True)),
                ("overall_sla_met", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Order SLA",
                "verbose_name_plural": "Order SLAs",
            },
        ),
        migrations.CreateModel(
            name="OrderSubscription",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "original_order_id",
                    models.UUIDField(help_text="Reference to original order ID"),
                ),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("weekly", "Weekly"),
                            ("biweekly", "Bi-weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("yearly", "Yearly"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("cancelled", "Cancelled"),
                            ("expired", "Expired"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("next_order_date", models.DateField()),
                ("last_order_date", models.DateField(blank=True, null=True)),
                ("total_orders_generated", models.PositiveIntegerField(default=0)),
                (
                    "max_orders",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of orders to generate",
                        null=True,
                    ),
                ),
                ("subscription_start_date", models.DateField()),
                ("subscription_end_date", models.DateField(blank=True, null=True)),
                (
                    "items_config",
                    models.JSONField(help_text="Configuration for subscription items"),
                ),
                ("shipping_address", models.JSONField()),
                ("billing_address", models.JSONField()),
                ("payment_method", models.CharField(max_length=50)),
                ("paused_at", models.DateTimeField(blank=True, null=True)),
                ("pause_reason", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OrderWorkflow",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField()),
                (
                    "from_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("shipped", "Shipped"),
                            ("delivered", "Delivered"),
                            ("cancelled", "Cancelled"),
                            ("returned", "Returned"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "to_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("shipped", "Shipped"),
                            ("delivered", "Delivered"),
                            ("cancelled", "Cancelled"),
                            ("returned", "Returned"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(
                        help_text="Conditions that must be met for this workflow"
                    ),
                ),
                (
                    "actions",
                    models.JSONField(
                        help_text="Actions to perform when workflow is triggered"
                    ),
                ),
                ("is_automatic", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "priority",
                    models.IntegerField(
                        default=0,
                        help_text="Higher priority workflows are processed first",
                    ),
                ),
            ],
            options={
                "ordering": ["-priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="ProductAttribute",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("display_name", models.CharField(max_length=100)),
                (
                    "attribute_type",
                    models.CharField(
                        choices=[
                            ("text", "Text"),
                            ("number", "Number"),
                            ("color", "Color"),
                            ("size", "Size"),
                            ("boolean", "Boolean"),
                            ("select", "Select"),
                        ],
                        default="text",
                        max_length=20,
                    ),
                ),
                ("is_required", models.BooleanField(default=False)),
                ("is_variant_attribute", models.BooleanField(default=True)),
                ("sort_order", models.IntegerField(default=0)),
            ],
            options={
                "db_table": "product_attributes",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="ProductBundle",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "bundle_type",
                    models.CharField(
                        choices=[
                            ("fixed", "Fixed Bundle"),
                            ("dynamic", "Dynamic Bundle"),
                            ("kit", "Product Kit"),
                        ],
                        default="fixed",
                        max_length=20,
                    ),
                ),
                (
                    "pricing_type",
                    models.CharField(
                        choices=[
                            ("fixed", "Fixed Price"),
                            ("sum", "Sum of Products"),
                            ("discount", "Discount from Sum"),
                        ],
                        default="sum",
                        max_length=20,
                    ),
                ),
                (
                    "fixed_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "discount_percentage",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "db_table": "product_bundles",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PurchaseOrder",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("po_number", models.CharField(max_length=50, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("pending_approval", "Pending Approval"),
                            ("approved", "Approved"),
                            ("sent", "Sent to Supplier"),
                            ("acknowledged", "Acknowledged by Supplier"),
                            ("in_progress", "In Progress"),
                            ("partially_received", "Partially Received"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("disputed", "Disputed"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=10,
                    ),
                ),
                ("order_date", models.DateField(default=django.utils.timezone.now)),
                ("required_date", models.DateField()),
                ("expected_delivery_date", models.DateField(blank=True, null=True)),
                ("delivered_date", models.DateField(blank=True, null=True)),
                (
                    "subtotal",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=12
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=12
                    ),
                ),
                (
                    "shipping_amount",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=12
                    ),
                ),
                (
                    "discount_amount",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=12
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=12
                    ),
                ),
                ("delivery_address", models.JSONField(default=dict)),
                ("shipping_method", models.CharField(blank=True, max_length=100)),
                ("tracking_number", models.CharField(blank=True, max_length=100)),
                ("payment_terms", models.CharField(default="Net 30", max_length=100)),
                ("delivery_terms", models.CharField(blank=True, max_length=100)),
                ("warranty_terms", models.TextField(blank=True)),
                ("special_instructions", models.TextField(blank=True)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "last_communication_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("notes", models.TextField(blank=True)),
                ("attachments", models.JSONField(blank=True, default=list)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_pos",
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_pos",
                        to="admin_panel.adminuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "Purchase Order",
                "verbose_name_plural": "Purchase Orders",
                "db_table": "purchase_orders",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Supplier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("code", models.CharField(max_length=50, unique=True)),
                ("contact_person", models.CharField(blank=True, max_length=255)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("address", models.TextField(blank=True)),
                ("website", models.URLField(blank=True)),
                ("lead_time_days", models.PositiveIntegerField(default=7)),
                (
                    "reliability_rating",
                    models.DecimalField(decimal_places=2, default=5.0, max_digits=3),
                ),
                ("payment_terms", models.CharField(blank=True, max_length=255)),
                ("currency", models.CharField(default="USD", max_length=3)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Supplier",
                "verbose_name_plural": "Suppliers",
                "db_table": "suppliers",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SupplierCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="admin_panel.suppliercategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Supplier Category",
                "verbose_name_plural": "Supplier Categories",
                "db_table": "supplier_categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SupplierProfile",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("supplier_code", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(max_length=200)),
                ("legal_name", models.CharField(blank=True, max_length=200)),
                (
                    "supplier_type",
                    models.CharField(
                        choices=[
                            ("manufacturer", "Manufacturer"),
                            ("distributor", "Distributor"),
                            ("wholesaler", "Wholesaler"),
                            ("dropshipper", "Dropshipper"),
                            ("service_provider", "Service Provider"),
                            ("consultant", "Consultant"),
                            ("contractor", "Contractor"),
                        ],
                        max_length=20,
                    ),
                ),
                ("primary_contact_name", models.CharField(max_length=100)),
                ("primary_contact_email", models.EmailField(max_length=254)),
                (
                    "primary_contact_phone",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("address_line1", models.CharField(max_length=200)),
                ("address_line2", models.CharField(blank=True, max_length=200)),
                ("city", models.CharField(max_length=100)),
                ("state_province", models.CharField(max_length=100)),
                ("postal_code", models.CharField(max_length=20)),
                ("country", models.CharField(max_length=100)),
                ("tax_id", models.CharField(blank=True, max_length=50)),
                ("business_license", models.CharField(blank=True, max_length=100)),
                ("website", models.URLField(blank=True)),
                ("established_date", models.DateField(blank=True, null=True)),
                ("employee_count", models.IntegerField(blank=True, null=True)),
                (
                    "annual_revenue",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("pending", "Pending Approval"),
                            ("suspended", "Suspended"),
                            ("blacklisted", "Blacklisted"),
                            ("under_review", "Under Review"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low Risk"),
                            ("medium", "Medium Risk"),
                            ("high", "High Risk"),
                            ("critical", "Critical Risk"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("is_preferred", models.BooleanField(default=False)),
                ("is_certified", models.BooleanField(default=False)),
                ("is_minority_owned", models.BooleanField(default=False)),
                ("is_woman_owned", models.BooleanField(default=False)),
                ("is_veteran_owned", models.BooleanField(default=False)),
                (
                    "overall_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "quality_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "delivery_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "service_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "credit_limit",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=12
                    ),
                ),
                (
                    "current_balance",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=12
                    ),
                ),
                ("payment_terms_days", models.IntegerField(default=30)),
                (
                    "discount_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("lead_time_days", models.IntegerField(default=7)),
                (
                    "minimum_order_value",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "capacity_rating",
                    models.IntegerField(
                        default=100,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("iso_certified", models.BooleanField(default=False)),
                ("iso_certifications", models.JSONField(blank=True, default=list)),
                (
                    "compliance_status",
                    models.CharField(default="compliant", max_length=20),
                ),
                ("last_audit_date", models.DateField(blank=True, null=True)),
                ("next_audit_date", models.DateField(blank=True, null=True)),
                (
                    "sustainability_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("carbon_footprint_score", models.IntegerField(blank=True, null=True)),
                (
                    "social_responsibility_score",
                    models.IntegerField(blank=True, null=True),
                ),
                ("notes", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admin_panel.suppliercategory",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_suppliers",
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "last_modified_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="modified_suppliers",
                        to="admin_panel.adminuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "Supplier Profile",
                "verbose_name_plural": "Supplier Profiles",
                "db_table": "supplier_profiles",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Warehouse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("code", models.CharField(max_length=50, unique=True)),
                ("location", models.CharField(max_length=255)),
                ("address", models.TextField()),
                ("contact_person", models.CharField(blank=True, max_length=255)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("capacity", models.PositiveIntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Warehouse",
                "verbose_name_plural": "Warehouses",
                "db_table": "warehouses",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SystemSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("key", models.CharField(max_length=100, unique=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("value", models.TextField()),
                ("default_value", models.TextField(blank=True)),
                (
                    "setting_type",
                    models.CharField(
                        choices=[
                            ("string", "String"),
                            ("integer", "Integer"),
                            ("float", "Float"),
                            ("boolean", "Boolean"),
                            ("json", "JSON"),
                            ("text", "Text"),
                            ("email", "Email"),
                            ("url", "URL"),
                            ("password", "Password"),
                            ("file", "File"),
                        ],
                        default="string",
                        max_length=20,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("general", "General Settings"),
                            ("email", "Email Configuration"),
                            ("sms", "SMS Configuration"),
                            ("payment", "Payment Settings"),
                            ("shipping", "Shipping Settings"),
                            ("tax", "Tax Configuration"),
                            ("security", "Security Settings"),
                            ("performance", "Performance Settings"),
                            ("seo", "SEO Settings"),
                            ("social", "Social Media"),
                            ("analytics", "Analytics"),
                            ("backup", "Backup Settings"),
                            ("maintenance", "Maintenance"),
                            ("api", "API Configuration"),
                            ("integration", "Third-party Integrations"),
                        ],
                        max_length=50,
                    ),
                ),
                ("subcategory", models.CharField(blank=True, max_length=100)),
                ("validation_rules", models.JSONField(blank=True, default=dict)),
                ("options", models.JSONField(blank=True, default=list)),
                ("is_public", models.BooleanField(default=False)),
                ("is_encrypted", models.BooleanField(default=False)),
                ("requires_restart", models.BooleanField(default=False)),
                ("is_system_setting", models.BooleanField(default=False)),
                ("version", models.IntegerField(default=1)),
                (
                    "last_modified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admin_panel.adminuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "System Setting",
                "verbose_name_plural": "System Settings",
                "db_table": "system_settings",
                "ordering": ["category", "subcategory", "name"],
            },
        ),
        migrations.CreateModel(
            name="SupplierRiskAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment_date",
                    models.DateField(default=django.utils.timezone.now),
                ),
                (
                    "assessment_period",
                    models.CharField(default="annual", max_length=20),
                ),
                (
                    "overall_risk_level",
                    models.CharField(
                        choices=[
                            ("very_low", "Very Low"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("very_high", "Very High"),
                            ("critical", "Critical"),
                        ],
                        max_length=15,
                    ),
                ),
                (
                    "overall_risk_score",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "financial_risk_score",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=5
                    ),
                ),
                (
                    "operational_risk_score",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=5
                    ),
                ),
                (
                    "compliance_risk_score",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=5
                    ),
                ),
                (
                    "quality_risk_score",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=5
                    ),
                ),
                (
                    "delivery_risk_score",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=5
                    ),
                ),
                ("risk_factors", models.JSONField(blank=True, default=list)),
                ("mitigation_strategies", models.TextField(blank=True)),
                ("monitoring_requirements", models.TextField(blank=True)),
                ("credit_rating", models.CharField(blank=True, max_length=10)),
                (
                    "financial_stability_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "debt_to_equity_ratio",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=8, null=True
                    ),
                ),
                (
                    "regulatory_compliance_status",
                    models.CharField(default="compliant", max_length=20),
                ),
                (
                    "certification_status",
                    models.CharField(default="current", max_length=20),
                ),
                ("next_assessment_date", models.DateField(blank=True, null=True)),
                ("action_items", models.JSONField(blank=True, default=list)),
                (
                    "assessed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_risk_assessments",
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_assessments",
                        to="admin_panel.supplierprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Supplier Risk Assessment",
                "verbose_name_plural": "Supplier Risk Assessments",
                "db_table": "supplier_risk_assessments",
                "ordering": ["-assessment_date"],
            },
        ),
        migrations.CreateModel(
            name="SupplierQualification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "qualification_type",
                    models.CharField(
                        choices=[
                            ("initial", "Initial Qualification"),
                            ("requalification", "Re-qualification"),
                            ("certification", "Certification"),
                            ("pre_qualification", "Pre-qualification"),
                            ("vendor_assessment", "Vendor Assessment"),
                        ],
                        max_length=20,
                    ),
                ),
                ("qualification_number", models.CharField(max_length=50, unique=True)),
                ("start_date", models.DateField(default=django.utils.timezone.now)),
                ("completion_date", models.DateField(blank=True, null=True)),
                ("expiry_date", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("in_progress", "In Progress"),
                            ("qualified", "Qualified"),
                            ("not_qualified", "Not Qualified"),
                            ("conditionally_qualified", "Conditionally Qualified"),
                            ("expired", "Expired"),
                            ("suspended", "Suspended"),
                        ],
                        default="in_progress",
                        max_length=25,
                    ),
                ),
                (
                    "technical_capability_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "quality_system_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "financial_stability_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "delivery_performance_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "overall_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("requirements_checklist", models.JSONField(blank=True, default=dict)),
                ("required_documents", models.JSONField(blank=True, default=list)),
                ("submitted_documents", models.JSONField(blank=True, default=list)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("assessment_notes", models.TextField(blank=True)),
                ("conditions", models.TextField(blank=True)),
                ("recommendations", models.TextField(blank=True)),
                (
                    "approver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_qualifications",
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "assessor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assessed_qualifications",
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qualifications",
                        to="admin_panel.supplierprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Supplier Qualification",
                "verbose_name_plural": "Supplier Qualifications",
                "db_table": "supplier_qualifications",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="SupplierPerformanceMetric",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("delivery_time", "Delivery Time"),
                            ("quality_score", "Quality Score"),
                            ("service_rating", "Service Rating"),
                            ("cost_competitiveness", "Cost Competitiveness"),
                            ("communication", "Communication"),
                            ("flexibility", "Flexibility"),
                            ("innovation", "Innovation"),
                            ("sustainability", "Sustainability"),
                        ],
                        max_length=30,
                    ),
                ),
                ("value", models.DecimalField(decimal_places=3, max_digits=10)),
                (
                    "target_value",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "measurement_date",
                    models.DateField(default=django.utils.timezone.now),
                ),
                (
                    "measurement_period",
                    models.CharField(default="monthly", max_length=20),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "measured_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "purchase_order",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admin_panel.purchaseorder",
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="performance_metrics",
                        to="admin_panel.supplierprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Supplier Performance Metric",
                "verbose_name_plural": "Supplier Performance Metrics",
                "db_table": "supplier_performance_metrics",
                "ordering": ["-measurement_date"],
            },
        ),
        migrations.CreateModel(
            name="SupplierPayment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("payment_number", models.CharField(max_length=50, unique=True)),
                ("invoice_number", models.CharField(blank=True, max_length=100)),
                ("invoice_date", models.DateField(blank=True, null=True)),
                (
                    "invoice_amount",
                    models.DecimalField(decimal_places=2, max_digits=12),
                ),
                (
                    "discount_amount",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=12
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=12
                    ),
                ),
                ("net_amount", models.DecimalField(decimal_places=2, max_digits=12)),
                (
                    "paid_amount",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=12
                    ),
                ),
                ("payment_terms", models.CharField(max_length=100)),
                ("due_date", models.DateField()),
                ("payment_date", models.DateField(blank=True, null=True)),
                (
                    "payment_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("bank_transfer", "Bank Transfer"),
                            ("check", "Check"),
                            ("credit_card", "Credit Card"),
                            ("ach", "ACH Transfer"),
                            ("wire_transfer", "Wire Transfer"),
                            ("paypal", "PayPal"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("payment_reference", models.CharField(blank=True, max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("paid", "Paid"),
                            ("partially_paid", "Partially Paid"),
                            ("overdue", "Overdue"),
                            ("disputed", "Disputed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=15,
                    ),
                ),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "invoice_file",
                    models.FileField(
                        blank=True, null=True, upload_to="supplier_invoices/"
                    ),
                ),
                (
                    "payment_receipt",
                    models.FileField(
                        blank=True, null=True, upload_to="payment_receipts/"
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("currency", models.CharField(default="USD", max_length=3)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_payments",
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_payments",
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "purchase_order",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admin_panel.purchaseorder",
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="admin_panel.supplierprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Supplier Payment",
                "verbose_name_plural": "Supplier Payments",
                "db_table": "supplier_payments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SupplierDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("business_license", "Business License"),
                            ("tax_certificate", "Tax Certificate"),
                            ("insurance_certificate", "Insurance Certificate"),
                            ("quality_certificate", "Quality Certificate"),
                            ("iso_certificate", "ISO Certificate"),
                            ("contract", "Contract"),
                            ("nda", "Non-Disclosure Agreement"),
                            ("w9_form", "W-9 Form"),
                            ("bank_details", "Bank Details"),
                            ("product_catalog", "Product Catalog"),
                            ("price_list", "Price List"),
                            ("capability_statement", "Capability Statement"),
                            ("reference_letter", "Reference Letter"),
                            ("audit_report", "Audit Report"),
                            ("other", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("file", models.FileField(upload_to="supplier_documents/")),
                ("file_size", models.IntegerField(blank=True, null=True)),
                ("mime_type", models.CharField(blank=True, max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Review"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("expired", "Expired"),
                            ("requires_update", "Requires Update"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("is_required", models.BooleanField(default=False)),
                ("is_confidential", models.BooleanField(default=False)),
                ("issue_date", models.DateField(blank=True, null=True)),
                ("expiry_date", models.DateField(blank=True, null=True)),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("review_notes", models.TextField(blank=True)),
                ("version", models.IntegerField(default=1)),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="admin_panel.supplierprofile",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="uploaded_supplier_docs",
                        to="admin_panel.adminuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "Supplier Document",
                "verbose_name_plural": "Supplier Documents",
                "db_table": "supplier_documents",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SupplierContract",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "contract_type",
                    models.CharField(
                        choices=[
                            ("master_agreement", "Master Service Agreement"),
                            ("purchase_agreement", "Purchase Agreement"),
                            ("supply_agreement", "Supply Agreement"),
                            ("nda", "Non-Disclosure Agreement"),
                            ("quality_agreement", "Quality Agreement"),
                            ("service_agreement", "Service Agreement"),
                            ("consulting_agreement", "Consulting Agreement"),
                        ],
                        max_length=30,
                    ),
                ),
                ("contract_number", models.CharField(max_length=50, unique=True)),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("auto_renewal", models.BooleanField(default=False)),
                ("renewal_period_months", models.IntegerField(blank=True, null=True)),
                ("notice_period_days", models.IntegerField(default=30)),
                (
                    "contract_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                ("payment_terms", models.CharField(max_length=100)),
                ("currency", models.CharField(default="USD", max_length=3)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("under_review", "Under Review"),
                            ("approved", "Approved"),
                            ("active", "Active"),
                            ("expired", "Expired"),
                            ("terminated", "Terminated"),
                            ("renewed", "Renewed"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                (
                    "compliance_status",
                    models.CharField(default="compliant", max_length=20),
                ),
                ("last_review_date", models.DateField(blank=True, null=True)),
                ("next_review_date", models.DateField(blank=True, null=True)),
                (
                    "contract_file",
                    models.FileField(
                        blank=True, null=True, upload_to="supplier_contracts/"
                    ),
                ),
                (
                    "signed_file",
                    models.FileField(
                        blank=True, null=True, upload_to="supplier_contracts/signed/"
                    ),
                ),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("terms_and_conditions", models.TextField(blank=True)),
                ("special_clauses", models.JSONField(blank=True, default=list)),
                ("notes", models.TextField(blank=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_contracts",
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_contracts",
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contracts",
                        to="admin_panel.supplierprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Supplier Contract",
                "verbose_name_plural": "Supplier Contracts",
                "db_table": "supplier_contracts",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SupplierContact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "contact_type",
                    models.CharField(
                        choices=[
                            ("primary", "Primary Contact"),
                            ("sales", "Sales Representative"),
                            ("technical", "Technical Support"),
                            ("billing", "Billing Contact"),
                            ("shipping", "Shipping Contact"),
                            ("quality", "Quality Assurance"),
                            ("management", "Management"),
                            ("emergency", "Emergency Contact"),
                        ],
                        max_length=20,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("title", models.CharField(blank=True, max_length=100)),
                ("email", models.EmailField(max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("mobile", models.CharField(blank=True, max_length=20)),
                ("department", models.CharField(blank=True, max_length=100)),
                ("is_active", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "supplier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contacts",
                        to="admin_panel.supplierprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Supplier Contact",
                "verbose_name_plural": "Supplier Contacts",
                "db_table": "supplier_contacts",
            },
        ),
        migrations.CreateModel(
            name="SupplierCommunication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "communication_type",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("phone", "Phone Call"),
                            ("meeting", "Meeting"),
                            ("video_call", "Video Call"),
                            ("message", "Instant Message"),
                            ("letter", "Letter"),
                            ("fax", "Fax"),
                            ("portal", "Supplier Portal"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "direction",
                    models.CharField(
                        choices=[("inbound", "Inbound"), ("outbound", "Outbound")],
                        max_length=10,
                    ),
                ),
                ("subject", models.CharField(max_length=200)),
                ("content", models.TextField()),
                ("object_id", models.CharField(blank=True, max_length=100)),
                ("attachments", models.JSONField(blank=True, default=list)),
                ("is_important", models.BooleanField(default=False)),
                ("requires_follow_up", models.BooleanField(default=False)),
                ("follow_up_date", models.DateField(blank=True, null=True)),
                (
                    "admin_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "purchase_order",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admin_panel.purchaseorder",
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="communications",
                        to="admin_panel.supplierprofile",
                    ),
                ),
                (
                    "supplier_contact",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admin_panel.suppliercontact",
                    ),
                ),
            ],
            options={
                "verbose_name": "Supplier Communication",
                "verbose_name_plural": "Supplier Communications",
                "db_table": "supplier_communications",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SupplierAudit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "audit_type",
                    models.CharField(
                        choices=[
                            ("quality", "Quality Audit"),
                            ("compliance", "Compliance Audit"),
                            ("financial", "Financial Audit"),
                            ("security", "Security Audit"),
                            ("operational", "Operational Audit"),
                            ("sustainability", "Sustainability Audit"),
                            ("performance", "Performance Review"),
                        ],
                        max_length=20,
                    ),
                ),
                ("audit_number", models.CharField(max_length=50, unique=True)),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("planned_date", models.DateField()),
                ("actual_date", models.DateField(blank=True, null=True)),
                (
                    "duration_hours",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Planned"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("follow_up_required", "Follow-up Required"),
                        ],
                        default="planned",
                        max_length=20,
                    ),
                ),
                (
                    "overall_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("pass_fail_result", models.CharField(blank=True, max_length=10)),
                ("supplier_participants", models.JSONField(blank=True, default=list)),
                ("audit_checklist", models.JSONField(blank=True, default=dict)),
                ("findings", models.TextField(blank=True)),
                ("recommendations", models.TextField(blank=True)),
                ("corrective_actions", models.TextField(blank=True)),
                ("follow_up_required", models.BooleanField(default=False)),
                ("follow_up_date", models.DateField(blank=True, null=True)),
                ("next_audit_date", models.DateField(blank=True, null=True)),
                (
                    "audit_report",
                    models.FileField(
                        blank=True, null=True, upload_to="supplier_audits/"
                    ),
                ),
                ("attachments", models.JSONField(blank=True, default=list)),
                (
                    "audit_team",
                    models.ManyToManyField(
                        blank=True,
                        related_name="participated_audits",
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "lead_auditor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="led_audits",
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audits",
                        to="admin_panel.supplierprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Supplier Audit",
                "verbose_name_plural": "Supplier Audits",
                "db_table": "supplier_audits",
                "ordering": ["-planned_date"],
            },
        ),
        migrations.CreateModel(
            name="PurchaseOrderItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("line_number", models.IntegerField()),
                ("product_code", models.CharField(max_length=100)),
                ("product_name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("specifications", models.JSONField(blank=True, default=dict)),
                (
                    "quantity_ordered",
                    models.DecimalField(decimal_places=3, max_digits=10),
                ),
                (
                    "quantity_received",
                    models.DecimalField(
                        decimal_places=3, default=Decimal("0.000"), max_digits=10
                    ),
                ),
                ("unit_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("total_price", models.DecimalField(decimal_places=2, max_digits=12)),
                ("expected_date", models.DateField(blank=True, null=True)),
                ("received_date", models.DateField(blank=True, null=True)),
                ("quality_approved", models.BooleanField(default=False)),
                ("inspection_notes", models.TextField(blank=True)),
                (
                    "purchase_order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="admin_panel.purchaseorder",
                    ),
                ),
            ],
            options={
                "verbose_name": "Purchase Order Item",
                "verbose_name_plural": "Purchase Order Items",
                "db_table": "purchase_order_items",
                "ordering": ["line_number"],
            },
        ),
        migrations.AddField(
            model_name="purchaseorder",
            name="supplier",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="purchase_orders",
                to="admin_panel.supplierprofile",
            ),
        ),
        migrations.AddField(
            model_name="purchaseorder",
            name="supplier_contact",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="admin_panel.suppliercontact",
            ),
        ),
        migrations.CreateModel(
            name="ProductWarranty",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("warranty_period_months", models.IntegerField(default=12)),
                (
                    "warranty_type",
                    models.CharField(
                        choices=[
                            ("manufacturer", "Manufacturer Warranty"),
                            ("extended", "Extended Warranty"),
                            ("service", "Service Warranty"),
                            ("replacement", "Replacement Warranty"),
                        ],
                        default="manufacturer",
                        max_length=20,
                    ),
                ),
                ("coverage_details", models.JSONField(default=dict)),
                ("exclusions", models.JSONField(default=list)),
                ("service_provider", models.CharField(blank=True, max_length=200)),
                ("service_contact", models.JSONField(default=dict)),
                ("terms_and_conditions", models.TextField(blank=True)),
                (
                    "warranty_document",
                    models.FileField(blank=True, upload_to="warranties/"),
                ),
                (
                    "product",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="warranty",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "db_table": "product_warranties",
            },
        ),
        migrations.CreateModel(
            name="ProductVersion",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("version_number", models.CharField(max_length=20)),
                ("product_data", models.JSONField()),
                ("variant_data", models.JSONField(default=list)),
                ("image_data", models.JSONField(default=list)),
                ("change_summary", models.TextField()),
                ("change_details", models.JSONField(default=dict)),
                ("is_current", models.BooleanField(default=False)),
                ("is_published", models.BooleanField(default=False)),
                (
                    "changed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="versions",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "db_table": "product_versions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProductVariant",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("sku", models.CharField(max_length=100, unique=True)),
                ("barcode", models.CharField(blank=True, max_length=100)),
                (
                    "attributes",
                    models.JSONField(
                        default=dict,
                        help_text="Variant attributes like size, color, etc.",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "cost_price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "discount_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("dimensions", models.JSONField(blank=True, default=dict)),
                ("stock_quantity", models.IntegerField(default=0)),
                ("reserved_quantity", models.IntegerField(default=0)),
                ("reorder_level", models.IntegerField(default=10)),
                ("is_active", models.BooleanField(default=True)),
                ("is_default", models.BooleanField(default=False)),
                ("sort_order", models.IntegerField(default=0)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="variants",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "db_table": "product_variants",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="ProductTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "template_data",
                    models.JSONField(help_text="Default product data structure"),
                ),
                ("required_attributes", models.JSONField(default=list)),
                ("optional_attributes", models.JSONField(default=list)),
                ("auto_generate_sku", models.BooleanField(default=True)),
                ("sku_pattern", models.CharField(blank=True, max_length=100)),
                ("default_pricing_rules", models.JSONField(default=dict)),
                ("usage_count", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="templates",
                        to="products.category",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admin_panel.adminuser",
                    ),
                ),
            ],
            options={
                "db_table": "product_templates",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ProductSyndication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("channel_name", models.CharField(max_length=100)),
                (
                    "channel_type",
                    models.CharField(
                        choices=[
                            ("marketplace", "Marketplace"),
                            ("social", "Social Media"),
                            ("affiliate", "Affiliate Network"),
                            ("comparison", "Price Comparison"),
                            ("feed", "Product Feed"),
                            ("api", "API Integration"),
                        ],
                        max_length=20,
                    ),
                ),
                ("channel_url", models.URLField(blank=True)),
                ("sync_enabled", models.BooleanField(default=True)),
                (
                    "sync_frequency",
                    models.CharField(
                        choices=[
                            ("realtime", "Real-time"),
                            ("hourly", "Hourly"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("manual", "Manual"),
                        ],
                        default="daily",
                        max_length=20,
                    ),
                ),
                ("field_mapping", models.JSONField(default=dict)),
                ("transformation_rules", models.JSONField(default=dict)),
                (
                    "sync_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("syncing", "Syncing"),
                            ("synced", "Synced"),
                            ("error", "Error"),
                            ("disabled", "Disabled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("last_sync_date", models.DateTimeField(blank=True, null=True)),
                ("next_sync_date", models.DateTimeField(blank=True, null=True)),
                ("sync_error_message", models.TextField(blank=True)),
                ("external_id", models.CharField(blank=True, max_length=200)),
                ("external_url", models.URLField(blank=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="syndications",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "db_table": "product_syndications",
            },
        ),
        migrations.CreateModel(
            name="ProductRelationship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "relationship_type",
                    models.CharField(
                        choices=[
                            ("related", "Related Products"),
                            ("cross_sell", "Cross-sell"),
                            ("up_sell", "Up-sell"),
                            ("alternative", "Alternative"),
                            ("accessory", "Accessory"),
                            ("replacement", "Replacement"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=0, help_text="Higher priority items appear first"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "source_product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="relationships_from",
                        to="products.product",
                    ),
                ),
                (
                    "target_product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="relationships_to",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "db_table": "product_relationships",
                "ordering": ["-priority", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProductQuality",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "quality_status",
                    models.CharField(
                        choices=[
                            ("passed", "Quality Passed"),
                            ("failed", "Quality Failed"),
                            ("pending", "Quality Pending"),
                            ("recalled", "Recalled"),
                            ("quarantined", "Quarantined"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "quality_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "defect_rate",
                    models.DecimalField(decimal_places=4, default=0, max_digits=5),
                ),
                (
                    "return_rate",
                    models.DecimalField(decimal_places=4, default=0, max_digits=5),
                ),
                ("last_quality_check", models.DateTimeField(blank=True, null=True)),
                ("next_quality_check", models.DateTimeField(blank=True, null=True)),
                (
                    "quality_check_frequency",
                    models.IntegerField(
                        default=30, help_text="Days between quality checks"
                    ),
                ),
                ("certifications", models.JSONField(default=list)),
                ("compliance_status", models.JSONField(default=dict)),
                ("is_recalled", models.BooleanField(default=False)),
                ("recall_date", models.DateTimeField(blank=True, null=True)),
                ("recall_reason", models.TextField(blank=True)),
                (
                    "recall_severity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "product",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quality",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "db_table": "product_quality",
            },
        ),
        migrations.CreateModel(
            name="ProductLifecycle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "current_stage",
                    models.CharField(
                        choices=[
                            ("concept", "Concept"),
                            ("development", "Development"),
                            ("draft", "Draft"),
                            ("review", "Under Review"),
                            ("active", "Active"),
                            ("featured", "Featured"),
                            ("sale", "On Sale"),
                            ("discontinued", "Discontinued"),
                            ("archived", "Archived"),
                            ("recalled", "Recalled"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                (
                    "previous_stage",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("concept", "Concept"),
                            ("development", "Development"),
                            ("draft", "Draft"),
                            ("review", "Under Review"),
                            ("active", "Active"),
                            ("featured", "Featured"),
                            ("sale", "On Sale"),
                            ("discontinued", "Discontinued"),
                            ("archived", "Archived"),
                            ("recalled", "Recalled"),
                        ],
                        max_length=20,
                    ),
                ),
                ("concept_date", models.DateTimeField(blank=True, null=True)),
                ("development_date", models.DateTimeField(blank=True, null=True)),
                ("draft_date", models.DateTimeField(blank=True, null=True)),
                ("review_date", models.DateTimeField(blank=True, null=True)),
                ("active_date", models.DateTimeField(blank=True, null=True)),
                ("discontinued_date", models.DateTimeField(blank=True, null=True)),
                ("archived_date", models.DateTimeField(blank=True, null=True)),
                ("stage_notes", models.JSONField(blank=True, default=dict)),
                ("automated_transitions", models.BooleanField(default=False)),
                ("requires_approval", models.BooleanField(default=True)),
                ("approval_date", models.DateTimeField(blank=True, null=True)),
                ("approval_notes", models.TextField(blank=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admin_panel.adminuser",
                    ),
                ),
                (
                    "product",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lifecycle",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "db_table": "product_lifecycles",
            },
        ),
        migrations.CreateModel(
            name="ProductDigitalAsset",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "asset_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("video", "Video"),
                            ("document", "Document"),
                            ("3d_model", "3D Model"),
                            ("audio", "Audio"),
                            ("manual", "Manual"),
                            ("specification", "Specification"),
                            ("certificate", "Certificate"),
                        ],
                        max_length=20,
                    ),
                ),
                ("file", models.FileField(upload_to="product_assets/")),
                ("file_size", models.BigIntegerField(blank=True, null=True)),
                ("mime_type", models.CharField(blank=True, max_length=100)),
                ("metadata", models.JSONField(default=dict)),
                ("tags", models.JSONField(default=list)),
                ("is_public", models.BooleanField(default=True)),
                ("requires_authentication", models.BooleanField(default=False)),
                ("sort_order", models.IntegerField(default=0)),
                ("is_featured", models.BooleanField(default=False)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="digital_assets",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "db_table": "product_digital_assets",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="ProductBundleItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("quantity", models.PositiveIntegerField(default=1)),
                ("is_optional", models.BooleanField(default=False)),
                ("sort_order", models.IntegerField(default=0)),
                (
                    "bundle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="admin_panel.productbundle",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="products.product",
                    ),
                ),
                (
                    "variant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admin_panel.productvariant",
                    ),
                ),
            ],
            options={
                "db_table": "product_bundle_items",
                "ordering": ["sort_order"],
            },
        ),
        migrations.CreateModel(
            name="ProductAttributeValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("value", models.CharField(max_length=200)),
                ("display_value", models.CharField(max_length=200)),
                (
                    "color_code",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code for color attributes",
                        max_length=7,
                    ),
                ),
                ("sort_order", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="values",
                        to="admin_panel.productattribute",
                    ),
                ),
            ],
            options={
                "db_table": "product_attribute_values",
                "ordering": ["sort_order", "value"],
            },
        ),
        migrations.CreateModel(
            name="ProductAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("total_sales", models.IntegerField(default=0)),
                (
                    "total_revenue",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "total_profit",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("view_count", models.IntegerField(default=0)),
                (
                    "conversion_rate",
                    models.DecimalField(decimal_places=4, default=0, max_digits=5),
                ),
                (
                    "bounce_rate",
                    models.DecimalField(decimal_places=4, default=0, max_digits=5),
                ),
                ("sales_last_30_days", models.IntegerField(default=0)),
                (
                    "revenue_last_30_days",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("views_last_30_days", models.IntegerField(default=0)),
                (
                    "popularity_score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("category_rank", models.IntegerField(blank=True, null=True)),
                ("overall_rank", models.IntegerField(blank=True, null=True)),
                ("demand_forecast", models.JSONField(default=dict)),
                ("seasonal_trends", models.JSONField(default=dict)),
                ("last_calculated", models.DateTimeField(auto_now=True)),
                (
                    "product",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admin_analytics",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "db_table": "product_analytics",
            },
        ),
    ]
