# Generated by Django 4.2.23 on 2025-08-15 15:02

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ("products", "0002_productrating"),
        ("admin_panel", "0007_merge_20250815_0750"),
    ]

    operations = [
        migrations.CreateModel(
            name="DashboardAlert",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("threshold", "Threshold Alert"),
                            ("anomaly", "Anomaly Detection"),
                            ("system", "System Alert"),
                            ("business", "Business Alert"),
                            ("security", "Security Alert"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("critical", "Critical"),
                        ],
                        max_length=10,
                    ),
                ),
                ("data_source", models.CharField(max_length=100)),
                ("condition_config", models.JSONField(default=dict)),
                ("threshold_config", models.JSONField(default=dict)),
                ("recipient_roles", models.JSONField(default=list)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("acknowledged", "Acknowledged"),
                            ("resolved", "Resolved"),
                            ("dismissed", "Dismissed"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("last_triggered", models.DateTimeField(blank=True, null=True)),
                ("trigger_count", models.IntegerField(default=0)),
                ("is_enabled", models.BooleanField(default=True)),
                ("cooldown_minutes", models.IntegerField(default=60)),
            ],
            options={
                "verbose_name": "Dashboard Alert",
                "verbose_name_plural": "Dashboard Alerts",
                "db_table": "dashboard_alerts",
                "ordering": ["-last_triggered"],
            },
        ),
        migrations.CreateModel(
            name="DashboardDataSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("api", "REST API"),
                            ("database", "Database Query"),
                            ("file", "File Upload"),
                            ("webhook", "Webhook"),
                            ("realtime", "Real-time Stream"),
                        ],
                        max_length=20,
                    ),
                ),
                ("endpoint_url", models.URLField(blank=True)),
                (
                    "auth_type",
                    models.CharField(
                        choices=[
                            ("none", "No Authentication"),
                            ("basic", "Basic Auth"),
                            ("bearer", "Bearer Token"),
                            ("oauth2", "OAuth 2.0"),
                            ("api_key", "API Key"),
                        ],
                        default="none",
                        max_length=20,
                    ),
                ),
                ("auth_config", models.JSONField(default=dict)),
                ("data_mapping", models.JSONField(default=dict)),
                ("refresh_interval", models.IntegerField(default=300)),
                ("cache_duration", models.IntegerField(default=300)),
                ("is_active", models.BooleanField(default=True)),
                ("last_sync", models.DateTimeField(blank=True, null=True)),
                ("sync_status", models.CharField(default="pending", max_length=20)),
                ("error_count", models.IntegerField(default=0)),
                ("last_error", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Dashboard Data Source",
                "verbose_name_plural": "Dashboard Data Sources",
                "db_table": "dashboard_data_sources",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DashboardExport",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "export_type",
                    models.CharField(
                        choices=[
                            ("pdf", "PDF Report"),
                            ("image", "Image Export"),
                            ("data", "Data Export"),
                            ("link", "Shareable Link"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        choices=[
                            ("pdf", "PDF"),
                            ("png", "PNG Image"),
                            ("jpg", "JPEG Image"),
                            ("csv", "CSV Data"),
                            ("excel", "Excel File"),
                            ("json", "JSON Data"),
                        ],
                        max_length=20,
                    ),
                ),
                ("include_data", models.BooleanField(default=True)),
                ("include_charts", models.BooleanField(default=True)),
                ("date_range", models.JSONField(default=dict)),
                ("file_path", models.CharField(blank=True, max_length=500)),
                ("file_size", models.BigIntegerField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("progress_percentage", models.IntegerField(default=0)),
                ("error_message", models.TextField(blank=True)),
                ("is_public", models.BooleanField(default=False)),
                ("access_token", models.CharField(blank=True, max_length=64)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("download_count", models.IntegerField(default=0)),
            ],
            options={
                "verbose_name": "Dashboard Export",
                "verbose_name_plural": "Dashboard Exports",
                "db_table": "dashboard_exports",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DashboardLayout",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("is_shared", models.BooleanField(default=False)),
                ("shared_with_roles", models.JSONField(default=list)),
                ("layout_config", models.JSONField(default=dict)),
                ("is_template", models.BooleanField(default=False)),
                ("is_default_for_role", models.CharField(blank=True, max_length=50)),
                ("is_active", models.BooleanField(default=True)),
                ("version", models.IntegerField(default=1)),
            ],
            options={
                "verbose_name": "Dashboard Layout",
                "verbose_name_plural": "Dashboard Layouts",
                "db_table": "dashboard_layouts",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DashboardTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("executive", "Executive Dashboard"),
                            ("sales", "Sales Dashboard"),
                            ("inventory", "Inventory Dashboard"),
                            ("customer", "Customer Dashboard"),
                            ("financial", "Financial Dashboard"),
                            ("operational", "Operational Dashboard"),
                            ("marketing", "Marketing Dashboard"),
                            ("support", "Support Dashboard"),
                        ],
                        max_length=20,
                    ),
                ),
                ("layout_config", models.JSONField(default=dict)),
                ("widgets_config", models.JSONField(default=list)),
                ("target_roles", models.JSONField(default=list)),
                (
                    "preview_image",
                    models.ImageField(blank=True, upload_to="dashboard_templates/"),
                ),
                ("tags", models.JSONField(default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("usage_count", models.IntegerField(default=0)),
            ],
            options={
                "verbose_name": "Dashboard Template",
                "verbose_name_plural": "Dashboard Templates",
                "db_table": "dashboard_templates",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DashboardUsageAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("session_id", models.CharField(max_length=40)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("view", "Dashboard View"),
                            ("widget_interact", "Widget Interaction"),
                            ("layout_change", "Layout Change"),
                            ("export", "Data Export"),
                            ("filter", "Filter Applied"),
                            ("refresh", "Data Refresh"),
                        ],
                        max_length=20,
                    ),
                ),
                ("metadata", models.JSONField(default=dict)),
                ("duration_seconds", models.IntegerField(blank=True, null=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Dashboard Usage Analytics",
                "verbose_name_plural": "Dashboard Usage Analytics",
                "db_table": "dashboard_usage_analytics",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DashboardUserPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("grid_size", models.IntegerField(default=12)),
                ("compact_mode", models.BooleanField(default=False)),
                (
                    "theme",
                    models.CharField(
                        choices=[
                            ("light", "Light Theme"),
                            ("dark", "Dark Theme"),
                            ("auto", "Auto (System)"),
                        ],
                        default="light",
                        max_length=10,
                    ),
                ),
                ("show_animations", models.BooleanField(default=True)),
                ("auto_refresh", models.BooleanField(default=True)),
                ("refresh_interval", models.IntegerField(default=300)),
                ("show_notifications", models.BooleanField(default=True)),
                (
                    "notification_position",
                    models.CharField(default="top-right", max_length=20),
                ),
                ("date_format", models.CharField(default="YYYY-MM-DD", max_length=20)),
                ("time_format", models.CharField(default="HH:mm:ss", max_length=20)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("currency", models.CharField(default="USD", max_length=10)),
                ("preferences", models.JSONField(default=dict)),
            ],
            options={
                "verbose_name": "Dashboard User Preference",
                "verbose_name_plural": "Dashboard User Preferences",
                "db_table": "dashboard_user_preferences",
            },
        ),
        migrations.CreateModel(
            name="DashboardWidget",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "widget_type",
                    models.CharField(
                        choices=[
                            ("metric", "Metric Card"),
                            ("chart", "Chart Widget"),
                            ("table", "Data Table"),
                            ("list", "List Widget"),
                            ("calendar", "Calendar Widget"),
                            ("map", "Map Widget"),
                            ("iframe", "External Content"),
                            ("custom", "Custom Widget"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "chart_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("line", "Line Chart"),
                            ("bar", "Bar Chart"),
                            ("pie", "Pie Chart"),
                            ("doughnut", "Doughnut Chart"),
                            ("area", "Area Chart"),
                            ("scatter", "Scatter Plot"),
                            ("radar", "Radar Chart"),
                            ("gauge", "Gauge Chart"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "size",
                    models.CharField(
                        choices=[
                            ("small", "Small (1x1)"),
                            ("medium", "Medium (2x1)"),
                            ("large", "Large (2x2)"),
                            ("wide", "Wide (3x1)"),
                            ("tall", "Tall (1x3)"),
                            ("extra_large", "Extra Large (3x2)"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("data_source", models.CharField(max_length=100)),
                ("data_config", models.JSONField(default=dict)),
                ("refresh_interval", models.IntegerField(default=300)),
                ("display_config", models.JSONField(default=dict)),
                ("chart_config", models.JSONField(default=dict)),
                ("is_public", models.BooleanField(default=False)),
                ("allowed_roles", models.JSONField(default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("is_system_widget", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Dashboard Widget",
                "verbose_name_plural": "Dashboard Widgets",
                "db_table": "dashboard_widgets",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DashboardWidgetPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("x", models.IntegerField(default=0)),
                ("y", models.IntegerField(default=0)),
                ("width", models.IntegerField(default=2)),
                ("height", models.IntegerField(default=2)),
                ("widget_config", models.JSONField(default=dict)),
                ("is_visible", models.BooleanField(default=True)),
                ("order", models.IntegerField(default=0)),
            ],
            options={
                "verbose_name": "Dashboard Widget Position",
                "verbose_name_plural": "Dashboard Widget Positions",
                "db_table": "dashboard_widget_positions",
                "ordering": ["order"],
            },
        ),
        migrations.RenameIndex(
            model_name="chartdatacache",
            new_name="admin_chart_cache_k_85a07e_idx",
            old_name="admin_chart_cache_k_4f8b2a_idx",
        ),
        migrations.RenameIndex(
            model_name="chartperformancemetric",
            new_name="admin_chart_chart_i_9307f0_idx",
            old_name="admin_chart_chart_i_b8c8a5_idx",
        ),
        migrations.AlterField(
            model_name="inventoryforecast",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="admin_forecasts",
                to="products.product",
            ),
        ),
        migrations.AlterField(
            model_name="inventoryforecast",
            name="warehouse",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="admin_forecasts",
                to="admin_panel.warehouse",
            ),
        ),
        migrations.AlterField(
            model_name="productanalytics",
            name="product",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="admin_analytics",
                to="products.product",
            ),
        ),
        migrations.AddField(
            model_name="dashboardwidgetposition",
            name="layout",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="admin_panel.dashboardlayout",
            ),
        ),
        migrations.AddField(
            model_name="dashboardwidgetposition",
            name="widget",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="admin_panel.dashboardwidget",
            ),
        ),
        migrations.AddField(
            model_name="dashboardwidget",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_widgets",
                to="admin_panel.adminuser",
            ),
        ),
        migrations.AddField(
            model_name="dashboarduserpreference",
            name="default_layout",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="admin_panel.dashboardlayout",
            ),
        ),
        migrations.AddField(
            model_name="dashboarduserpreference",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="dashboard_preferences",
                to="admin_panel.adminuser",
            ),
        ),
        migrations.AddField(
            model_name="dashboardusageanalytics",
            name="dashboard_layout",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="admin_panel.dashboardlayout",
            ),
        ),
        migrations.AddField(
            model_name="dashboardusageanalytics",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="dashboard_usage",
                to="admin_panel.adminuser",
            ),
        ),
        migrations.AddField(
            model_name="dashboardusageanalytics",
            name="widget",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="admin_panel.dashboardwidget",
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardtemplate",
            index=models.Index(
                fields=["template_type"], name="dashboard_t_templat_4e86a2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardtemplate",
            index=models.Index(
                fields=["is_active"], name="dashboard_t_is_acti_56e408_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardtemplate",
            index=models.Index(
                fields=["is_featured"], name="dashboard_t_is_feat_bad102_idx"
            ),
        ),
        migrations.AddField(
            model_name="dashboardlayout",
            name="owner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="dashboard_layouts",
                to="admin_panel.adminuser",
            ),
        ),
        migrations.AddField(
            model_name="dashboardlayout",
            name="shared_with_users",
            field=models.ManyToManyField(
                blank=True, related_name="shared_layouts", to="admin_panel.adminuser"
            ),
        ),
        migrations.AddField(
            model_name="dashboardlayout",
            name="widgets",
            field=models.ManyToManyField(
                through="admin_panel.DashboardWidgetPosition",
                to="admin_panel.dashboardwidget",
            ),
        ),
        migrations.AddField(
            model_name="dashboardexport",
            name="dashboard_layout",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="admin_panel.dashboardlayout",
            ),
        ),
        migrations.AddField(
            model_name="dashboardexport",
            name="exported_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="dashboard_exports",
                to="admin_panel.adminuser",
            ),
        ),
        migrations.AddField(
            model_name="dashboarddatasource",
            name="allowed_users",
            field=models.ManyToManyField(
                blank=True,
                related_name="accessible_data_sources",
                to="admin_panel.adminuser",
            ),
        ),
        migrations.AddField(
            model_name="dashboarddatasource",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="data_sources",
                to="admin_panel.adminuser",
            ),
        ),
        migrations.AddField(
            model_name="dashboardalert",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_alerts",
                to="admin_panel.adminuser",
            ),
        ),
        migrations.AddField(
            model_name="dashboardalert",
            name="recipients",
            field=models.ManyToManyField(
                blank=True, related_name="dashboard_alerts", to="admin_panel.adminuser"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="dashboardwidgetposition",
            unique_together={("layout", "widget")},
        ),
        migrations.AddIndex(
            model_name="dashboardwidget",
            index=models.Index(
                fields=["widget_type"], name="dashboard_w_widget__47e2e7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardwidget",
            index=models.Index(
                fields=["data_source"], name="dashboard_w_data_so_a8b0e6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardwidget",
            index=models.Index(
                fields=["is_active"], name="dashboard_w_is_acti_443f28_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardwidget",
            index=models.Index(
                fields=["created_by"], name="dashboard_w_created_676603_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardusageanalytics",
            index=models.Index(
                fields=["user", "created_at"], name="dashboard_u_user_id_7912d3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardusageanalytics",
            index=models.Index(
                fields=["action", "created_at"], name="dashboard_u_action_26fd49_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardusageanalytics",
            index=models.Index(
                fields=["dashboard_layout"], name="dashboard_u_dashboa_bfbe28_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardusageanalytics",
            index=models.Index(
                fields=["widget"], name="dashboard_u_widget__6ddf44_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardlayout",
            index=models.Index(fields=["owner"], name="dashboard_l_owner_i_734023_idx"),
        ),
        migrations.AddIndex(
            model_name="dashboardlayout",
            index=models.Index(
                fields=["is_template"], name="dashboard_l_is_temp_4e0cb7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardlayout",
            index=models.Index(
                fields=["is_default_for_role"], name="dashboard_l_is_defa_7d5f26_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardlayout",
            index=models.Index(
                fields=["is_active"], name="dashboard_l_is_acti_af789f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardexport",
            index=models.Index(
                fields=["export_type"], name="dashboard_e_export__35f352_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardexport",
            index=models.Index(fields=["status"], name="dashboard_e_status_6a9993_idx"),
        ),
        migrations.AddIndex(
            model_name="dashboardexport",
            index=models.Index(
                fields=["exported_by"], name="dashboard_e_exporte_69c276_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardexport",
            index=models.Index(
                fields=["access_token"], name="dashboard_e_access__45ad8e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardexport",
            index=models.Index(
                fields=["expires_at"], name="dashboard_e_expires_3af78a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboarddatasource",
            index=models.Index(
                fields=["source_type"], name="dashboard_d_source__c24783_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboarddatasource",
            index=models.Index(
                fields=["is_active"], name="dashboard_d_is_acti_7cdf83_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboarddatasource",
            index=models.Index(
                fields=["last_sync"], name="dashboard_d_last_sy_74bb0e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboarddatasource",
            index=models.Index(
                fields=["created_by"], name="dashboard_d_created_82a60c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardalert",
            index=models.Index(
                fields=["alert_type"], name="dashboard_a_alert_t_58b2cd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardalert",
            index=models.Index(
                fields=["severity"], name="dashboard_a_severit_c62edf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardalert",
            index=models.Index(fields=["status"], name="dashboard_a_status_9c8ef6_idx"),
        ),
        migrations.AddIndex(
            model_name="dashboardalert",
            index=models.Index(
                fields=["is_enabled"], name="dashboard_a_is_enab_457cd3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboardalert",
            index=models.Index(
                fields=["last_triggered"], name="dashboard_a_last_tr_664995_idx"
            ),
        ),
    ]
