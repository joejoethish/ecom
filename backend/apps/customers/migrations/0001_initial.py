# Generated by Django 5.2.1 on 2025-07-19 12:19

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '__first__'),
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('N', 'Prefer not to say')], max_length=1, verbose_name='Gender')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='customers/avatars/', verbose_name='Avatar')),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.', regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('alternate_phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.', regex='^\\+?1?\\d{9,15}$')], verbose_name='Alternate Phone')),
                ('account_status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUSPENDED', 'Suspended'), ('BLOCKED', 'Blocked'), ('PENDING_VERIFICATION', 'Pending Verification')], default='ACTIVE', max_length=20, verbose_name='Account Status')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is Verified')),
                ('verification_date', models.DateTimeField(blank=True, null=True, verbose_name='Verification Date')),
                ('newsletter_subscription', models.BooleanField(default=True, verbose_name='Newsletter Subscription')),
                ('sms_notifications', models.BooleanField(default=True, verbose_name='SMS Notifications')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Email Notifications')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='Push Notifications')),
                ('total_orders', models.PositiveIntegerField(default=0, verbose_name='Total Orders')),
                ('total_spent', models.DecimalField(decimal_places=2, default=0.0, max_digits=12, verbose_name='Total Spent')),
                ('loyalty_points', models.PositiveIntegerField(default=0, verbose_name='Loyalty Points')),
                ('last_login_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Login Date')),
                ('last_order_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Order Date')),
                ('notes', models.TextField(blank=True, help_text='Internal notes for admin use', verbose_name='Admin Notes')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customer Profile',
                'verbose_name_plural': 'Customer Profiles',
            },
        ),
        migrations.CreateModel(
            name='CustomerActivity',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('activity_type', models.CharField(choices=[('LOGIN', 'Login'), ('LOGOUT', 'Logout'), ('PRODUCT_VIEW', 'Product View'), ('CATEGORY_VIEW', 'Category View'), ('SEARCH', 'Search'), ('ADD_TO_CART', 'Add to Cart'), ('REMOVE_FROM_CART', 'Remove from Cart'), ('ADD_TO_WISHLIST', 'Add to Wishlist'), ('REMOVE_FROM_WISHLIST', 'Remove from Wishlist'), ('ORDER_PLACED', 'Order Placed'), ('ORDER_CANCELLED', 'Order Cancelled'), ('REVIEW_SUBMITTED', 'Review Submitted'), ('SUPPORT_TICKET', 'Support Ticket')], max_length=20, verbose_name='Activity Type')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('session_key', models.CharField(blank=True, max_length=40, verbose_name='Session Key')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Metadata')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customer_activities', to='orders.order')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customer_activities', to='products.product')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='customers.customerprofile')),
            ],
            options={
                'verbose_name': 'Customer Activity',
                'verbose_name_plural': 'Customer Activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('type', models.CharField(choices=[('HOME', 'Home'), ('WORK', 'Work'), ('OTHER', 'Other')], max_length=10, verbose_name='Address Type')),
                ('first_name', models.CharField(max_length=50, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=50, verbose_name='Last Name')),
                ('company', models.CharField(blank=True, max_length=100, verbose_name='Company')),
                ('address_line_1', models.CharField(max_length=200, verbose_name='Address Line 1')),
                ('address_line_2', models.CharField(blank=True, max_length=200, verbose_name='Address Line 2')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('state', models.CharField(max_length=100, verbose_name='State')),
                ('postal_code', models.CharField(max_length=20, verbose_name='Postal Code')),
                ('country', models.CharField(default='India', max_length=100, verbose_name='Country')),
                ('phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.', regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('is_default', models.BooleanField(default=False, verbose_name='Default Address')),
                ('is_billing_default', models.BooleanField(default=False, verbose_name='Default Billing Address')),
                ('is_shipping_default', models.BooleanField(default=False, verbose_name='Default Shipping Address')),
                ('delivery_instructions', models.TextField(blank=True, help_text='Special instructions for delivery', verbose_name='Delivery Instructions')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Longitude')),
                ('usage_count', models.PositiveIntegerField(default=0, verbose_name='Usage Count')),
                ('last_used', models.DateTimeField(blank=True, null=True, verbose_name='Last Used')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='customers.customerprofile')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(default='My Wishlist', max_length=100, verbose_name='Wishlist Name')),
                ('is_public', models.BooleanField(default=False, verbose_name='Public Wishlist')),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist', to='customers.customerprofile')),
            ],
            options={
                'verbose_name': 'Wishlist',
                'verbose_name_plural': 'Wishlists',
            },
        ),
        migrations.CreateModel(
            name='WishlistItem',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='Added At')),
                ('notes', models.TextField(blank=True, help_text='Personal notes about this item', verbose_name='Notes')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist_items', to='products.product')),
                ('wishlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='customers.wishlist')),
            ],
            options={
                'verbose_name': 'Wishlist Item',
                'verbose_name_plural': 'Wishlist Items',
            },
        ),
        migrations.AddIndex(
            model_name='customerprofile',
            index=models.Index(fields=['account_status'], name='customers_c_account_0c88f5_idx'),
        ),
        migrations.AddIndex(
            model_name='customerprofile',
            index=models.Index(fields=['is_verified'], name='customers_c_is_veri_834234_idx'),
        ),
        migrations.AddIndex(
            model_name='customerprofile',
            index=models.Index(fields=['total_orders'], name='customers_c_total_o_8ff80c_idx'),
        ),
        migrations.AddIndex(
            model_name='customerprofile',
            index=models.Index(fields=['total_spent'], name='customers_c_total_s_0cb95f_idx'),
        ),
        migrations.AddIndex(
            model_name='customerprofile',
            index=models.Index(fields=['last_login_date'], name='customers_c_last_lo_5154b2_idx'),
        ),
        migrations.AddIndex(
            model_name='customeractivity',
            index=models.Index(fields=['customer', 'activity_type'], name='customers_c_custome_becf78_idx'),
        ),
        migrations.AddIndex(
            model_name='customeractivity',
            index=models.Index(fields=['customer', 'created_at'], name='customers_c_custome_9b78c0_idx'),
        ),
        migrations.AddIndex(
            model_name='customeractivity',
            index=models.Index(fields=['activity_type', 'created_at'], name='customers_c_activit_d2cce7_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['customer', 'is_default'], name='customers_a_custome_d08d94_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['customer', 'type'], name='customers_a_custome_b6ecf1_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['postal_code'], name='customers_a_postal__89520f_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['city', 'state'], name='customers_a_city_ed6507_idx'),
        ),
        migrations.AddConstraint(
            model_name='address',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('customer',), name='unique_default_address_per_customer'),
        ),
        migrations.AddConstraint(
            model_name='address',
            constraint=models.UniqueConstraint(condition=models.Q(('is_billing_default', True)), fields=('customer',), name='unique_default_billing_address_per_customer'),
        ),
        migrations.AddConstraint(
            model_name='address',
            constraint=models.UniqueConstraint(condition=models.Q(('is_shipping_default', True)), fields=('customer',), name='unique_default_shipping_address_per_customer'),
        ),
        migrations.AddIndex(
            model_name='wishlistitem',
            index=models.Index(fields=['wishlist', 'added_at'], name='customers_w_wishlis_6b7717_idx'),
        ),
        migrations.AddIndex(
            model_name='wishlistitem',
            index=models.Index(fields=['product'], name='customers_w_product_6f8cc9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='wishlistitem',
            unique_together={('wishlist', 'product')},
        ),
    ]
