# Generated by Django 4.2.23 on 2025-08-25 06:05

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("customer", "Customer"),
                            ("seller", "Seller"),
                            ("admin", "Admin"),
                            ("super_admin", "Super Admin"),
                        ],
                        default="customer",
                        max_length=20,
                    ),
                ),
                ("uuid", models.CharField(blank=True, max_length=32, unique=True)),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("M", "Male"),
                            ("F", "Female"),
                            ("O", "Other"),
                            ("N", "Prefer not to say"),
                        ],
                        max_length=1,
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(blank=True, null=True, upload_to="avatars/"),
                ),
                ("is_verified", models.BooleanField(default=False)),
                ("is_phone_verified", models.BooleanField(default=False)),
                ("is_email_verified", models.BooleanField(default=False)),
                ("last_login_ip", models.GenericIPAddressField(blank=True, null=True)),
                ("failed_login_attempts", models.IntegerField(default=0)),
                ("account_locked_until", models.DateTimeField(blank=True, null=True)),
                ("password_changed_at", models.DateTimeField(blank=True, null=True)),
                ("newsletter_subscription", models.BooleanField(default=True)),
                ("sms_notifications", models.BooleanField(default=True)),
                ("email_notifications", models.BooleanField(default=True)),
                ("bio", models.TextField(blank=True, max_length=500)),
                ("website", models.URLField(blank=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "auth_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("alternate_phone", models.CharField(blank=True, max_length=15)),
                (
                    "emergency_contact_name",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(blank=True, max_length=15),
                ),
                ("preferences", models.JSONField(blank=True, default=dict)),
                ("facebook_url", models.URLField(blank=True)),
                ("twitter_url", models.URLField(blank=True)),
                ("instagram_url", models.URLField(blank=True)),
                ("linkedin_url", models.URLField(blank=True)),
                (
                    "profile_visibility",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("private", "Private"),
                            ("friends", "Friends Only"),
                        ],
                        default="public",
                        max_length=20,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
            },
        ),
        migrations.CreateModel(
            name="PasswordResetAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("email", models.EmailField(max_length=254)),
                ("success", models.BooleanField(default=False)),
                ("user_agent", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Password Reset Attempt",
                "verbose_name_plural": "Password Reset Attempts",
                "indexes": [
                    models.Index(
                        fields=["ip_address", "created_at"],
                        name="authenticat_ip_addr_936cfe_idx",
                    ),
                    models.Index(
                        fields=["email", "created_at"],
                        name="authenticat_email_467b49_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="authenticat_created_5ccc6c_idx"
                    ),
                    models.Index(
                        fields=["ip_address", "success"],
                        name="authenticat_ip_addr_eedd48_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="EmailVerificationAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("email", models.EmailField(max_length=254)),
                ("success", models.BooleanField(default=False)),
                ("user_agent", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Email Verification Attempt",
                "verbose_name_plural": "Email Verification Attempts",
                "indexes": [
                    models.Index(
                        fields=["ip_address", "created_at"],
                        name="authenticat_ip_addr_02c1c5_idx",
                    ),
                    models.Index(
                        fields=["email", "created_at"],
                        name="authenticat_email_6aad5c_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="authenticat_created_d8a3f2_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("session_key", models.CharField(max_length=128, unique=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                (
                    "device_info",
                    models.JSONField(
                        default=dict,
                        help_text="Device information including browser, OS, device type",
                    ),
                ),
                ("location", models.CharField(blank=True, max_length=100)),
                ("is_active", models.BooleanField(default=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                (
                    "login_method",
                    models.CharField(
                        choices=[
                            ("password", "Password"),
                            ("social", "Social Login"),
                            ("admin", "Admin Login"),
                        ],
                        default="password",
                        max_length=20,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Session",
                "verbose_name_plural": "User Sessions",
                "indexes": [
                    models.Index(
                        fields=["user", "is_active"],
                        name="authenticat_user_id_f427c8_idx",
                    ),
                    models.Index(
                        fields=["session_key"], name="authenticat_session_1fea71_idx"
                    ),
                    models.Index(
                        fields=["last_activity"], name="authenticat_last_ac_04a1e9_idx"
                    ),
                    models.Index(
                        fields=["ip_address"], name="authenticat_ip_addr_d6bbd8_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PasswordReset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("token", models.CharField(max_length=64, unique=True)),
                ("expires_at", models.DateTimeField()),
                ("is_used", models.BooleanField(default=False)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_resets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Password Reset",
                "verbose_name_plural": "Password Resets",
                "indexes": [
                    models.Index(fields=["token"], name="authenticat_token_4b0921_idx"),
                    models.Index(
                        fields=["expires_at"], name="authenticat_expires_49bd83_idx"
                    ),
                    models.Index(
                        fields=["user", "is_used"],
                        name="authenticat_user_id_d8f30e_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="authenticat_created_963861_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="EmailVerification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("token", models.CharField(max_length=64, unique=True)),
                ("expires_at", models.DateTimeField()),
                ("is_used", models.BooleanField(default=False)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="email_verifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Verification",
                "verbose_name_plural": "Email Verifications",
                "indexes": [
                    models.Index(fields=["token"], name="authenticat_token_368f59_idx"),
                    models.Index(
                        fields=["expires_at"], name="authenticat_expires_af14fb_idx"
                    ),
                    models.Index(
                        fields=["user", "is_used"],
                        name="authenticat_user_id_467c85_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="authenticat_created_dfa7fe_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="auth_user_email_ece7f7_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["user_type"], name="auth_user_user_ty_90c0e9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["is_verified"], name="auth_user_is_veri_c40f2e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["is_email_verified"], name="auth_user_is_emai_3a8972_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["last_login_ip"], name="auth_user_last_lo_9a4e95_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["account_locked_until"], name="auth_user_account_915d36_idx"
            ),
        ),
    ]
